// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package openiz.warehouse_users_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Warehouse_Users Purpose: Warehouses security users and session information<br>
 * Description: This process is intended to copy the security users and security sessions from the production database into the warehouse. <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class Warehouse_Users implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(auditServer != null){
				
					this.setProperty("auditServer", auditServer.toString());
				
			}
			
			if(auditCatalog != null){
				
					this.setProperty("auditCatalog", auditCatalog.toString());
				
			}
			
			if(auditPassword != null){
				
					this.setProperty("auditPassword", auditPassword.toString());
				
			}
			
			if(auditUser != null){
				
					this.setProperty("auditUser", auditUser.toString());
				
			}
			
			if(dbName != null){
				
					this.setProperty("dbName", dbName.toString());
				
			}
			
			if(dbPassword != null){
				
					this.setProperty("dbPassword", dbPassword.toString());
				
			}
			
			if(dbPort != null){
				
					this.setProperty("dbPort", dbPort.toString());
				
			}
			
			if(dbServer != null){
				
					this.setProperty("dbServer", dbServer.toString());
				
			}
			
			if(dbUser != null){
				
					this.setProperty("dbUser", dbUser.toString());
				
			}
			
			if(dwName != null){
				
					this.setProperty("dwName", dwName.toString());
				
			}
			
			if(dwPassword != null){
				
					this.setProperty("dwPassword", dwPassword.toString());
				
			}
			
			if(dwPort != null){
				
					this.setProperty("dwPort", dwPort.toString());
				
			}
			
			if(dwServer != null){
				
					this.setProperty("dwServer", dwServer.toString());
				
			}
			
			if(dwUser != null){
				
					this.setProperty("dwUser", dwUser.toString());
				
			}
			
			if(dwTemplate != null){
				
					this.setProperty("dwTemplate", dwTemplate.toString());
				
			}
			
			if(dwWorking != null){
				
					this.setProperty("dwWorking", dwWorking.toString());
				
			}
			
		}

public String auditServer;
public String getAuditServer(){
	return this.auditServer;
}
public String auditCatalog;
public String getAuditCatalog(){
	return this.auditCatalog;
}
public String auditPassword;
public String getAuditPassword(){
	return this.auditPassword;
}
public String auditUser;
public String getAuditUser(){
	return this.auditUser;
}
public String dbName;
public String getDbName(){
	return this.dbName;
}
public String dbPassword;
public String getDbPassword(){
	return this.dbPassword;
}
public String dbPort;
public String getDbPort(){
	return this.dbPort;
}
public String dbServer;
public String getDbServer(){
	return this.dbServer;
}
public String dbUser;
public String getDbUser(){
	return this.dbUser;
}
public String dwName;
public String getDwName(){
	return this.dwName;
}
public String dwPassword;
public String getDwPassword(){
	return this.dwPassword;
}
public String dwPort;
public String getDwPort(){
	return this.dwPort;
}
public String dwServer;
public String getDwServer(){
	return this.dwServer;
}
public String dwUser;
public String getDwUser(){
	return this.dwUser;
}
public String dwTemplate;
public String getDwTemplate(){
	return this.dwTemplate;
}
public String dwWorking;
public String getDwWorking(){
	return this.dwWorking;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Warehouse_Users";
	private final String projectName = "OPENIZ";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Warehouse_Users.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Warehouse_Users.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostgresqlConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError2", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJoin_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError3", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRollback_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRollback_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlConnection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRollback_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPostgresqlConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_1", false);
		start_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_1";

	
		int tos_count_tPostgresqlConnection_1 = 0;
		


	
		String url_tPostgresqlConnection_1 = "jdbc:postgresql://"+context.dbServer+":"+context.dbPort+"/"+context.dbName; 
		String dbUser_tPostgresqlConnection_1 = context.dbUser;
		
		
			
	final String decryptedPassword_tPostgresqlConnection_1 = context.dbPassword; 
			String dbPwd_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;
		
	java.sql.Connection conn_tPostgresqlConnection_1 = null;
	
		java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_1 =  java.sql.DriverManager.getDrivers();
    while (drivers_tPostgresqlConnection_1.hasMoreElements()) {
        java.sql.Driver d_tPostgresqlConnection_1 = drivers_tPostgresqlConnection_1.nextElement();
        java.util.List<String> driverList_tPostgresqlConnection_1 = java.util.Arrays.<String>asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver");
        if (driverList_tPostgresqlConnection_1.contains(d_tPostgresqlConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tPostgresqlConnection_1);
                java.sql.DriverManager.registerDriver(d_tPostgresqlConnection_1);
            } catch (java.lang.Exception e_tPostgresqlConnection_1) {
            		//do nothing
            }
        }
    }
					String driverClass_tPostgresqlConnection_1 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tPostgresqlConnection_1);
		
				conn_tPostgresqlConnection_1 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_1,dbUser_tPostgresqlConnection_1,dbPwd_tPostgresqlConnection_1);

		globalMap.put("conn_tPostgresqlConnection_1", conn_tPostgresqlConnection_1);
	if (null != conn_tPostgresqlConnection_1) {
		
			conn_tPostgresqlConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_1","public");

	globalMap.put("conn_" + "tPostgresqlConnection_1",conn_tPostgresqlConnection_1);

 



/**
 * [tPostgresqlConnection_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 


	tos_count_tPostgresqlConnection_1++;

/**
 * [tPostgresqlConnection_1 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 

ok_Hash.put("tPostgresqlConnection_1", true);
end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());




/**
 * [tPostgresqlConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tPostgresqlConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_2", false);
		start_Hash.put("tPostgresqlConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_2";

	
		int tos_count_tPostgresqlConnection_2 = 0;
		


	
		String url_tPostgresqlConnection_2 = "jdbc:postgresql://"+context.dwServer+":"+context.dwPort+"/"+context.dwWorking; 
		String dbUser_tPostgresqlConnection_2 = context.dwUser;
		
		
			
	final String decryptedPassword_tPostgresqlConnection_2 = context.dwPassword; 
			String dbPwd_tPostgresqlConnection_2 = decryptedPassword_tPostgresqlConnection_2;
		
	java.sql.Connection conn_tPostgresqlConnection_2 = null;
	
		java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_2 =  java.sql.DriverManager.getDrivers();
    while (drivers_tPostgresqlConnection_2.hasMoreElements()) {
        java.sql.Driver d_tPostgresqlConnection_2 = drivers_tPostgresqlConnection_2.nextElement();
        java.util.List<String> driverList_tPostgresqlConnection_2 = java.util.Arrays.<String>asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver");
        if (driverList_tPostgresqlConnection_2.contains(d_tPostgresqlConnection_2.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tPostgresqlConnection_2);
                java.sql.DriverManager.registerDriver(d_tPostgresqlConnection_2);
            } catch (java.lang.Exception e_tPostgresqlConnection_2) {
            		//do nothing
            }
        }
    }
					String driverClass_tPostgresqlConnection_2 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tPostgresqlConnection_2);
		
				conn_tPostgresqlConnection_2 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_2,dbUser_tPostgresqlConnection_2,dbPwd_tPostgresqlConnection_2);

		globalMap.put("conn_tPostgresqlConnection_2", conn_tPostgresqlConnection_2);
	if (null != conn_tPostgresqlConnection_2) {
		
			conn_tPostgresqlConnection_2.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_2","public");

	globalMap.put("conn_" + "tPostgresqlConnection_2",conn_tPostgresqlConnection_2);

 



/**
 * [tPostgresqlConnection_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 


	tos_count_tPostgresqlConnection_2++;

/**
 * [tPostgresqlConnection_2 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 



/**
 * [tPostgresqlConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 



/**
 * [tPostgresqlConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 

ok_Hash.put("tPostgresqlConnection_2", true);
end_Hash.put("tPostgresqlConnection_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tPostgresqlConnection_3Process(globalMap);



/**
 * [tPostgresqlConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 



/**
 * [tPostgresqlConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_3", false);
		start_Hash.put("tPostgresqlConnection_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_3";

	
		int tos_count_tPostgresqlConnection_3 = 0;
		


	
		String url_tPostgresqlConnection_3 = "jdbc:postgresql://"+context.auditServer+":"+"5432"+"/"+context.auditCatalog; 
		String dbUser_tPostgresqlConnection_3 = context.auditUser;
		
		
			
	final String decryptedPassword_tPostgresqlConnection_3 = context.auditPassword; 
			String dbPwd_tPostgresqlConnection_3 = decryptedPassword_tPostgresqlConnection_3;
		
	java.sql.Connection conn_tPostgresqlConnection_3 = null;
	
		java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_3 =  java.sql.DriverManager.getDrivers();
    while (drivers_tPostgresqlConnection_3.hasMoreElements()) {
        java.sql.Driver d_tPostgresqlConnection_3 = drivers_tPostgresqlConnection_3.nextElement();
        java.util.List<String> driverList_tPostgresqlConnection_3 = java.util.Arrays.<String>asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver");
        if (driverList_tPostgresqlConnection_3.contains(d_tPostgresqlConnection_3.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tPostgresqlConnection_3);
                java.sql.DriverManager.registerDriver(d_tPostgresqlConnection_3);
            } catch (java.lang.Exception e_tPostgresqlConnection_3) {
            		//do nothing
            }
        }
    }
					String driverClass_tPostgresqlConnection_3 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tPostgresqlConnection_3);
		
				conn_tPostgresqlConnection_3 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_3,dbUser_tPostgresqlConnection_3,dbPwd_tPostgresqlConnection_3);

		globalMap.put("conn_tPostgresqlConnection_3", conn_tPostgresqlConnection_3);
	if (null != conn_tPostgresqlConnection_3) {
		
			conn_tPostgresqlConnection_3.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_3","public");

	globalMap.put("conn_" + "tPostgresqlConnection_3",conn_tPostgresqlConnection_3);

 



/**
 * [tPostgresqlConnection_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_3";

	

 


	tos_count_tPostgresqlConnection_3++;

/**
 * [tPostgresqlConnection_3 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_3";

	

 



/**
 * [tPostgresqlConnection_3 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_3";

	

 



/**
 * [tPostgresqlConnection_3 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlConnection_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_3";

	

 

ok_Hash.put("tPostgresqlConnection_3", true);
end_Hash.put("tPostgresqlConnection_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tPostgresqlRow_1Process(globalMap);



/**
 * [tPostgresqlConnection_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_3";

	

 



/**
 * [tPostgresqlConnection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_3_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_1", false);
		start_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_1";

	
		int tos_count_tPostgresqlRow_1 = 0;
		

	java.sql.Connection conn_tPostgresqlRow_1 = null;
	String query_tPostgresqlRow_1 = "";
	boolean whetherReject_tPostgresqlRow_1 = false;
				conn_tPostgresqlRow_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
			
    resourceMap.put("conn_tPostgresqlRow_1", conn_tPostgresqlRow_1);
        java.sql.Statement stmt_tPostgresqlRow_1 = conn_tPostgresqlRow_1.createStatement();
        resourceMap.put("stmt_tPostgresqlRow_1", stmt_tPostgresqlRow_1);


 



/**
 * [tPostgresqlRow_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

query_tPostgresqlRow_1 = "SET CONSTRAINTS ALL DEFERRED;\nTRUNCATE USR_TBL CASCADE;\nTRUNCATE PVD_TBL CASCADE;\n\n";
whetherReject_tPostgresqlRow_1 = false;
globalMap.put("tPostgresqlRow_1_QUERY",query_tPostgresqlRow_1);
try {
		stmt_tPostgresqlRow_1.execute(query_tPostgresqlRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_1) {
		
	}
	

 


	tos_count_tPostgresqlRow_1++;

/**
 * [tPostgresqlRow_1 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

 



/**
 * [tPostgresqlRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

 



/**
 * [tPostgresqlRow_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

	
        stmt_tPostgresqlRow_1.close();
        resourceMap.remove("stmt_tPostgresqlRow_1");
    resourceMap.put("statementClosed_tPostgresqlRow_1", true);
    resourceMap.put("finish_tPostgresqlRow_1", true);
 

ok_Hash.put("tPostgresqlRow_1", true);
end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());




/**
 * [tPostgresqlRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

    if (resourceMap.get("statementClosed_tPostgresqlRow_1") == null) {
            java.sql.Statement stmtToClose_tPostgresqlRow_1 = null;
            if ((stmtToClose_tPostgresqlRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tPostgresqlRow_1")) != null) {
                stmtToClose_tPostgresqlRow_1.close();
            }
    }
 



/**
 * [tPostgresqlRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
				conn_tDBRow_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
			
    resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);


 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

query_tDBRow_1 = "update ent_vrsn_tbl set obslt_utc = null , obslt_usr_id = null \nwhere ent_vrsn_id IN\n(select (select ent_vrsn_id from"
+" ent_vrsn_tbl where ent_vrsn_tbl.ent_id = a.ent_id order by crt_utc desc limit 1)\nfrom \n	usr_ent_tbl \n	inner join ent"
+"_vrsn_tbl a using (ent_vrsn_id)\ngroup by ent_id\nhaving sum((obslt_utc is null)::INT) = 0)";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
		stmt_tDBRow_1.execute(query_tDBRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_1) {
		
	}
	

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

	
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
    resourceMap.put("finish_tDBRow_1", true);
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tPostgresqlInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class outputUsersStruct implements routines.system.IPersistableRow<outputUsersStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Users = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Users = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object psn_id;

				public Object getPsn_id () {
					return this.psn_id;
				}
				
			    public String usr_name;

				public String getUsr_name () {
					return this.usr_name;
				}
				
			    public java.util.Date last_lgn_utc;

				public java.util.Date getLast_lgn_utc () {
					return this.last_lgn_utc;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public java.util.Date lockout;

				public java.util.Date getLockout () {
					return this.lockout;
				}
				
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.usr_id == null) ? 0 : this.usr_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputUsersStruct other = (outputUsersStruct) obj;
		
						if (this.usr_id == null) {
							if (other.usr_id != null)
								return false;
						
						} else if (!this.usr_id.equals(other.usr_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputUsersStruct other) {

		other.usr_id = this.usr_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            other.psn_id = this.psn_id;
	            other.usr_name = this.usr_name;
	            other.last_lgn_utc = this.last_lgn_utc;
	            other.email = this.email;
	            other.lockout = this.lockout;
	            other.fac_id = this.fac_id;
	            
	}

	public void copyKeysDataTo(outputUsersStruct other) {

		other.usr_id = this.usr_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Users.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Users.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Users, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Users, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Users) {

        	try {

        		int length = 0;
		
						this.usr_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
						this.psn_id = (Object) dis.readObject();
					
					this.usr_name = readString(dis);
					
					this.last_lgn_utc = readDate(dis);
					
					this.email = readString(dis);
					
					this.lockout = readDate(dis);
					
						this.fac_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.psn_id);
					
					// String
				
						writeString(this.usr_name,dos);
					
					// java.util.Date
				
						writeDate(this.last_lgn_utc,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// java.util.Date
				
						writeDate(this.lockout,dos);
					
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("usr_id="+String.valueOf(usr_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",psn_id="+String.valueOf(psn_id));
		sb.append(",usr_name="+usr_name);
		sb.append(",last_lgn_utc="+String.valueOf(last_lgn_utc));
		sb.append(",email="+email);
		sb.append(",lockout="+String.valueOf(lockout));
		sb.append(",fac_id="+String.valueOf(fac_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputUsersStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.usr_id, other.usr_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Users = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Users = new byte[0];

	
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public String usr_name;

				public String getUsr_name () {
					return this.usr_name;
				}
				
			    public java.util.Date last_login_utc;

				public java.util.Date getLast_login_utc () {
					return this.last_login_utc;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String phn_num;

				public String getPhn_num () {
					return this.phn_num;
				}
				
			    public Object loc_id;

				public Object getLoc_id () {
					return this.loc_id;
				}
				
			    public Object pvd_id;

				public Object getPvd_id () {
					return this.pvd_id;
				}
				
			    public java.util.Date locked;

				public java.util.Date getLocked () {
					return this.locked;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Users.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Users.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Users, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Users, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Users) {

        	try {

        		int length = 0;
		
						this.usr_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
						this.ent_id = (Object) dis.readObject();
					
					this.usr_name = readString(dis);
					
					this.last_login_utc = readDate(dis);
					
					this.email = readString(dis);
					
					this.phn_num = readString(dis);
					
						this.loc_id = (Object) dis.readObject();
					
						this.pvd_id = (Object) dis.readObject();
					
					this.locked = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// String
				
						writeString(this.usr_name,dos);
					
					// java.util.Date
				
						writeDate(this.last_login_utc,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.phn_num,dos);
					
					// Object
				
       			    	dos.writeObject(this.loc_id);
					
					// Object
				
       			    	dos.writeObject(this.pvd_id);
					
					// java.util.Date
				
						writeDate(this.locked,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("usr_id="+String.valueOf(usr_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",usr_name="+usr_name);
		sb.append(",last_login_utc="+String.valueOf(last_login_utc));
		sb.append(",email="+email);
		sb.append(",phn_num="+phn_num);
		sb.append(",loc_id="+String.valueOf(loc_id));
		sb.append(",pvd_id="+String.valueOf(pvd_id));
		sb.append(",locked="+String.valueOf(locked));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_1Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_1Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Users = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Users = new byte[0];

	
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public String usr_name;

				public String getUsr_name () {
					return this.usr_name;
				}
				
			    public java.util.Date last_login_utc;

				public java.util.Date getLast_login_utc () {
					return this.last_login_utc;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String phn_num;

				public String getPhn_num () {
					return this.phn_num;
				}
				
			    public Object loc_id;

				public Object getLoc_id () {
					return this.loc_id;
				}
				
			    public Object pvd_id;

				public Object getPvd_id () {
					return this.pvd_id;
				}
				
			    public java.util.Date locked;

				public java.util.Date getLocked () {
					return this.locked;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Users.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Users.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Users, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Users, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Users) {

        	try {

        		int length = 0;
		
						this.usr_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
						this.ent_id = (Object) dis.readObject();
					
					this.usr_name = readString(dis);
					
					this.last_login_utc = readDate(dis);
					
					this.email = readString(dis);
					
					this.phn_num = readString(dis);
					
						this.loc_id = (Object) dis.readObject();
					
						this.pvd_id = (Object) dis.readObject();
					
					this.locked = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// String
				
						writeString(this.usr_name,dos);
					
					// java.util.Date
				
						writeDate(this.last_login_utc,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.phn_num,dos);
					
					// Object
				
       			    	dos.writeObject(this.loc_id);
					
					// Object
				
       			    	dos.writeObject(this.pvd_id);
					
					// java.util.Date
				
						writeDate(this.locked,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("usr_id="+String.valueOf(usr_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",usr_name="+usr_name);
		sb.append(",last_login_utc="+String.valueOf(last_login_utc));
		sb.append(",email="+email);
		sb.append(",phn_num="+phn_num);
		sb.append(",loc_id="+String.valueOf(loc_id));
		sb.append(",pvd_id="+String.valueOf(pvd_id));
		sb.append(",locked="+String.valueOf(locked));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_8Process(globalMap);

		row1Struct row1 = new row1Struct();
outputUsersStruct outputUsers = new outputUsersStruct();





	
	/**
	 * [tPostgresqlOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_3", false);
		start_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputUsers" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_3 = 0;
		





String dbschema_tPostgresqlOutput_3 = null;
	dbschema_tPostgresqlOutput_3 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_3 = null;
if(dbschema_tPostgresqlOutput_3 == null || dbschema_tPostgresqlOutput_3.trim().length() == 0) {
	tableName_tPostgresqlOutput_3 = "usr_tbl";
} else {
	tableName_tPostgresqlOutput_3 = dbschema_tPostgresqlOutput_3 + "\".\"" + "usr_tbl";
}

int nb_line_tPostgresqlOutput_3 = 0;
int nb_line_update_tPostgresqlOutput_3 = 0;
int nb_line_inserted_tPostgresqlOutput_3 = 0;
int nb_line_deleted_tPostgresqlOutput_3 = 0;
int nb_line_rejected_tPostgresqlOutput_3 = 0;

int deletedCount_tPostgresqlOutput_3=0;
int updatedCount_tPostgresqlOutput_3=0;
int insertedCount_tPostgresqlOutput_3=0;
int rejectedCount_tPostgresqlOutput_3=0;

boolean whetherReject_tPostgresqlOutput_3 = false;

java.sql.Connection conn_tPostgresqlOutput_3 = null;
String dbUser_tPostgresqlOutput_3 = null;

	conn_tPostgresqlOutput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_3 = 10000;
   int batchSizeCounter_tPostgresqlOutput_3=0;

int count_tPostgresqlOutput_3=0;
	    String insert_tPostgresqlOutput_3 = "INSERT INTO \"" + tableName_tPostgresqlOutput_3 + "\" (\"usr_id\",\"crt_etl_id\",\"upd_etl_id\",\"crt_utc\",\"upd_utc\",\"obslt_utc\",\"psn_id\",\"usr_name\",\"last_lgn_utc\",\"email\",\"lockout\",\"fac_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.prepareStatement(insert_tPostgresqlOutput_3);
	    resourceMap.put("pstmt_tPostgresqlOutput_3", pstmt_tPostgresqlOutput_3);
	    

 



/**
 * [tPostgresqlOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	
		tHash_Lookup_row2.initGet();
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputUsersStruct outputUsers_tmp = new outputUsersStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
		        conn_tPostgresqlInput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "select distinct usr_id, sec_usr_tbl.crt_utc, ent_vrsn_tbl.obslt_utc, ent_vrsn_tbl.ent_id, usr_name, last_login_utc, ema"
+"il, phn_num, loc_id.trg_ent_id as loc_id, pvd_id.trg_ent_id as pvd_id, locked, upd_utc\nfrom \n	usr_ent_tbl natural join"
+" ent_vrsn_tbl \n	inner join sec_usr_tbl on (sec_usr_id = usr_id)\n	left join ent_rel_tbl loc_id on (loc_id.src_ent_id = "
+"ent_vrsn_tbl.ent_id and loc_id.rel_typ_cd_id = '455F1772-F580-47E8-86BD-B5CE25D351F9' and loc_id.obslt_vrsn_seq_id is nu"
+"ll)\n	left join ent_rel_tbl pvd_id on (pvd_id.src_ent_id = ent_vrsn_tbl.ent_id and pvd_id.rel_typ_cd_id = '77B7A04B-C065"
+"-4FAF-8EC0-2CDAD4AE372B' and pvd_id.obslt_vrsn_seq_id is null)\nwhere\n	ent_vrsn_tbl.obslt_utc is null";
			

            	globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);
		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;

		    try {
		    	rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								row1.usr_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(1) != null) {
                row1.usr_id = rs_tPostgresqlInput_1.getObject(1);
            } else {
                    row1.usr_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								row1.crt_utc = null;
							} else {
										
			row1.crt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 3) {
								row1.obslt_utc = null;
							} else {
										
			row1.obslt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 3);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 4) {
								row1.ent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(4) != null) {
                row1.ent_id = rs_tPostgresqlInput_1.getObject(4);
            } else {
                    row1.ent_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 5) {
								row1.usr_name = null;
							} else {
	                         		
        	row1.usr_name = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 5, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 6) {
								row1.last_login_utc = null;
							} else {
										
			row1.last_login_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 6);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 7) {
								row1.email = null;
							} else {
	                         		
        	row1.email = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 7, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 8) {
								row1.phn_num = null;
							} else {
	                         		
        	row1.phn_num = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 8, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 9) {
								row1.loc_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(9) != null) {
                row1.loc_id = rs_tPostgresqlInput_1.getObject(9);
            } else {
                    row1.loc_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 10) {
								row1.pvd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(10) != null) {
                row1.pvd_id = rs_tPostgresqlInput_1.getObject(10);
            } else {
                    row1.pvd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 11) {
								row1.locked = null;
							} else {
										
			row1.locked = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 11);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 12) {
								row1.upd_utc = null;
							} else {
										
			row1.upd_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 12);
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow2 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow2 = true;
			           		  	} // G 21
                    		  	
                    		

							row2Struct row2 = null;
                    		  	 
							

								while ((tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) || forceLooprow2) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row2'
									
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								
								if(!forceLooprow2) { // G 46
								
							
								 
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow2 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

outputUsers = null;


// # Output table : 'outputUsers'
outputUsers_tmp.usr_id = row1.ent_id ;
outputUsers_tmp.crt_etl_id = row2.etl_id ;
outputUsers_tmp.upd_etl_id = null;
outputUsers_tmp.crt_utc = row1.crt_utc;
outputUsers_tmp.upd_utc = row1.upd_utc;
outputUsers_tmp.obslt_utc = row1.obslt_utc;
outputUsers_tmp.psn_id = row1.ent_id ;
outputUsers_tmp.usr_name = row1.usr_name;
outputUsers_tmp.last_lgn_utc = row1.last_login_utc ;
outputUsers_tmp.email = row1.email;
outputUsers_tmp.lockout = row1.locked ;
outputUsers_tmp.fac_id = row1.loc_id ;
outputUsers = outputUsers_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "outputUsers"
if(outputUsers != null) { 



	
	/**
	 * [tPostgresqlOutput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

			//outputUsers
			//outputUsers


			
				if(execStat){
					runStat.updateStatOnConnection("outputUsers"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_3 = false;
                    if(outputUsers.usr_id == null) {
pstmt_tPostgresqlOutput_3.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(1, outputUsers.usr_id, java.sql.Types.OTHER);
}

                    if(outputUsers.crt_etl_id == null) {
pstmt_tPostgresqlOutput_3.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(2, outputUsers.crt_etl_id, java.sql.Types.OTHER);
}

                    if(outputUsers.upd_etl_id == null) {
pstmt_tPostgresqlOutput_3.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(3, outputUsers.upd_etl_id, java.sql.Types.OTHER);
}

                    if(outputUsers.crt_utc != null) {
pstmt_tPostgresqlOutput_3.setTimestamp(4, new java.sql.Timestamp(outputUsers.crt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_3.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(outputUsers.upd_utc != null) {
pstmt_tPostgresqlOutput_3.setTimestamp(5, new java.sql.Timestamp(outputUsers.upd_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_3.setNull(5, java.sql.Types.TIMESTAMP);
}

                    if(outputUsers.obslt_utc != null) {
pstmt_tPostgresqlOutput_3.setTimestamp(6, new java.sql.Timestamp(outputUsers.obslt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_3.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(outputUsers.psn_id == null) {
pstmt_tPostgresqlOutput_3.setNull(7, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(7, outputUsers.psn_id, java.sql.Types.OTHER);
}

                    if(outputUsers.usr_name == null) {
pstmt_tPostgresqlOutput_3.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_3.setString(8, outputUsers.usr_name);
}

                    if(outputUsers.last_lgn_utc != null) {
pstmt_tPostgresqlOutput_3.setTimestamp(9, new java.sql.Timestamp(outputUsers.last_lgn_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_3.setNull(9, java.sql.Types.TIMESTAMP);
}

                    if(outputUsers.email == null) {
pstmt_tPostgresqlOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_3.setString(10, outputUsers.email);
}

                    if(outputUsers.lockout != null) {
pstmt_tPostgresqlOutput_3.setTimestamp(11, new java.sql.Timestamp(outputUsers.lockout.getTime()));
} else {
pstmt_tPostgresqlOutput_3.setNull(11, java.sql.Types.TIMESTAMP);
}

                    if(outputUsers.fac_id == null) {
pstmt_tPostgresqlOutput_3.setNull(12, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(12, outputUsers.fac_id, java.sql.Types.OTHER);
}

			
    		pstmt_tPostgresqlOutput_3.addBatch();
    		nb_line_tPostgresqlOutput_3++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_3++;
    		  
            if(!whetherReject_tPostgresqlOutput_3) {
            }
    			if ((batchSize_tPostgresqlOutput_3 > 0) && (batchSize_tPostgresqlOutput_3 <= batchSizeCounter_tPostgresqlOutput_3)) {
                try {
						int countSum_tPostgresqlOutput_3 = 0;
						    
						for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
				    	
				    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_3){
				    	java.sql.SQLException ne_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getNextException(),sqle_tPostgresqlOutput_3=null;
				    	String errormessage_tPostgresqlOutput_3;
						if (ne_tPostgresqlOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_3 = new java.sql.SQLException(e_tPostgresqlOutput_3.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_3.getMessage(), ne_tPostgresqlOutput_3.getSQLState(), ne_tPostgresqlOutput_3.getErrorCode(), ne_tPostgresqlOutput_3);
							errormessage_tPostgresqlOutput_3 = sqle_tPostgresqlOutput_3.getMessage();
						}else{
							errormessage_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_3 = 0;
						for(int countEach_tPostgresqlOutput_3: e_tPostgresqlOutput_3.getUpdateCounts()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
						
				    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_3++;

/**
 * [tPostgresqlOutput_3 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

 



/**
 * [tPostgresqlOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

 



/**
 * [tPostgresqlOutput_3 process_data_end ] stop
 */

} // End of branch "outputUsers"



	
		} // close loop of lookup 'row2' // G_TM_M_043
	
	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	if (rs_tPostgresqlInput_1 != null) {
		rs_tPostgresqlInput_1.close();
	}
	if (stmt_tPostgresqlInput_1 != null) {
		stmt_tPostgresqlInput_1.close();
	}
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



	    try {
				int countSum_tPostgresqlOutput_3 = 0;
				if (pstmt_tPostgresqlOutput_3 != null && batchSizeCounter_tPostgresqlOutput_3 > 0) {
						
					for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
						countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_3){
	    	java.sql.SQLException ne_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getNextException(),sqle_tPostgresqlOutput_3=null;
	    	String errormessage_tPostgresqlOutput_3;
			if (ne_tPostgresqlOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_3 = new java.sql.SQLException(e_tPostgresqlOutput_3.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_3.getMessage(), ne_tPostgresqlOutput_3.getSQLState(), ne_tPostgresqlOutput_3.getErrorCode(), ne_tPostgresqlOutput_3);
				errormessage_tPostgresqlOutput_3 = sqle_tPostgresqlOutput_3.getMessage();
			}else{
				errormessage_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_3 = 0;
			for(int countEach_tPostgresqlOutput_3: e_tPostgresqlOutput_3.getUpdateCounts()) {
				countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
			}
			
	    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_3);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_3 != null) {
        		
            pstmt_tPostgresqlOutput_3.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_3");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_3", true);

	nb_line_deleted_tPostgresqlOutput_3=nb_line_deleted_tPostgresqlOutput_3+ deletedCount_tPostgresqlOutput_3;
	nb_line_update_tPostgresqlOutput_3=nb_line_update_tPostgresqlOutput_3 + updatedCount_tPostgresqlOutput_3;
	nb_line_inserted_tPostgresqlOutput_3=nb_line_inserted_tPostgresqlOutput_3 + insertedCount_tPostgresqlOutput_3;
	nb_line_rejected_tPostgresqlOutput_3=nb_line_rejected_tPostgresqlOutput_3 + rejectedCount_tPostgresqlOutput_3;
	
        globalMap.put("tPostgresqlOutput_3_NB_LINE",nb_line_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_3);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputUsers"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_3", true);
end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tPostgresqlInput_2Process(globalMap);



/**
 * [tPostgresqlOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_3 = null;
                if ((pstmtToClose_tPostgresqlOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_3")) != null) {
                    pstmtToClose_tPostgresqlOutput_3.close();
                }
    }
 



/**
 * [tPostgresqlOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class outputProvidersStruct implements routines.system.IPersistableRow<outputProvidersStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Users = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Users = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object pvd_id;

				public Object getPvd_id () {
					return this.pvd_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object psn_id;

				public Object getPsn_id () {
					return this.psn_id;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public String specialty_cs;

				public String getSpecialty_cs () {
					return this.specialty_cs;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.pvd_id == null) ? 0 : this.pvd_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputProvidersStruct other = (outputProvidersStruct) obj;
		
						if (this.pvd_id == null) {
							if (other.pvd_id != null)
								return false;
						
						} else if (!this.pvd_id.equals(other.pvd_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputProvidersStruct other) {

		other.pvd_id = this.pvd_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            other.psn_id = this.psn_id;
	            other.usr_id = this.usr_id;
	            other.specialty_cs = this.specialty_cs;
	            
	}

	public void copyKeysDataTo(outputProvidersStruct other) {

		other.pvd_id = this.pvd_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Users.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Users.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Users, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Users, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Users) {

        	try {

        		int length = 0;
		
						this.pvd_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
						this.psn_id = (Object) dis.readObject();
					
						this.usr_id = (Object) dis.readObject();
					
					this.specialty_cs = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.pvd_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.psn_id);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// String
				
						writeString(this.specialty_cs,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("pvd_id="+String.valueOf(pvd_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",psn_id="+String.valueOf(psn_id));
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",specialty_cs="+specialty_cs);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputProvidersStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.pvd_id, other.pvd_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Users = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Users = new byte[0];

	
			    public Object ent_vrsn_id;

				public Object getEnt_vrsn_id () {
					return this.ent_vrsn_id;
				}
				
			    public Object cls_cd_id;

				public Object getCls_cd_id () {
					return this.cls_cd_id;
				}
				
			    public Object dtr_cd_id;

				public Object getDtr_cd_id () {
					return this.dtr_cd_id;
				}
				
			    public Object tpl_id;

				public Object getTpl_id () {
					return this.tpl_id;
				}
				
			    public BigDecimal vrsn_seq_id;

				public BigDecimal getVrsn_seq_id () {
					return this.vrsn_seq_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public Object rplc_vrsn_id;

				public Object getRplc_vrsn_id () {
					return this.rplc_vrsn_id;
				}
				
			    public Object sts_cd_id;

				public Object getSts_cd_id () {
					return this.sts_cd_id;
				}
				
			    public Object typ_cd_id;

				public Object getTyp_cd_id () {
					return this.typ_cd_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public Object crt_usr_id;

				public Object getCrt_usr_id () {
					return this.crt_usr_id;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object obslt_usr_id;

				public Object getObslt_usr_id () {
					return this.obslt_usr_id;
				}
				
			    public String sts_cs;

				public String getSts_cs () {
					return this.sts_cs;
				}
				
			    public java.util.Date dob;

				public java.util.Date getDob () {
					return this.dob;
				}
				
			    public String dob_prec;

				public String getDob_prec () {
					return this.dob_prec;
				}
				
			    public Object spec_cd_id;

				public Object getSpec_cd_id () {
					return this.spec_cd_id;
				}
				
			    public String specialty_cs;

				public String getSpecialty_cs () {
					return this.specialty_cs;
				}
				
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Users.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Users.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Users, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Users, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Users) {

        	try {

        		int length = 0;
		
						this.ent_vrsn_id = (Object) dis.readObject();
					
						this.cls_cd_id = (Object) dis.readObject();
					
						this.dtr_cd_id = (Object) dis.readObject();
					
						this.tpl_id = (Object) dis.readObject();
					
						this.vrsn_seq_id = (BigDecimal) dis.readObject();
					
						this.ent_id = (Object) dis.readObject();
					
						this.rplc_vrsn_id = (Object) dis.readObject();
					
						this.sts_cd_id = (Object) dis.readObject();
					
						this.typ_cd_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
						this.crt_usr_id = (Object) dis.readObject();
					
					this.obslt_utc = readDate(dis);
					
						this.obslt_usr_id = (Object) dis.readObject();
					
					this.sts_cs = readString(dis);
					
					this.dob = readDate(dis);
					
					this.dob_prec = readString(dis);
					
						this.spec_cd_id = (Object) dis.readObject();
					
					this.specialty_cs = readString(dis);
					
						this.fac_id = (Object) dis.readObject();
					
						this.usr_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.cls_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.dtr_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.tpl_id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vrsn_seq_id);
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// Object
				
       			    	dos.writeObject(this.rplc_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.sts_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.typ_cd_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.crt_usr_id);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.obslt_usr_id);
					
					// String
				
						writeString(this.sts_cs,dos);
					
					// java.util.Date
				
						writeDate(this.dob,dos);
					
					// String
				
						writeString(this.dob_prec,dos);
					
					// Object
				
       			    	dos.writeObject(this.spec_cd_id);
					
					// String
				
						writeString(this.specialty_cs,dos);
					
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_vrsn_id="+String.valueOf(ent_vrsn_id));
		sb.append(",cls_cd_id="+String.valueOf(cls_cd_id));
		sb.append(",dtr_cd_id="+String.valueOf(dtr_cd_id));
		sb.append(",tpl_id="+String.valueOf(tpl_id));
		sb.append(",vrsn_seq_id="+String.valueOf(vrsn_seq_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",rplc_vrsn_id="+String.valueOf(rplc_vrsn_id));
		sb.append(",sts_cd_id="+String.valueOf(sts_cd_id));
		sb.append(",typ_cd_id="+String.valueOf(typ_cd_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",crt_usr_id="+String.valueOf(crt_usr_id));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",obslt_usr_id="+String.valueOf(obslt_usr_id));
		sb.append(",sts_cs="+sts_cs);
		sb.append(",dob="+String.valueOf(dob));
		sb.append(",dob_prec="+dob_prec);
		sb.append(",spec_cd_id="+String.valueOf(spec_cd_id));
		sb.append(",specialty_cs="+specialty_cs);
		sb.append(",fac_id="+String.valueOf(fac_id));
		sb.append(",usr_id="+String.valueOf(usr_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_2Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_2Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Users = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Users = new byte[0];

	
			    public Object ent_vrsn_id;

				public Object getEnt_vrsn_id () {
					return this.ent_vrsn_id;
				}
				
			    public Object cls_cd_id;

				public Object getCls_cd_id () {
					return this.cls_cd_id;
				}
				
			    public Object dtr_cd_id;

				public Object getDtr_cd_id () {
					return this.dtr_cd_id;
				}
				
			    public Object tpl_id;

				public Object getTpl_id () {
					return this.tpl_id;
				}
				
			    public BigDecimal vrsn_seq_id;

				public BigDecimal getVrsn_seq_id () {
					return this.vrsn_seq_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public Object rplc_vrsn_id;

				public Object getRplc_vrsn_id () {
					return this.rplc_vrsn_id;
				}
				
			    public Object sts_cd_id;

				public Object getSts_cd_id () {
					return this.sts_cd_id;
				}
				
			    public Object typ_cd_id;

				public Object getTyp_cd_id () {
					return this.typ_cd_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public Object crt_usr_id;

				public Object getCrt_usr_id () {
					return this.crt_usr_id;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object obslt_usr_id;

				public Object getObslt_usr_id () {
					return this.obslt_usr_id;
				}
				
			    public String sts_cs;

				public String getSts_cs () {
					return this.sts_cs;
				}
				
			    public java.util.Date dob;

				public java.util.Date getDob () {
					return this.dob;
				}
				
			    public String dob_prec;

				public String getDob_prec () {
					return this.dob_prec;
				}
				
			    public Object spec_cd_id;

				public Object getSpec_cd_id () {
					return this.spec_cd_id;
				}
				
			    public String specialty_cs;

				public String getSpecialty_cs () {
					return this.specialty_cs;
				}
				
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Users.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Users.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Users, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Users, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Users) {

        	try {

        		int length = 0;
		
						this.ent_vrsn_id = (Object) dis.readObject();
					
						this.cls_cd_id = (Object) dis.readObject();
					
						this.dtr_cd_id = (Object) dis.readObject();
					
						this.tpl_id = (Object) dis.readObject();
					
						this.vrsn_seq_id = (BigDecimal) dis.readObject();
					
						this.ent_id = (Object) dis.readObject();
					
						this.rplc_vrsn_id = (Object) dis.readObject();
					
						this.sts_cd_id = (Object) dis.readObject();
					
						this.typ_cd_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
						this.crt_usr_id = (Object) dis.readObject();
					
					this.obslt_utc = readDate(dis);
					
						this.obslt_usr_id = (Object) dis.readObject();
					
					this.sts_cs = readString(dis);
					
					this.dob = readDate(dis);
					
					this.dob_prec = readString(dis);
					
						this.spec_cd_id = (Object) dis.readObject();
					
					this.specialty_cs = readString(dis);
					
						this.fac_id = (Object) dis.readObject();
					
						this.usr_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.cls_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.dtr_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.tpl_id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vrsn_seq_id);
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// Object
				
       			    	dos.writeObject(this.rplc_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.sts_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.typ_cd_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.crt_usr_id);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.obslt_usr_id);
					
					// String
				
						writeString(this.sts_cs,dos);
					
					// java.util.Date
				
						writeDate(this.dob,dos);
					
					// String
				
						writeString(this.dob_prec,dos);
					
					// Object
				
       			    	dos.writeObject(this.spec_cd_id);
					
					// String
				
						writeString(this.specialty_cs,dos);
					
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_vrsn_id="+String.valueOf(ent_vrsn_id));
		sb.append(",cls_cd_id="+String.valueOf(cls_cd_id));
		sb.append(",dtr_cd_id="+String.valueOf(dtr_cd_id));
		sb.append(",tpl_id="+String.valueOf(tpl_id));
		sb.append(",vrsn_seq_id="+String.valueOf(vrsn_seq_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",rplc_vrsn_id="+String.valueOf(rplc_vrsn_id));
		sb.append(",sts_cd_id="+String.valueOf(sts_cd_id));
		sb.append(",typ_cd_id="+String.valueOf(typ_cd_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",crt_usr_id="+String.valueOf(crt_usr_id));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",obslt_usr_id="+String.valueOf(obslt_usr_id));
		sb.append(",sts_cs="+sts_cs);
		sb.append(",dob="+String.valueOf(dob));
		sb.append(",dob_prec="+dob_prec);
		sb.append(",spec_cd_id="+String.valueOf(spec_cd_id));
		sb.append(",specialty_cs="+specialty_cs);
		sb.append(",fac_id="+String.valueOf(fac_id));
		sb.append(",usr_id="+String.valueOf(usr_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_9Process(globalMap);

		row3Struct row3 = new row3Struct();
outputProvidersStruct outputProviders = new outputProvidersStruct();





	
	/**
	 * [tPostgresqlOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_4", false);
		start_Hash.put("tPostgresqlOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputProviders" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_4 = 0;
		





String dbschema_tPostgresqlOutput_4 = null;
	dbschema_tPostgresqlOutput_4 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_4 = null;
if(dbschema_tPostgresqlOutput_4 == null || dbschema_tPostgresqlOutput_4.trim().length() == 0) {
	tableName_tPostgresqlOutput_4 = "pvd_tbl";
} else {
	tableName_tPostgresqlOutput_4 = dbschema_tPostgresqlOutput_4 + "\".\"" + "pvd_tbl";
}

int nb_line_tPostgresqlOutput_4 = 0;
int nb_line_update_tPostgresqlOutput_4 = 0;
int nb_line_inserted_tPostgresqlOutput_4 = 0;
int nb_line_deleted_tPostgresqlOutput_4 = 0;
int nb_line_rejected_tPostgresqlOutput_4 = 0;

int deletedCount_tPostgresqlOutput_4=0;
int updatedCount_tPostgresqlOutput_4=0;
int insertedCount_tPostgresqlOutput_4=0;
int rejectedCount_tPostgresqlOutput_4=0;

boolean whetherReject_tPostgresqlOutput_4 = false;

java.sql.Connection conn_tPostgresqlOutput_4 = null;
String dbUser_tPostgresqlOutput_4 = null;

	conn_tPostgresqlOutput_4 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_4 = 10000;
   int batchSizeCounter_tPostgresqlOutput_4=0;

int count_tPostgresqlOutput_4=0;
	    String insert_tPostgresqlOutput_4 = "INSERT INTO \"" + tableName_tPostgresqlOutput_4 + "\" (\"pvd_id\",\"crt_etl_id\",\"upd_etl_id\",\"crt_utc\",\"upd_utc\",\"obslt_utc\",\"psn_id\",\"usr_id\",\"specialty_cs\") VALUES (?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4.prepareStatement(insert_tPostgresqlOutput_4);
	    resourceMap.put("pstmt_tPostgresqlOutput_4", pstmt_tPostgresqlOutput_4);
	    

 



/**
 * [tPostgresqlOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	
		tHash_Lookup_row4.initGet();
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputProvidersStruct outputProviders_tmp = new outputProvidersStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
		        conn_tPostgresqlInput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "select pvdr_cur_vrsn_vw.* , mnemonic as specialty_cs, loc_id.trg_ent_id as fac_id, pvd_id.src_ent_id as usr_id\nfrom \n"
+"	pvdr_cur_vrsn_vw left join cd_cur_vrsn_vw on (spec_cd_id = cd_id)\n	left join ent_rel_tbl loc_id on (loc_id.src_ent_id "
+"= ent_id and typ_cd_id = '455F1772-F580-47E8-86BD-B5CE25D351F9' and loc_id.obslt_vrsn_seq_id is null)\n	left join ent_re"
+"l_tbl pvd_id on (pvd_id.trg_ent_id = pvdr_cur_vrsn_vw.ent_id and typ_cd_id = '77B7A04B-C065-4FAF-8EC0-2CDAD4AE372B' and "
+"pvd_id.obslt_vrsn_seq_id is null)\n";
			

            	globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);
		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;

		    try {
		    	rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								row3.ent_vrsn_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(1) != null) {
                row3.ent_vrsn_id = rs_tPostgresqlInput_2.getObject(1);
            } else {
                    row3.ent_vrsn_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 2) {
								row3.cls_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(2) != null) {
                row3.cls_cd_id = rs_tPostgresqlInput_2.getObject(2);
            } else {
                    row3.cls_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 3) {
								row3.dtr_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(3) != null) {
                row3.dtr_cd_id = rs_tPostgresqlInput_2.getObject(3);
            } else {
                    row3.dtr_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 4) {
								row3.tpl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(4) != null) {
                row3.tpl_id = rs_tPostgresqlInput_2.getObject(4);
            } else {
                    row3.tpl_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 5) {
								row3.vrsn_seq_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(5) != null) {
                row3.vrsn_seq_id = rs_tPostgresqlInput_2.getBigDecimal(5);
            } else {
                    row3.vrsn_seq_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 6) {
								row3.ent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(6) != null) {
                row3.ent_id = rs_tPostgresqlInput_2.getObject(6);
            } else {
                    row3.ent_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 7) {
								row3.rplc_vrsn_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(7) != null) {
                row3.rplc_vrsn_id = rs_tPostgresqlInput_2.getObject(7);
            } else {
                    row3.rplc_vrsn_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 8) {
								row3.sts_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(8) != null) {
                row3.sts_cd_id = rs_tPostgresqlInput_2.getObject(8);
            } else {
                    row3.sts_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 9) {
								row3.typ_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(9) != null) {
                row3.typ_cd_id = rs_tPostgresqlInput_2.getObject(9);
            } else {
                    row3.typ_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 10) {
								row3.crt_utc = null;
							} else {
										
			row3.crt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 10);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 11) {
								row3.crt_usr_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(11) != null) {
                row3.crt_usr_id = rs_tPostgresqlInput_2.getObject(11);
            } else {
                    row3.crt_usr_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 12) {
								row3.obslt_utc = null;
							} else {
										
			row3.obslt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 12);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 13) {
								row3.obslt_usr_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(13) != null) {
                row3.obslt_usr_id = rs_tPostgresqlInput_2.getObject(13);
            } else {
                    row3.obslt_usr_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 14) {
								row3.sts_cs = null;
							} else {
	                         		
        	row3.sts_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 14, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 15) {
								row3.dob = null;
							} else {
										
			row3.dob = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 15);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 16) {
								row3.dob_prec = null;
							} else {
	                         		
        	row3.dob_prec = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 16, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 17) {
								row3.spec_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(17) != null) {
                row3.spec_cd_id = rs_tPostgresqlInput_2.getObject(17);
            } else {
                    row3.spec_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 18) {
								row3.specialty_cs = null;
							} else {
	                         		
        	row3.specialty_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 18, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 19) {
								row3.fac_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(19) != null) {
                row3.fac_id = rs_tPostgresqlInput_2.getObject(19);
            } else {
                    row3.fac_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 20) {
								row3.usr_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(20) != null) {
                row3.usr_id = rs_tPostgresqlInput_2.getObject(20);
            } else {
                    row3.usr_id = null;
            }
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow4 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow4 = true;
			           		  	} // G 21
                    		  	
                    		

							row4Struct row4 = null;
                    		  	 
							

								while ((tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) || forceLooprow4) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row4'
									
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								
								if(!forceLooprow4) { // G 46
								
							
								 
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow4 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

outputProviders = null;


// # Output table : 'outputProviders'
outputProviders_tmp.pvd_id = row3.ent_id ;
outputProviders_tmp.crt_etl_id = row4.etl_id ;
outputProviders_tmp.upd_etl_id = null;
outputProviders_tmp.crt_utc = row3.crt_utc;
outputProviders_tmp.upd_utc = null;
outputProviders_tmp.obslt_utc = row3.obslt_utc;
outputProviders_tmp.psn_id = row3.ent_id ;
outputProviders_tmp.usr_id = row3.usr_id;
outputProviders_tmp.specialty_cs = row3.specialty_cs;
outputProviders = outputProviders_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "outputProviders"
if(outputProviders != null) { 



	
	/**
	 * [tPostgresqlOutput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	

			//outputProviders
			//outputProviders


			
				if(execStat){
					runStat.updateStatOnConnection("outputProviders"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_4 = false;
                    if(outputProviders.pvd_id == null) {
pstmt_tPostgresqlOutput_4.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(1, outputProviders.pvd_id, java.sql.Types.OTHER);
}

                    if(outputProviders.crt_etl_id == null) {
pstmt_tPostgresqlOutput_4.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(2, outputProviders.crt_etl_id, java.sql.Types.OTHER);
}

                    if(outputProviders.upd_etl_id == null) {
pstmt_tPostgresqlOutput_4.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(3, outputProviders.upd_etl_id, java.sql.Types.OTHER);
}

                    if(outputProviders.crt_utc != null) {
pstmt_tPostgresqlOutput_4.setTimestamp(4, new java.sql.Timestamp(outputProviders.crt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_4.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(outputProviders.upd_utc != null) {
pstmt_tPostgresqlOutput_4.setTimestamp(5, new java.sql.Timestamp(outputProviders.upd_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_4.setNull(5, java.sql.Types.TIMESTAMP);
}

                    if(outputProviders.obslt_utc != null) {
pstmt_tPostgresqlOutput_4.setTimestamp(6, new java.sql.Timestamp(outputProviders.obslt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_4.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(outputProviders.psn_id == null) {
pstmt_tPostgresqlOutput_4.setNull(7, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(7, outputProviders.psn_id, java.sql.Types.OTHER);
}

                    if(outputProviders.usr_id == null) {
pstmt_tPostgresqlOutput_4.setNull(8, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(8, outputProviders.usr_id, java.sql.Types.OTHER);
}

                    if(outputProviders.specialty_cs == null) {
pstmt_tPostgresqlOutput_4.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_4.setString(9, outputProviders.specialty_cs);
}

			
    		pstmt_tPostgresqlOutput_4.addBatch();
    		nb_line_tPostgresqlOutput_4++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_4++;
    		  
            if(!whetherReject_tPostgresqlOutput_4) {
            }
    			if ((batchSize_tPostgresqlOutput_4 > 0) && (batchSize_tPostgresqlOutput_4 <= batchSizeCounter_tPostgresqlOutput_4)) {
                try {
						int countSum_tPostgresqlOutput_4 = 0;
						    
						for(int countEach_tPostgresqlOutput_4: pstmt_tPostgresqlOutput_4.executeBatch()) {
							countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
						}
				    	
				    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_4){
				    	java.sql.SQLException ne_tPostgresqlOutput_4 = e_tPostgresqlOutput_4.getNextException(),sqle_tPostgresqlOutput_4=null;
				    	String errormessage_tPostgresqlOutput_4;
						if (ne_tPostgresqlOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_4 = new java.sql.SQLException(e_tPostgresqlOutput_4.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_4.getMessage(), ne_tPostgresqlOutput_4.getSQLState(), ne_tPostgresqlOutput_4.getErrorCode(), ne_tPostgresqlOutput_4);
							errormessage_tPostgresqlOutput_4 = sqle_tPostgresqlOutput_4.getMessage();
						}else{
							errormessage_tPostgresqlOutput_4 = e_tPostgresqlOutput_4.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_4 = 0;
						for(int countEach_tPostgresqlOutput_4: e_tPostgresqlOutput_4.getUpdateCounts()) {
							countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
						}
						
				    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_4);
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_4++;

/**
 * [tPostgresqlOutput_4 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	

 



/**
 * [tPostgresqlOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	

 



/**
 * [tPostgresqlOutput_4 process_data_end ] stop
 */

} // End of branch "outputProviders"



	
		} // close loop of lookup 'row4' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	if (rs_tPostgresqlInput_2 != null) {
		rs_tPostgresqlInput_2.close();
	}
	if (stmt_tPostgresqlInput_2 != null) {
		stmt_tPostgresqlInput_2.close();
	}
}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	



	    try {
				int countSum_tPostgresqlOutput_4 = 0;
				if (pstmt_tPostgresqlOutput_4 != null && batchSizeCounter_tPostgresqlOutput_4 > 0) {
						
					for(int countEach_tPostgresqlOutput_4: pstmt_tPostgresqlOutput_4.executeBatch()) {
						countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_4){
	    	java.sql.SQLException ne_tPostgresqlOutput_4 = e_tPostgresqlOutput_4.getNextException(),sqle_tPostgresqlOutput_4=null;
	    	String errormessage_tPostgresqlOutput_4;
			if (ne_tPostgresqlOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_4 = new java.sql.SQLException(e_tPostgresqlOutput_4.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_4.getMessage(), ne_tPostgresqlOutput_4.getSQLState(), ne_tPostgresqlOutput_4.getErrorCode(), ne_tPostgresqlOutput_4);
				errormessage_tPostgresqlOutput_4 = sqle_tPostgresqlOutput_4.getMessage();
			}else{
				errormessage_tPostgresqlOutput_4 = e_tPostgresqlOutput_4.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_4 = 0;
			for(int countEach_tPostgresqlOutput_4: e_tPostgresqlOutput_4.getUpdateCounts()) {
				countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
			}
			
	    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_4);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_4 != null) {
        		
            pstmt_tPostgresqlOutput_4.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_4");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_4", true);

	nb_line_deleted_tPostgresqlOutput_4=nb_line_deleted_tPostgresqlOutput_4+ deletedCount_tPostgresqlOutput_4;
	nb_line_update_tPostgresqlOutput_4=nb_line_update_tPostgresqlOutput_4 + updatedCount_tPostgresqlOutput_4;
	nb_line_inserted_tPostgresqlOutput_4=nb_line_inserted_tPostgresqlOutput_4 + insertedCount_tPostgresqlOutput_4;
	nb_line_rejected_tPostgresqlOutput_4=nb_line_rejected_tPostgresqlOutput_4 + rejectedCount_tPostgresqlOutput_4;
	
        globalMap.put("tPostgresqlOutput_4_NB_LINE",nb_line_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_4);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputProviders"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_4", true);
end_Hash.put("tPostgresqlOutput_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tPostgresqlInput_12Process(globalMap);



/**
 * [tPostgresqlOutput_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
				try{
					
	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_4 = null;
                if ((pstmtToClose_tPostgresqlOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_4")) != null) {
                    pstmtToClose_tPostgresqlOutput_4.close();
                }
    }
 



/**
 * [tPostgresqlOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class outputSessionsStruct implements routines.system.IPersistableRow<outputSessionsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Users = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Users = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object ses_id;

				public Object getSes_id () {
					return this.ses_id;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public java.util.Date ses_utc;

				public java.util.Date getSes_utc () {
					return this.ses_utc;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ses_id == null) ? 0 : this.ses_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputSessionsStruct other = (outputSessionsStruct) obj;
		
						if (this.ses_id == null) {
							if (other.ses_id != null)
								return false;
						
						} else if (!this.ses_id.equals(other.ses_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputSessionsStruct other) {

		other.ses_id = this.ses_id;
	            other.usr_id = this.usr_id;
	            other.ses_utc = this.ses_utc;
	            other.crt_etl_id = this.crt_etl_id;
	            other.crt_utc = this.crt_utc;
	            
	}

	public void copyKeysDataTo(outputSessionsStruct other) {

		other.ses_id = this.ses_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Users) {

        	try {

        		int length = 0;
		
						this.ses_id = (Object) dis.readObject();
					
						this.usr_id = (Object) dis.readObject();
					
					this.ses_utc = readDate(dis);
					
						this.crt_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ses_id);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// java.util.Date
				
						writeDate(this.ses_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ses_id="+String.valueOf(ses_id));
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",ses_utc="+String.valueOf(ses_utc));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputSessionsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ses_id, other.ses_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Users = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Users = new byte[0];

	
			    public java.util.Date evt_utc;

				public java.util.Date getEvt_utc () {
					return this.evt_utc;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public String mnemonic;

				public String getMnemonic () {
					return this.mnemonic;
				}
				
			    public String usr_name;

				public String getUsr_name () {
					return this.usr_name;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Users.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Users.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Users, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Users, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Users) {

        	try {

        		int length = 0;
		
					this.evt_utc = readDate(dis);
					
					this.crt_utc = readDate(dis);
					
					this.mnemonic = readString(dis);
					
					this.usr_name = readString(dis);
					
						this.usr_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.evt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// String
				
						writeString(this.mnemonic,dos);
					
					// String
				
						writeString(this.usr_name,dos);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("evt_utc="+String.valueOf(evt_utc));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",mnemonic="+mnemonic);
		sb.append(",usr_name="+usr_name);
		sb.append(",usr_id="+String.valueOf(usr_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Users = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Users = new byte[0];

	
			    public java.util.Date evt_utc;

				public java.util.Date getEvt_utc () {
					return this.evt_utc;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public String mnemonic;

				public String getMnemonic () {
					return this.mnemonic;
				}
				
			    public String usr_name;

				public String getUsr_name () {
					return this.usr_name;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Users.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Users.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Users, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Users, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Users) {

        	try {

        		int length = 0;
		
					this.evt_utc = readDate(dis);
					
					this.crt_utc = readDate(dis);
					
					this.mnemonic = readString(dis);
					
					this.usr_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.evt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// String
				
						writeString(this.mnemonic,dos);
					
					// String
				
						writeString(this.usr_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("evt_utc="+String.valueOf(evt_utc));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",mnemonic="+mnemonic);
		sb.append(",usr_name="+usr_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_12Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_12Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Users = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Users = new byte[0];

	
			    public java.util.Date evt_utc;

				public java.util.Date getEvt_utc () {
					return this.evt_utc;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public String mnemonic;

				public String getMnemonic () {
					return this.mnemonic;
				}
				
			    public String usr_name;

				public String getUsr_name () {
					return this.usr_name;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Users.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Users.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Users, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Users, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Users) {

        	try {

        		int length = 0;
		
					this.evt_utc = readDate(dis);
					
					this.crt_utc = readDate(dis);
					
					this.mnemonic = readString(dis);
					
					this.usr_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.evt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// String
				
						writeString(this.mnemonic,dos);
					
					// String
				
						writeString(this.usr_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("evt_utc="+String.valueOf(evt_utc));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",mnemonic="+mnemonic);
		sb.append(",usr_name="+usr_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_10Process(globalMap);
		tPostgresqlInput_11Process(globalMap);

		row5Struct row5 = new row5Struct();
row10Struct row10 = new row10Struct();
outputSessionsStruct outputSessions = new outputSessionsStruct();






	
	/**
	 * [tPostgresqlOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_5", false);
		start_Hash.put("tPostgresqlOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputSessions" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_5 = 0;
		





String dbschema_tPostgresqlOutput_5 = null;
	dbschema_tPostgresqlOutput_5 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_5 = null;
if(dbschema_tPostgresqlOutput_5 == null || dbschema_tPostgresqlOutput_5.trim().length() == 0) {
	tableName_tPostgresqlOutput_5 = "usr_ses_tbl";
} else {
	tableName_tPostgresqlOutput_5 = dbschema_tPostgresqlOutput_5 + "\".\"" + "usr_ses_tbl";
}

int nb_line_tPostgresqlOutput_5 = 0;
int nb_line_update_tPostgresqlOutput_5 = 0;
int nb_line_inserted_tPostgresqlOutput_5 = 0;
int nb_line_deleted_tPostgresqlOutput_5 = 0;
int nb_line_rejected_tPostgresqlOutput_5 = 0;

int deletedCount_tPostgresqlOutput_5=0;
int updatedCount_tPostgresqlOutput_5=0;
int insertedCount_tPostgresqlOutput_5=0;
int rejectedCount_tPostgresqlOutput_5=0;

boolean whetherReject_tPostgresqlOutput_5 = false;

java.sql.Connection conn_tPostgresqlOutput_5 = null;
String dbUser_tPostgresqlOutput_5 = null;

	conn_tPostgresqlOutput_5 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_5 = 10000;
   int batchSizeCounter_tPostgresqlOutput_5=0;

int count_tPostgresqlOutput_5=0;
            int rsTruncCountNumber_tPostgresqlOutput_5 = 0;
            try(java.sql.Statement stmtTruncCount_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tPostgresqlOutput_5 = stmtTruncCount_tPostgresqlOutput_5.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tPostgresqlOutput_5 + "\"")) {
                    if(rsTruncCount_tPostgresqlOutput_5.next()) {
                        rsTruncCountNumber_tPostgresqlOutput_5 = rsTruncCount_tPostgresqlOutput_5.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5.createStatement()) {
                stmtTrunc_tPostgresqlOutput_5.executeUpdate("TRUNCATE TABLE \"" + tableName_tPostgresqlOutput_5 + "\"");
                deletedCount_tPostgresqlOutput_5 += rsTruncCountNumber_tPostgresqlOutput_5;
            }
	    String insert_tPostgresqlOutput_5 = "INSERT INTO \"" + tableName_tPostgresqlOutput_5 + "\" (\"ses_id\",\"usr_id\",\"ses_utc\",\"crt_etl_id\",\"crt_utc\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5.prepareStatement(insert_tPostgresqlOutput_5);
	    resourceMap.put("pstmt_tPostgresqlOutput_5", pstmt_tPostgresqlOutput_5);
	    

 



/**
 * [tPostgresqlOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	
		tHash_Lookup_row9.initGet();
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputSessionsStruct outputSessions_tmp = new outputSessionsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tJoin_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJoin_2", false);
		start_Hash.put("tJoin_2", System.currentTimeMillis());
		
	
	currentComponent="tJoin_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJoin_2 = 0;
		
    final java.util.Map<row6Struct, row6Struct> tHash_tJoin_2 = (java.util.Map<row6Struct, row6Struct>) globalMap.get("tHash_row6");
    
    class Util_tJoin_2
    {
        row6Struct lookupValue = null;
        row6Struct row6HashKey = new row6Struct(); 
        
        public boolean isJoined(row5Struct mainRow) {                        
           row6HashKey.usr_name = mainRow.usr_name;

			row6HashKey.hashCodeDirty = true;			             
            lookupValue = tHash_tJoin_2.get(row6HashKey);            
            if(lookupValue != null){
            	return true;
            }else{
            }  
            return false;
        }
    }
        
	Util_tJoin_2 util_tJoin_2 = new Util_tJoin_2();
        
    int nb_line_tJoin_2 = 0; 
 



/**
 * [tJoin_2 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_12", false);
		start_Hash.put("tPostgresqlInput_12", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_12";

	
		int tos_count_tPostgresqlInput_12 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_12 = 0;
		    java.sql.Connection conn_tPostgresqlInput_12 = null;
		        conn_tPostgresqlInput_12 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_3");
		    
			java.sql.Statement stmt_tPostgresqlInput_12 = conn_tPostgresqlInput_12.createStatement();

		    String dbquery_tPostgresqlInput_12 = "select evt_utc, crt_utc, mnemonic, lower(usr_name) as usr_name\nfrom \n	aud_tbl \n	inner join aud_act_assoc_tbl on (aud"
+"_tbl.id = aud_act_assoc_tbl.aud_id)\n	inner join aud_act_tbl on (aud_act_tbl.id = aud_act_assoc_tbl.act_id)\n	inner join"
+" aud_cd_tbl on (aud_cd_tbl.id = aud_tbl.cls_cd_id and is_rqo)\nwhere\n	aud_cd_tbl.mnemonic = 'SecurityAuditCode-Login'\n"
+"	and outc_cs = 0\nand usr_name is not null;\n\n\n";
			

            	globalMap.put("tPostgresqlInput_12_QUERY",dbquery_tPostgresqlInput_12);
		    java.sql.ResultSet rs_tPostgresqlInput_12 = null;

		    try {
		    	rs_tPostgresqlInput_12 = stmt_tPostgresqlInput_12.executeQuery(dbquery_tPostgresqlInput_12);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_12 = rs_tPostgresqlInput_12.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_12 = rsmd_tPostgresqlInput_12.getColumnCount();

		    String tmpContent_tPostgresqlInput_12 = null;
		    
		    
		    while (rs_tPostgresqlInput_12.next()) {
		        nb_line_tPostgresqlInput_12++;
		        
							if(colQtyInRs_tPostgresqlInput_12 < 1) {
								row5.evt_utc = null;
							} else {
										
			row5.evt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_12, 1);
		                    }
							if(colQtyInRs_tPostgresqlInput_12 < 2) {
								row5.crt_utc = null;
							} else {
										
			row5.crt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_12, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_12 < 3) {
								row5.mnemonic = null;
							} else {
	                         		
        	row5.mnemonic = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_12, 3, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_12 < 4) {
								row5.usr_name = null;
							} else {
	                         		
        	row5.usr_name = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_12, 4, false);
		                    }
					


 



/**
 * [tPostgresqlInput_12 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_12 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

 


	tos_count_tPostgresqlInput_12++;

/**
 * [tPostgresqlInput_12 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

 



/**
 * [tPostgresqlInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tJoin_2 main ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

			row10 = null;	
	
				row10 = new row10Struct();						
						row10.evt_utc = row5.evt_utc;					
						row10.crt_utc = row5.crt_utc;					
						row10.mnemonic = row5.mnemonic;					
						row10.usr_name = row5.usr_name;

			if(util_tJoin_2.isJoined(row5)){ 			
								row10.usr_id = util_tJoin_2.lookupValue.usr_id;
			} 
		
				else{ 
						row10 = null; 
				}		
///////////////////////    			

 


	tos_count_tJoin_2++;

/**
 * [tJoin_2 main ] stop
 */
	
	/**
	 * [tJoin_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

 



/**
 * [tJoin_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row9.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow9 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow9 = true;
			           		  	} // G 21
                    		  	
                    		

							row9Struct row9 = null;
                    		  	 
							

								while ((tHash_Lookup_row9 != null && tHash_Lookup_row9.hasNext()) || forceLooprow9) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row9'
									
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								
								if(!forceLooprow9) { // G 46
								
							
								 
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow9 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

outputSessions = null;


// # Output table : 'outputSessions'
outputSessions_tmp.ses_id = java.util.UUID.randomUUID().toString() ;
outputSessions_tmp.usr_id = row10.usr_id ;
outputSessions_tmp.ses_utc = row10.evt_utc ;
outputSessions_tmp.crt_etl_id = row9.etl_id ;
outputSessions_tmp.crt_utc = row10.crt_utc ;
outputSessions = outputSessions_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "outputSessions"
if(outputSessions != null) { 



	
	/**
	 * [tPostgresqlOutput_5 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	

			//outputSessions
			//outputSessions


			
				if(execStat){
					runStat.updateStatOnConnection("outputSessions"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_5 = false;
                    if(outputSessions.ses_id == null) {
pstmt_tPostgresqlOutput_5.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_5.setObject(1, outputSessions.ses_id, java.sql.Types.OTHER);
}

                    if(outputSessions.usr_id == null) {
pstmt_tPostgresqlOutput_5.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_5.setObject(2, outputSessions.usr_id, java.sql.Types.OTHER);
}

                    if(outputSessions.ses_utc != null) {
pstmt_tPostgresqlOutput_5.setTimestamp(3, new java.sql.Timestamp(outputSessions.ses_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_5.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(outputSessions.crt_etl_id == null) {
pstmt_tPostgresqlOutput_5.setNull(4, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_5.setObject(4, outputSessions.crt_etl_id, java.sql.Types.OTHER);
}

                    if(outputSessions.crt_utc != null) {
pstmt_tPostgresqlOutput_5.setTimestamp(5, new java.sql.Timestamp(outputSessions.crt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_5.setNull(5, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tPostgresqlOutput_5.addBatch();
    		nb_line_tPostgresqlOutput_5++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_5++;
    		  
            if(!whetherReject_tPostgresqlOutput_5) {
            }
    			if ((batchSize_tPostgresqlOutput_5 > 0) && (batchSize_tPostgresqlOutput_5 <= batchSizeCounter_tPostgresqlOutput_5)) {
                try {
						int countSum_tPostgresqlOutput_5 = 0;
						    
						for(int countEach_tPostgresqlOutput_5: pstmt_tPostgresqlOutput_5.executeBatch()) {
							countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
						}
				    	
				    		insertedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_5){
				    	java.sql.SQLException ne_tPostgresqlOutput_5 = e_tPostgresqlOutput_5.getNextException(),sqle_tPostgresqlOutput_5=null;
				    	String errormessage_tPostgresqlOutput_5;
						if (ne_tPostgresqlOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_5 = new java.sql.SQLException(e_tPostgresqlOutput_5.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_5.getMessage(), ne_tPostgresqlOutput_5.getSQLState(), ne_tPostgresqlOutput_5.getErrorCode(), ne_tPostgresqlOutput_5);
							errormessage_tPostgresqlOutput_5 = sqle_tPostgresqlOutput_5.getMessage();
						}else{
							errormessage_tPostgresqlOutput_5 = e_tPostgresqlOutput_5.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_5 = 0;
						for(int countEach_tPostgresqlOutput_5: e_tPostgresqlOutput_5.getUpdateCounts()) {
							countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
						}
						
				    		insertedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_5);
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_5++;

/**
 * [tPostgresqlOutput_5 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	

 



/**
 * [tPostgresqlOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	

 



/**
 * [tPostgresqlOutput_5 process_data_end ] stop
 */

} // End of branch "outputSessions"



	
		} // close loop of lookup 'row9' // G_TM_M_043
	
	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tJoin_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

 



/**
 * [tJoin_2 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

 



/**
 * [tPostgresqlInput_12 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_12 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

	}
}finally{
	if (rs_tPostgresqlInput_12 != null) {
		rs_tPostgresqlInput_12.close();
	}
	if (stmt_tPostgresqlInput_12 != null) {
		stmt_tPostgresqlInput_12.close();
	}
}
globalMap.put("tPostgresqlInput_12_NB_LINE",nb_line_tPostgresqlInput_12);
 

ok_Hash.put("tPostgresqlInput_12", true);
end_Hash.put("tPostgresqlInput_12", System.currentTimeMillis());




/**
 * [tPostgresqlInput_12 end ] stop
 */

	
	/**
	 * [tJoin_2 end ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJoin_2", true);
end_Hash.put("tJoin_2", System.currentTimeMillis());




/**
 * [tJoin_2 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_5 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	



	    try {
				int countSum_tPostgresqlOutput_5 = 0;
				if (pstmt_tPostgresqlOutput_5 != null && batchSizeCounter_tPostgresqlOutput_5 > 0) {
						
					for(int countEach_tPostgresqlOutput_5: pstmt_tPostgresqlOutput_5.executeBatch()) {
						countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_5){
	    	java.sql.SQLException ne_tPostgresqlOutput_5 = e_tPostgresqlOutput_5.getNextException(),sqle_tPostgresqlOutput_5=null;
	    	String errormessage_tPostgresqlOutput_5;
			if (ne_tPostgresqlOutput_5 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_5 = new java.sql.SQLException(e_tPostgresqlOutput_5.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_5.getMessage(), ne_tPostgresqlOutput_5.getSQLState(), ne_tPostgresqlOutput_5.getErrorCode(), ne_tPostgresqlOutput_5);
				errormessage_tPostgresqlOutput_5 = sqle_tPostgresqlOutput_5.getMessage();
			}else{
				errormessage_tPostgresqlOutput_5 = e_tPostgresqlOutput_5.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_5 = 0;
			for(int countEach_tPostgresqlOutput_5: e_tPostgresqlOutput_5.getUpdateCounts()) {
				countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
			}
			
	    		insertedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_5);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_5 != null) {
        		
            pstmt_tPostgresqlOutput_5.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_5");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_5", true);

	nb_line_deleted_tPostgresqlOutput_5=nb_line_deleted_tPostgresqlOutput_5+ deletedCount_tPostgresqlOutput_5;
	nb_line_update_tPostgresqlOutput_5=nb_line_update_tPostgresqlOutput_5 + updatedCount_tPostgresqlOutput_5;
	nb_line_inserted_tPostgresqlOutput_5=nb_line_inserted_tPostgresqlOutput_5 + insertedCount_tPostgresqlOutput_5;
	nb_line_rejected_tPostgresqlOutput_5=nb_line_rejected_tPostgresqlOutput_5 + rejectedCount_tPostgresqlOutput_5;
	
        globalMap.put("tPostgresqlOutput_5_NB_LINE",nb_line_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_5);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputSessions"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_5", true);
end_Hash.put("tPostgresqlOutput_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tPostgresqlCommit_1Process(globalMap);



/**
 * [tPostgresqlOutput_5 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			      	
					      			//free memory for "tJoin_2"
									globalMap.remove("tHash_row6");
				      			
				try{
					
	
	/**
	 * [tPostgresqlInput_12 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

 



/**
 * [tPostgresqlInput_12 finally ] stop
 */

	
	/**
	 * [tJoin_2 finally ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

 



/**
 * [tJoin_2 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_5 = null;
                if ((pstmtToClose_tPostgresqlOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_5")) != null) {
                    pstmtToClose_tPostgresqlOutput_5.close();
                }
    }
 



/**
 * [tPostgresqlOutput_5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_12_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostgresqlCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlCommit_1", false);
		start_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlCommit_1";

	
		int tos_count_tPostgresqlCommit_1 = 0;
		

 



/**
 * [tPostgresqlCommit_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

	java.sql.Connection conn_tPostgresqlCommit_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	if(conn_tPostgresqlCommit_1 != null && !conn_tPostgresqlCommit_1.isClosed())
	{
	
		try{
	
			
			conn_tPostgresqlCommit_1.commit();
			
	
		}finally{
			
			conn_tPostgresqlCommit_1.close();
			
	    }
	
	}

 


	tos_count_tPostgresqlCommit_1++;

/**
 * [tPostgresqlCommit_1 main ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 

ok_Hash.put("tPostgresqlCommit_1", true);
end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());




/**
 * [tPostgresqlCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRollback_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRollback_1", false);
		start_Hash.put("tDBRollback_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRollback_1";

	
		int tos_count_tDBRollback_1 = 0;
		

 



/**
 * [tDBRollback_1 begin ] stop
 */
	
	/**
	 * [tDBRollback_1 main ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

	java.sql.Connection conn_tDBRollback_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	if(conn_tDBRollback_1 != null && !conn_tDBRollback_1.isClosed()) {
		
			try{
				
			conn_tDBRollback_1.rollback();
			
			}finally{
		    	
			conn_tDBRollback_1.close();
			
		    }
		
	}

 


	tos_count_tDBRollback_1++;

/**
 * [tDBRollback_1 main ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRollback_1 end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 

ok_Hash.put("tDBRollback_1", true);
end_Hash.put("tDBRollback_1", System.currentTimeMillis());




/**
 * [tDBRollback_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRollback_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDie_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRollback_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 1);
	}
	

public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "Error Mapping Users", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Error Mapping Users");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Error Mapping Users");
	globalMap.put("tDie_1_DIE_MESSAGES", "Error Mapping Users");
	
	} catch (Exception | Error e_tDie_1) {
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	
	System.exit(4);

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Users = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Users = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Users) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tPostgresqlInput_8 - inputs:(after_tPostgresqlInput_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_3 - inputs:(row1,row2) outputs:(outputUsers)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_8", false);
		start_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_8";

	
		int tos_count_tPostgresqlInput_8 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_8 = 0;
		    java.sql.Connection conn_tPostgresqlInput_8 = null;
		        conn_tPostgresqlInput_8 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_8 = conn_tPostgresqlInput_8.createStatement();

		    String dbquery_tPostgresqlInput_8 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tPostgresqlInput_8_QUERY",dbquery_tPostgresqlInput_8);
		    java.sql.ResultSet rs_tPostgresqlInput_8 = null;

		    try {
		    	rs_tPostgresqlInput_8 = stmt_tPostgresqlInput_8.executeQuery(dbquery_tPostgresqlInput_8);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_8 = rs_tPostgresqlInput_8.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_8 = rsmd_tPostgresqlInput_8.getColumnCount();

		    String tmpContent_tPostgresqlInput_8 = null;
		    
		    
		    while (rs_tPostgresqlInput_8.next()) {
		        nb_line_tPostgresqlInput_8++;
		        
							if(colQtyInRs_tPostgresqlInput_8 < 1) {
								row2.etl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_8.getObject(1) != null) {
                row2.etl_id = rs_tPostgresqlInput_8.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 2) {
								row2.start_utc = null;
							} else {
										
			row2.start_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_8, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 3) {
								row2.stop_utc = null;
							} else {
										
			row2.stop_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_8, 3);
		                    }
					


 



/**
 * [tPostgresqlInput_8 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_8 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 


	tos_count_tPostgresqlInput_8++;

/**
 * [tPostgresqlInput_8 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 



/**
 * [tPostgresqlInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.etl_id = row2.etl_id;
				
				row2_HashRow.start_utc = row2.start_utc;
				
				row2_HashRow.stop_utc = row2.stop_utc;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 



/**
 * [tPostgresqlInput_8 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_8 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

	}
}finally{
	if (rs_tPostgresqlInput_8 != null) {
		rs_tPostgresqlInput_8.close();
	}
	if (stmt_tPostgresqlInput_8 != null) {
		stmt_tPostgresqlInput_8.close();
	}
}
globalMap.put("tPostgresqlInput_8_NB_LINE",nb_line_tPostgresqlInput_8);
 

ok_Hash.put("tPostgresqlInput_8", true);
end_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());




/**
 * [tPostgresqlInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_8 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 



/**
 * [tPostgresqlInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Users = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Users = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Users) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tPostgresqlInput_9 - inputs:(after_tPostgresqlInput_2) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_4 - inputs:(row3,row4) outputs:(outputProviders)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_9", false);
		start_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_9";

	
		int tos_count_tPostgresqlInput_9 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_9 = 0;
		    java.sql.Connection conn_tPostgresqlInput_9 = null;
		        conn_tPostgresqlInput_9 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_9 = conn_tPostgresqlInput_9.createStatement();

		    String dbquery_tPostgresqlInput_9 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tPostgresqlInput_9_QUERY",dbquery_tPostgresqlInput_9);
		    java.sql.ResultSet rs_tPostgresqlInput_9 = null;

		    try {
		    	rs_tPostgresqlInput_9 = stmt_tPostgresqlInput_9.executeQuery(dbquery_tPostgresqlInput_9);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_9 = rs_tPostgresqlInput_9.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_9 = rsmd_tPostgresqlInput_9.getColumnCount();

		    String tmpContent_tPostgresqlInput_9 = null;
		    
		    
		    while (rs_tPostgresqlInput_9.next()) {
		        nb_line_tPostgresqlInput_9++;
		        
							if(colQtyInRs_tPostgresqlInput_9 < 1) {
								row4.etl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_9.getObject(1) != null) {
                row4.etl_id = rs_tPostgresqlInput_9.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_9 < 2) {
								row4.start_utc = null;
							} else {
										
			row4.start_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_9, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_9 < 3) {
								row4.stop_utc = null;
							} else {
										
			row4.stop_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_9, 3);
		                    }
					


 



/**
 * [tPostgresqlInput_9 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_9 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 


	tos_count_tPostgresqlInput_9++;

/**
 * [tPostgresqlInput_9 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 



/**
 * [tPostgresqlInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.etl_id = row4.etl_id;
				
				row4_HashRow.start_utc = row4.start_utc;
				
				row4_HashRow.stop_utc = row4.stop_utc;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 



/**
 * [tPostgresqlInput_9 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_9 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

	}
}finally{
	if (rs_tPostgresqlInput_9 != null) {
		rs_tPostgresqlInput_9.close();
	}
	if (stmt_tPostgresqlInput_9 != null) {
		stmt_tPostgresqlInput_9.close();
	}
}
globalMap.put("tPostgresqlInput_9_NB_LINE",nb_line_tPostgresqlInput_9);
 

ok_Hash.put("tPostgresqlInput_9", true);
end_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());




/**
 * [tPostgresqlInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_9 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 



/**
 * [tPostgresqlInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Users = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Users = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public String usr_name;

				public String getUsr_name () {
					return this.usr_name;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.usr_name == null) ? 0 : this.usr_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.usr_name == null) {
							if (other.usr_name != null)
								return false;
						
						} else if (!this.usr_name.equals(other.usr_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.usr_id = this.usr_id;
	            other.usr_name = this.usr_name;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.usr_name = this.usr_name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Users.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Users.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Users, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Users, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Users) {

        	try {

        		int length = 0;
		
					this.usr_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.usr_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.usr_id = (Object) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.usr_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("usr_id="+String.valueOf(usr_id));
		sb.append(",usr_name="+usr_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.usr_name, other.usr_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row6", false);
		start_Hash.put("tHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tHash_row6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHash_row6 = 0;
		

				java.util.Map<row6Struct, row6Struct> tHash_row6 = new java.util.LinkedHashMap<row6Struct, row6Struct>();
	            globalMap.put("tHash_row6", tHash_row6);
			
            

 



/**
 * [tHash_row6 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_10", false);
		start_Hash.put("tPostgresqlInput_10", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_10";

	
		int tos_count_tPostgresqlInput_10 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_10 = 0;
		    java.sql.Connection conn_tPostgresqlInput_10 = null;
		        conn_tPostgresqlInput_10 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_10 = conn_tPostgresqlInput_10.createStatement();

		    String dbquery_tPostgresqlInput_10 = "select usr_id, lower(usr_name) as usr_name from usr_tbl";
			

            	globalMap.put("tPostgresqlInput_10_QUERY",dbquery_tPostgresqlInput_10);
		    java.sql.ResultSet rs_tPostgresqlInput_10 = null;

		    try {
		    	rs_tPostgresqlInput_10 = stmt_tPostgresqlInput_10.executeQuery(dbquery_tPostgresqlInput_10);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_10 = rs_tPostgresqlInput_10.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_10 = rsmd_tPostgresqlInput_10.getColumnCount();

		    String tmpContent_tPostgresqlInput_10 = null;
		    
		    
		    while (rs_tPostgresqlInput_10.next()) {
		        nb_line_tPostgresqlInput_10++;
		        
							if(colQtyInRs_tPostgresqlInput_10 < 1) {
								row6.usr_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_10.getObject(1) != null) {
                row6.usr_id = rs_tPostgresqlInput_10.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_10 < 2) {
								row6.usr_name = null;
							} else {
	                         		
        	row6.usr_name = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_10, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_10 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_10 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_10";

	

 


	tos_count_tPostgresqlInput_10++;

/**
 * [tPostgresqlInput_10 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_10";

	

 



/**
 * [tPostgresqlInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tHash_row6 main ] start
	 */

	

	
	
	currentComponent="tHash_row6";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		

row6Struct row6_HashRow = new row6Struct();

					row6_HashRow.usr_id = row6.usr_id;
					row6_HashRow.usr_name = row6.usr_name;
tHash_row6.put(row6_HashRow, row6_HashRow);


 


	tos_count_tHash_row6++;

/**
 * [tHash_row6 main ] stop
 */
	
	/**
	 * [tHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row6";

	

 



/**
 * [tHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row6";

	

 



/**
 * [tHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_10";

	

 



/**
 * [tPostgresqlInput_10 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_10 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_10";

	

	}
}finally{
	if (rs_tPostgresqlInput_10 != null) {
		rs_tPostgresqlInput_10.close();
	}
	if (stmt_tPostgresqlInput_10 != null) {
		stmt_tPostgresqlInput_10.close();
	}
}
globalMap.put("tPostgresqlInput_10_NB_LINE",nb_line_tPostgresqlInput_10);
 

ok_Hash.put("tPostgresqlInput_10", true);
end_Hash.put("tPostgresqlInput_10", System.currentTimeMillis());




/**
 * [tPostgresqlInput_10 end ] stop
 */

	
	/**
	 * [tHash_row6 end ] start
	 */

	

	
	
	currentComponent="tHash_row6";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHash_row6", true);
end_Hash.put("tHash_row6", System.currentTimeMillis());




/**
 * [tHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_10 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_10";

	

 



/**
 * [tPostgresqlInput_10 finally ] stop
 */

	
	/**
	 * [tHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tHash_row6";

	

 



/**
 * [tHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Users = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Users = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Users) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tPostgresqlInput_11 - inputs:(after_tPostgresqlInput_12) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_5 - inputs:(row10,row9) outputs:(outputSessions)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_11", false);
		start_Hash.put("tPostgresqlInput_11", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_11";

	
		int tos_count_tPostgresqlInput_11 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_11 = 0;
		    java.sql.Connection conn_tPostgresqlInput_11 = null;
		        conn_tPostgresqlInput_11 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_11 = conn_tPostgresqlInput_11.createStatement();

		    String dbquery_tPostgresqlInput_11 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tPostgresqlInput_11_QUERY",dbquery_tPostgresqlInput_11);
		    java.sql.ResultSet rs_tPostgresqlInput_11 = null;

		    try {
		    	rs_tPostgresqlInput_11 = stmt_tPostgresqlInput_11.executeQuery(dbquery_tPostgresqlInput_11);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_11 = rs_tPostgresqlInput_11.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_11 = rsmd_tPostgresqlInput_11.getColumnCount();

		    String tmpContent_tPostgresqlInput_11 = null;
		    
		    
		    while (rs_tPostgresqlInput_11.next()) {
		        nb_line_tPostgresqlInput_11++;
		        
							if(colQtyInRs_tPostgresqlInput_11 < 1) {
								row9.etl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_11.getObject(1) != null) {
                row9.etl_id = rs_tPostgresqlInput_11.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_11 < 2) {
								row9.start_utc = null;
							} else {
										
			row9.start_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_11, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_11 < 3) {
								row9.stop_utc = null;
							} else {
										
			row9.stop_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_11, 3);
		                    }
					


 



/**
 * [tPostgresqlInput_11 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_11 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

 


	tos_count_tPostgresqlInput_11++;

/**
 * [tPostgresqlInput_11 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

 



/**
 * [tPostgresqlInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.etl_id = row9.etl_id;
				
				row9_HashRow.start_utc = row9.start_utc;
				
				row9_HashRow.stop_utc = row9.stop_utc;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

 



/**
 * [tPostgresqlInput_11 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_11 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

	}
}finally{
	if (rs_tPostgresqlInput_11 != null) {
		rs_tPostgresqlInput_11.close();
	}
	if (stmt_tPostgresqlInput_11 != null) {
		stmt_tPostgresqlInput_11.close();
	}
}
globalMap.put("tPostgresqlInput_11_NB_LINE",nb_line_tPostgresqlInput_11);
 

ok_Hash.put("tPostgresqlInput_11", true);
end_Hash.put("tPostgresqlInput_11", System.currentTimeMillis());




/**
 * [tPostgresqlInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

tHash_Lookup_row9.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_11 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

 



/**
 * [tPostgresqlInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Users = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Users = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Users.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Users.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Users = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Users, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Users, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Users) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;
                    
                    
                StringBuilder sbHeader_tLogRow_1 = new StringBuilder();
				
				sbHeader_tLogRow_1.append("moment");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("pid");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("root_pid");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("father_pid");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("project");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("job");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("context");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("priority");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("type");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("origin");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("message");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("code");
				
                   
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(sbHeader_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row8.type = lcm.getType();
		row8.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row8.priority = lcm.getPriority();
		row8.message = lcm.getMessage();
		row8.code = lcm.getCode();
		
		row8.moment = java.util.Calendar.getInstance().getTime();
	
    	row8.pid = pid;
		row8.root_pid = rootPid;
		row8.father_pid = fatherPid;
	
    	row8.project = projectName;
    	row8.job = jobName;
    	row8.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row8.moment != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(row8.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.pid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.root_pid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.root_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.father_pid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.father_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.project != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.project)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.job != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.context != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.context)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.priority != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.priority)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.type != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.origin != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.message != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.message)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.code != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.code)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Production";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Warehouse_Users Warehouse_UsersClass = new Warehouse_Users();

        int exitCode = Warehouse_UsersClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Warehouse_Users.class.getClassLoader().getResourceAsStream("openiz/warehouse_users_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Warehouse_Users.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("auditServer", "id_String");
				
                context.auditServer=(String) context.getProperty("auditServer");
				    context.setContextType("auditCatalog", "id_String");
				
                context.auditCatalog=(String) context.getProperty("auditCatalog");
				    context.setContextType("auditPassword", "id_String");
				
                context.auditPassword=(String) context.getProperty("auditPassword");
				    context.setContextType("auditUser", "id_String");
				
                context.auditUser=(String) context.getProperty("auditUser");
				    context.setContextType("dbName", "id_String");
				
                context.dbName=(String) context.getProperty("dbName");
				    context.setContextType("dbPassword", "id_String");
				
                context.dbPassword=(String) context.getProperty("dbPassword");
				    context.setContextType("dbPort", "id_String");
				
                context.dbPort=(String) context.getProperty("dbPort");
				    context.setContextType("dbServer", "id_String");
				
                context.dbServer=(String) context.getProperty("dbServer");
				    context.setContextType("dbUser", "id_String");
				
                context.dbUser=(String) context.getProperty("dbUser");
				    context.setContextType("dwName", "id_String");
				
                context.dwName=(String) context.getProperty("dwName");
				    context.setContextType("dwPassword", "id_String");
				
                context.dwPassword=(String) context.getProperty("dwPassword");
				    context.setContextType("dwPort", "id_String");
				
                context.dwPort=(String) context.getProperty("dwPort");
				    context.setContextType("dwServer", "id_String");
				
                context.dwServer=(String) context.getProperty("dwServer");
				    context.setContextType("dwUser", "id_String");
				
                context.dwUser=(String) context.getProperty("dwUser");
				    context.setContextType("dwTemplate", "id_String");
				
                context.dwTemplate=(String) context.getProperty("dwTemplate");
				    context.setContextType("dwWorking", "id_String");
				
                context.dwWorking=(String) context.getProperty("dwWorking");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("auditServer")) {
                context.auditServer = (String) parentContextMap.get("auditServer");
            }if (parentContextMap.containsKey("auditCatalog")) {
                context.auditCatalog = (String) parentContextMap.get("auditCatalog");
            }if (parentContextMap.containsKey("auditPassword")) {
                context.auditPassword = (String) parentContextMap.get("auditPassword");
            }if (parentContextMap.containsKey("auditUser")) {
                context.auditUser = (String) parentContextMap.get("auditUser");
            }if (parentContextMap.containsKey("dbName")) {
                context.dbName = (String) parentContextMap.get("dbName");
            }if (parentContextMap.containsKey("dbPassword")) {
                context.dbPassword = (String) parentContextMap.get("dbPassword");
            }if (parentContextMap.containsKey("dbPort")) {
                context.dbPort = (String) parentContextMap.get("dbPort");
            }if (parentContextMap.containsKey("dbServer")) {
                context.dbServer = (String) parentContextMap.get("dbServer");
            }if (parentContextMap.containsKey("dbUser")) {
                context.dbUser = (String) parentContextMap.get("dbUser");
            }if (parentContextMap.containsKey("dwName")) {
                context.dwName = (String) parentContextMap.get("dwName");
            }if (parentContextMap.containsKey("dwPassword")) {
                context.dwPassword = (String) parentContextMap.get("dwPassword");
            }if (parentContextMap.containsKey("dwPort")) {
                context.dwPort = (String) parentContextMap.get("dwPort");
            }if (parentContextMap.containsKey("dwServer")) {
                context.dwServer = (String) parentContextMap.get("dwServer");
            }if (parentContextMap.containsKey("dwUser")) {
                context.dwUser = (String) parentContextMap.get("dwUser");
            }if (parentContextMap.containsKey("dwTemplate")) {
                context.dwTemplate = (String) parentContextMap.get("dwTemplate");
            }if (parentContextMap.containsKey("dwWorking")) {
                context.dwWorking = (String) parentContextMap.get("dwWorking");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tPostgresqlConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostgresqlConnection_1) {
globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", -1);

e_tPostgresqlConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Warehouse_Users");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_3");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tPostgresqlConnection_1", globalMap.get("conn_tPostgresqlConnection_1"));
            connections.put("conn_tPostgresqlConnection_2", globalMap.get("conn_tPostgresqlConnection_2"));
            connections.put("conn_tPostgresqlConnection_3", globalMap.get("conn_tPostgresqlConnection_3"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     295808 characters generated by Talend Open Studio for Data Integration 
 *     on the September 25, 2020 9:15:02 EDT AM
 ************************************************************************************************/