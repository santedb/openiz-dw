// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package openiz.warehouse_prerun_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Warehouse_PreRun Purpose: Pre-Run for Warehouse Data<br>
 * Description: Creates pre-requisite data in the target database <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class Warehouse_PreRun implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(dbName != null){
				
					this.setProperty("dbName", dbName.toString());
				
			}
			
			if(dbPassword != null){
				
					this.setProperty("dbPassword", dbPassword.toString());
				
			}
			
			if(dbPort != null){
				
					this.setProperty("dbPort", dbPort.toString());
				
			}
			
			if(dbServer != null){
				
					this.setProperty("dbServer", dbServer.toString());
				
			}
			
			if(dbUser != null){
				
					this.setProperty("dbUser", dbUser.toString());
				
			}
			
			if(dwName != null){
				
					this.setProperty("dwName", dwName.toString());
				
			}
			
			if(dwPassword != null){
				
					this.setProperty("dwPassword", dwPassword.toString());
				
			}
			
			if(dwPort != null){
				
					this.setProperty("dwPort", dwPort.toString());
				
			}
			
			if(dwServer != null){
				
					this.setProperty("dwServer", dwServer.toString());
				
			}
			
			if(dwUser != null){
				
					this.setProperty("dwUser", dwUser.toString());
				
			}
			
			if(dwTemplate != null){
				
					this.setProperty("dwTemplate", dwTemplate.toString());
				
			}
			
			if(dwWorking != null){
				
					this.setProperty("dwWorking", dwWorking.toString());
				
			}
			
		}

public String dbName;
public String getDbName(){
	return this.dbName;
}
public String dbPassword;
public String getDbPassword(){
	return this.dbPassword;
}
public String dbPort;
public String getDbPort(){
	return this.dbPort;
}
public String dbServer;
public String getDbServer(){
	return this.dbServer;
}
public String dbUser;
public String getDbUser(){
	return this.dbUser;
}
public String dwName;
public String getDwName(){
	return this.dwName;
}
public String dwPassword;
public String getDwPassword(){
	return this.dwPassword;
}
public String dwPort;
public String getDwPort(){
	return this.dwPort;
}
public String dwServer;
public String getDwServer(){
	return this.dwServer;
}
public String dwUser;
public String getDwUser(){
	return this.dwUser;
}
public String dwTemplate;
public String getDwTemplate(){
	return this.dwTemplate;
}
public String dwWorking;
public String getDwWorking(){
	return this.dwWorking;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Warehouse_PreRun";
	private final String projectName = "OPENIZ";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_2 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Warehouse_PreRun.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Warehouse_PreRun.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_2.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_2Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostgresqlConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDie_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError2", 0, "error");
								}
							
							
								errorCode = null;
								tDie_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError3", 0, "error");
								}
							
							
								errorCode = null;
								tDie_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPostgresqlConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_2", false);
		start_Hash.put("tPostgresqlConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_2";

	
		int tos_count_tPostgresqlConnection_2 = 0;
		


	
		String url_tPostgresqlConnection_2 = "jdbc:postgresql://"+context.dwServer+":"+context.dwPort+"/"+context.dwWorking; 
		String dbUser_tPostgresqlConnection_2 = context.dwUser;
		
		
			
	final String decryptedPassword_tPostgresqlConnection_2 = context.dwPassword; 
			String dbPwd_tPostgresqlConnection_2 = decryptedPassword_tPostgresqlConnection_2;
		
	java.sql.Connection conn_tPostgresqlConnection_2 = null;
	
		java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_2 =  java.sql.DriverManager.getDrivers();
    while (drivers_tPostgresqlConnection_2.hasMoreElements()) {
        java.sql.Driver d_tPostgresqlConnection_2 = drivers_tPostgresqlConnection_2.nextElement();
        java.util.List<String> driverList_tPostgresqlConnection_2 = java.util.Arrays.<String>asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver");
        if (driverList_tPostgresqlConnection_2.contains(d_tPostgresqlConnection_2.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tPostgresqlConnection_2);
                java.sql.DriverManager.registerDriver(d_tPostgresqlConnection_2);
            } catch (java.lang.Exception e_tPostgresqlConnection_2) {
            		//do nothing
            }
        }
    }
					String driverClass_tPostgresqlConnection_2 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tPostgresqlConnection_2);
		
				conn_tPostgresqlConnection_2 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_2,dbUser_tPostgresqlConnection_2,dbPwd_tPostgresqlConnection_2);

		globalMap.put("conn_tPostgresqlConnection_2", conn_tPostgresqlConnection_2);
	if (null != conn_tPostgresqlConnection_2) {
		
			conn_tPostgresqlConnection_2.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_2","public");

	globalMap.put("conn_" + "tPostgresqlConnection_2",conn_tPostgresqlConnection_2);

 



/**
 * [tPostgresqlConnection_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 


	tos_count_tPostgresqlConnection_2++;

/**
 * [tPostgresqlConnection_2 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 



/**
 * [tPostgresqlConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 



/**
 * [tPostgresqlConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 

ok_Hash.put("tPostgresqlConnection_2", true);
end_Hash.put("tPostgresqlConnection_2", System.currentTimeMillis());




/**
 * [tPostgresqlConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tPostgresqlConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 



/**
 * [tPostgresqlConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_1", false);
		start_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_1";

	
		int tos_count_tPostgresqlConnection_1 = 0;
		


	
		String url_tPostgresqlConnection_1 = "jdbc:postgresql://"+context.dbServer+":"+context.dbPort+"/"+context.dbName; 
		String dbUser_tPostgresqlConnection_1 = context.dbUser;
		
		
			
	final String decryptedPassword_tPostgresqlConnection_1 = context.dbPassword; 
			String dbPwd_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;
		
	java.sql.Connection conn_tPostgresqlConnection_1 = null;
	
		java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_1 =  java.sql.DriverManager.getDrivers();
    while (drivers_tPostgresqlConnection_1.hasMoreElements()) {
        java.sql.Driver d_tPostgresqlConnection_1 = drivers_tPostgresqlConnection_1.nextElement();
        java.util.List<String> driverList_tPostgresqlConnection_1 = java.util.Arrays.<String>asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver");
        if (driverList_tPostgresqlConnection_1.contains(d_tPostgresqlConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tPostgresqlConnection_1);
                java.sql.DriverManager.registerDriver(d_tPostgresqlConnection_1);
            } catch (java.lang.Exception e_tPostgresqlConnection_1) {
            		//do nothing
            }
        }
    }
					String driverClass_tPostgresqlConnection_1 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tPostgresqlConnection_1);
		
				conn_tPostgresqlConnection_1 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_1,dbUser_tPostgresqlConnection_1,dbPwd_tPostgresqlConnection_1);

		globalMap.put("conn_tPostgresqlConnection_1", conn_tPostgresqlConnection_1);
	if (null != conn_tPostgresqlConnection_1) {
		
			conn_tPostgresqlConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_1","public");

	globalMap.put("conn_" + "tPostgresqlConnection_1",conn_tPostgresqlConnection_1);

 



/**
 * [tPostgresqlConnection_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 


	tos_count_tPostgresqlConnection_1++;

/**
 * [tPostgresqlConnection_1 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 

ok_Hash.put("tPostgresqlConnection_1", true);
end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());




/**
 * [tPostgresqlConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tPostgresqlInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_PreRun = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_PreRun = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String set_mnemonic;

				public String getSet_mnemonic () {
					return this.set_mnemonic;
				}
				
			    public String cd_mnemonic;

				public String getCd_mnemonic () {
					return this.cd_mnemonic;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.set_mnemonic == null) ? 0 : this.set_mnemonic.hashCode());
					
						result = prime * result + ((this.cd_mnemonic == null) ? 0 : this.cd_mnemonic.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.set_mnemonic == null) {
							if (other.set_mnemonic != null)
								return false;
						
						} else if (!this.set_mnemonic.equals(other.set_mnemonic))
						
							return false;
					
						if (this.cd_mnemonic == null) {
							if (other.cd_mnemonic != null)
								return false;
						
						} else if (!this.cd_mnemonic.equals(other.cd_mnemonic))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.set_mnemonic = this.set_mnemonic;
	            other.cd_mnemonic = this.cd_mnemonic;
	            other.display = this.display;
	            other.errorCode = this.errorCode;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.set_mnemonic = this.set_mnemonic;
	            	other.cd_mnemonic = this.cd_mnemonic;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_PreRun.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_PreRun.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_PreRun) {

        	try {

        		int length = 0;
		
					this.set_mnemonic = readString(dis);
					
					this.cd_mnemonic = readString(dis);
					
					this.display = readString(dis);
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.set_mnemonic,dos);
					
					// String
				
						writeString(this.cd_mnemonic,dos);
					
					// String
				
						writeString(this.display,dos);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("set_mnemonic="+set_mnemonic);
		sb.append(",cd_mnemonic="+cd_mnemonic);
		sb.append(",display="+display);
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.set_mnemonic, other.set_mnemonic);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.cd_mnemonic, other.cd_mnemonic);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outputCodesStruct implements routines.system.IPersistableRow<outputCodesStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_PreRun = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_PreRun = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String set_mnemonic;

				public String getSet_mnemonic () {
					return this.set_mnemonic;
				}
				
			    public String cd_mnemonic;

				public String getCd_mnemonic () {
					return this.cd_mnemonic;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.set_mnemonic == null) ? 0 : this.set_mnemonic.hashCode());
					
						result = prime * result + ((this.cd_mnemonic == null) ? 0 : this.cd_mnemonic.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputCodesStruct other = (outputCodesStruct) obj;
		
						if (this.set_mnemonic == null) {
							if (other.set_mnemonic != null)
								return false;
						
						} else if (!this.set_mnemonic.equals(other.set_mnemonic))
						
							return false;
					
						if (this.cd_mnemonic == null) {
							if (other.cd_mnemonic != null)
								return false;
						
						} else if (!this.cd_mnemonic.equals(other.cd_mnemonic))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputCodesStruct other) {

		other.set_mnemonic = this.set_mnemonic;
	            other.cd_mnemonic = this.cd_mnemonic;
	            other.display = this.display;
	            
	}

	public void copyKeysDataTo(outputCodesStruct other) {

		other.set_mnemonic = this.set_mnemonic;
	            	other.cd_mnemonic = this.cd_mnemonic;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_PreRun.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_PreRun.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_PreRun) {

        	try {

        		int length = 0;
		
					this.set_mnemonic = readString(dis);
					
					this.cd_mnemonic = readString(dis);
					
					this.display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.set_mnemonic,dos);
					
					// String
				
						writeString(this.cd_mnemonic,dos);
					
					// String
				
						writeString(this.display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("set_mnemonic="+set_mnemonic);
		sb.append(",cd_mnemonic="+cd_mnemonic);
		sb.append(",display="+display);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputCodesStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.set_mnemonic, other.set_mnemonic);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.cd_mnemonic, other.cd_mnemonic);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_PreRun = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_PreRun = new byte[0];

	
			    public Object set_id;

				public Object getSet_id () {
					return this.set_id;
				}
				
			    public String set_mnemonic;

				public String getSet_mnemonic () {
					return this.set_mnemonic;
				}
				
			    public Object cd_id;

				public Object getCd_id () {
					return this.cd_id;
				}
				
			    public Object cd_vrsn_id;

				public Object getCd_vrsn_id () {
					return this.cd_vrsn_id;
				}
				
			    public String cd_mnemonic;

				public String getCd_mnemonic () {
					return this.cd_mnemonic;
				}
				
			    public String cls_mnemonic;

				public String getCls_mnemonic () {
					return this.cls_mnemonic;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_PreRun.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_PreRun.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_PreRun) {

        	try {

        		int length = 0;
		
						this.set_id = (Object) dis.readObject();
					
					this.set_mnemonic = readString(dis);
					
						this.cd_id = (Object) dis.readObject();
					
						this.cd_vrsn_id = (Object) dis.readObject();
					
					this.cd_mnemonic = readString(dis);
					
					this.cls_mnemonic = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.set_id);
					
					// String
				
						writeString(this.set_mnemonic,dos);
					
					// Object
				
       			    	dos.writeObject(this.cd_id);
					
					// Object
				
       			    	dos.writeObject(this.cd_vrsn_id);
					
					// String
				
						writeString(this.cd_mnemonic,dos);
					
					// String
				
						writeString(this.cls_mnemonic,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("set_id="+String.valueOf(set_id));
		sb.append(",set_mnemonic="+set_mnemonic);
		sb.append(",cd_id="+String.valueOf(cd_id));
		sb.append(",cd_vrsn_id="+String.valueOf(cd_vrsn_id));
		sb.append(",cd_mnemonic="+cd_mnemonic);
		sb.append(",cls_mnemonic="+cls_mnemonic);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_1Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_1Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_PreRun = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_PreRun = new byte[0];

	
			    public Object set_id;

				public Object getSet_id () {
					return this.set_id;
				}
				
			    public String set_mnemonic;

				public String getSet_mnemonic () {
					return this.set_mnemonic;
				}
				
			    public Object cd_id;

				public Object getCd_id () {
					return this.cd_id;
				}
				
			    public Object cd_vrsn_id;

				public Object getCd_vrsn_id () {
					return this.cd_vrsn_id;
				}
				
			    public String cd_mnemonic;

				public String getCd_mnemonic () {
					return this.cd_mnemonic;
				}
				
			    public String cls_mnemonic;

				public String getCls_mnemonic () {
					return this.cls_mnemonic;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_PreRun.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_PreRun.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_PreRun) {

        	try {

        		int length = 0;
		
						this.set_id = (Object) dis.readObject();
					
					this.set_mnemonic = readString(dis);
					
						this.cd_id = (Object) dis.readObject();
					
						this.cd_vrsn_id = (Object) dis.readObject();
					
					this.cd_mnemonic = readString(dis);
					
					this.cls_mnemonic = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.set_id);
					
					// String
				
						writeString(this.set_mnemonic,dos);
					
					// Object
				
       			    	dos.writeObject(this.cd_id);
					
					// Object
				
       			    	dos.writeObject(this.cd_vrsn_id);
					
					// String
				
						writeString(this.cd_mnemonic,dos);
					
					// String
				
						writeString(this.cls_mnemonic,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("set_id="+String.valueOf(set_id));
		sb.append(",set_mnemonic="+set_mnemonic);
		sb.append(",cd_id="+String.valueOf(cd_id));
		sb.append(",cd_vrsn_id="+String.valueOf(cd_vrsn_id));
		sb.append(",cd_mnemonic="+cd_mnemonic);
		sb.append(",cls_mnemonic="+cls_mnemonic);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_5Process(globalMap);

		row1Struct row1 = new row1Struct();
outputCodesStruct outputCodes = new outputCodesStruct();
row3Struct row3 = new row3Struct();






	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tPostgresqlOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_2", false);
		start_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputCodes" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_2 = 0;
		





String dbschema_tPostgresqlOutput_2 = null;
	dbschema_tPostgresqlOutput_2 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_2 = null;
if(dbschema_tPostgresqlOutput_2 == null || dbschema_tPostgresqlOutput_2.trim().length() == 0) {
	tableName_tPostgresqlOutput_2 = "cd_tbl";
} else {
	tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2 + "\".\"" + "cd_tbl";
}

        int updateKeyCount_tPostgresqlOutput_2 = 2;
        if(updateKeyCount_tPostgresqlOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_2 = 0;
int nb_line_update_tPostgresqlOutput_2 = 0;
int nb_line_inserted_tPostgresqlOutput_2 = 0;
int nb_line_deleted_tPostgresqlOutput_2 = 0;
int nb_line_rejected_tPostgresqlOutput_2 = 0;

int deletedCount_tPostgresqlOutput_2=0;
int updatedCount_tPostgresqlOutput_2=0;
int insertedCount_tPostgresqlOutput_2=0;
int rejectedCount_tPostgresqlOutput_2=0;

boolean whetherReject_tPostgresqlOutput_2 = false;

java.sql.Connection conn_tPostgresqlOutput_2 = null;
String dbUser_tPostgresqlOutput_2 = null;

	conn_tPostgresqlOutput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	



int count_tPostgresqlOutput_2=0;
            int rsTruncCountNumber_tPostgresqlOutput_2 = 0;
            try(java.sql.Statement stmtTruncCount_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tPostgresqlOutput_2 = stmtTruncCount_tPostgresqlOutput_2.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tPostgresqlOutput_2 + "\"")) {
                    if(rsTruncCount_tPostgresqlOutput_2.next()) {
                        rsTruncCountNumber_tPostgresqlOutput_2 = rsTruncCount_tPostgresqlOutput_2.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.createStatement()) {
                stmtTrunc_tPostgresqlOutput_2.executeUpdate("TRUNCATE TABLE \"" + tableName_tPostgresqlOutput_2 + "\"");
                deletedCount_tPostgresqlOutput_2 += rsTruncCountNumber_tPostgresqlOutput_2;
            }
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tPostgresqlOutput_2 + "\" WHERE \"set_mnemonic\" = ? AND \"cd_mnemonic\" = ?");
	    resourceMap.put("pstmt_tPostgresqlOutput_2", pstmt_tPostgresqlOutput_2);
	    String insert_tPostgresqlOutput_2 = "INSERT INTO \"" + tableName_tPostgresqlOutput_2 + "\" (\"set_mnemonic\",\"cd_mnemonic\",\"display\") VALUES (?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.prepareStatement(insert_tPostgresqlOutput_2);
	    resourceMap.put("pstmtInsert_tPostgresqlOutput_2", pstmtInsert_tPostgresqlOutput_2);
	    String update_tPostgresqlOutput_2 = "UPDATE \"" + tableName_tPostgresqlOutput_2 + "\" SET \"display\" = ? WHERE \"set_mnemonic\" = ? AND \"cd_mnemonic\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.prepareStatement(update_tPostgresqlOutput_2);
	    resourceMap.put("pstmtUpdate_tPostgresqlOutput_2", pstmtUpdate_tPostgresqlOutput_2);
	    

 



/**
 * [tPostgresqlOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputCodesStruct outputCodes_tmp = new outputCodesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
		        conn_tPostgresqlInput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "SELECT \n \"public\".\"cd_set_mem_vw\".\"set_id\", \n \"public\".\"cd_set_mem_vw\".\"set_mnemonic\", \n \"public\".\"cd_se"
+"t_mem_vw\".\"cd_id\", \n \"public\".\"cd_set_mem_vw\".\"cd_vrsn_id\", \n \"public\".\"cd_set_mem_vw\".\"cd_mnemonic\", \n "
+"\"public\".\"cd_set_mem_vw\".\"cls_mnemonic\"\nFROM \"public\".\"cd_set_mem_vw\"";
			

            	globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);
		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;

		    try {
		    	rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								row1.set_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(1) != null) {
                row1.set_id = rs_tPostgresqlInput_1.getObject(1);
            } else {
                    row1.set_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								row1.set_mnemonic = null;
							} else {
	                         		
        	row1.set_mnemonic = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 2, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 3) {
								row1.cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(3) != null) {
                row1.cd_id = rs_tPostgresqlInput_1.getObject(3);
            } else {
                    row1.cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 4) {
								row1.cd_vrsn_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(4) != null) {
                row1.cd_vrsn_id = rs_tPostgresqlInput_1.getObject(4);
            } else {
                    row1.cd_vrsn_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 5) {
								row1.cd_mnemonic = null;
							} else {
	                         		
        	row1.cd_mnemonic = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 5, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 6) {
								row1.cls_mnemonic = null;
							} else {
	                         		
        	row1.cls_mnemonic = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 6, false);
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row7HashKey.cd_id = row1.cd_id ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.cd_id = '" + row7HashKey.cd_id + "'");
								} // G 071
							

							row7Struct row7 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								 
							
							
								if (tHash_Lookup_row7 !=null && tHash_Lookup_row7.hasNext()) { // G 099
								
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							
							
								} // G 099
							
							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

outputCodes = null;


// # Output table : 'outputCodes'
outputCodes_tmp.set_mnemonic = row1.set_mnemonic;
outputCodes_tmp.cd_mnemonic = row1.cd_mnemonic;
outputCodes_tmp.display = row7.val ;
outputCodes = outputCodes_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "outputCodes"
if(outputCodes != null) { 



	
	/**
	 * [tPostgresqlOutput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

			//outputCodes
			//outputCodes


			
				if(execStat){
					runStat.updateStatOnConnection("outputCodes"+iterateId,1, 1);
				} 
			

		



            row3 = null;
        whetherReject_tPostgresqlOutput_2 = false;
                    if(outputCodes.set_mnemonic == null) {
pstmt_tPostgresqlOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_2.setString(1, outputCodes.set_mnemonic);
}

                    if(outputCodes.cd_mnemonic == null) {
pstmt_tPostgresqlOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_2.setString(2, outputCodes.cd_mnemonic);
}

            int checkCount_tPostgresqlOutput_2 = -1;
            try (java.sql.ResultSet rs_tPostgresqlOutput_2 = pstmt_tPostgresqlOutput_2.executeQuery()) {
                while(rs_tPostgresqlOutput_2.next()) {
                    checkCount_tPostgresqlOutput_2 = rs_tPostgresqlOutput_2.getInt(1);
                }
            }
            if(checkCount_tPostgresqlOutput_2 > 0) {
                        if(outputCodes.display == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_2.setString(1, outputCodes.display);
}

                        if(outputCodes.set_mnemonic == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(2 + count_tPostgresqlOutput_2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_2.setString(2 + count_tPostgresqlOutput_2, outputCodes.set_mnemonic);
}

                        if(outputCodes.cd_mnemonic == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(3 + count_tPostgresqlOutput_2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_2.setString(3 + count_tPostgresqlOutput_2, outputCodes.cd_mnemonic);
}

                try {
					
                    updatedCount_tPostgresqlOutput_2 = updatedCount_tPostgresqlOutput_2 + pstmtUpdate_tPostgresqlOutput_2.executeUpdate();
                    nb_line_tPostgresqlOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tPostgresqlOutput_2 = true;
                        nb_line_tPostgresqlOutput_2++;
                            row3 = new row3Struct();
                                row3.set_mnemonic = outputCodes.set_mnemonic;
                                row3.cd_mnemonic = outputCodes.cd_mnemonic;
                                row3.display = outputCodes.display;
                            rejectedCount_tPostgresqlOutput_2 = rejectedCount_tPostgresqlOutput_2 + 1;
                            row3.errorCode = ((java.sql.SQLException)e).getSQLState();
                            row3.errorMessage = e.getMessage() + " - Line: " + tos_count_tPostgresqlOutput_2;
                }
            } else {
                        if(outputCodes.set_mnemonic == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_2.setString(1, outputCodes.set_mnemonic);
}

                        if(outputCodes.cd_mnemonic == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_2.setString(2, outputCodes.cd_mnemonic);
}

                        if(outputCodes.display == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_2.setString(3, outputCodes.display);
}

                try {
					
                    insertedCount_tPostgresqlOutput_2 = insertedCount_tPostgresqlOutput_2 + pstmtInsert_tPostgresqlOutput_2.executeUpdate();
                    nb_line_tPostgresqlOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tPostgresqlOutput_2 = true;
                        nb_line_tPostgresqlOutput_2++;
                            row3 = new row3Struct();
                                row3.set_mnemonic = outputCodes.set_mnemonic;
                                row3.cd_mnemonic = outputCodes.cd_mnemonic;
                                row3.display = outputCodes.display;
                            rejectedCount_tPostgresqlOutput_2 = rejectedCount_tPostgresqlOutput_2 + 1;
                            row3.errorCode = ((java.sql.SQLException)e).getSQLState();
                            row3.errorMessage = e.getMessage() + " - Line: " + tos_count_tPostgresqlOutput_2;
                }
            }
            if(!whetherReject_tPostgresqlOutput_2) {
            }

 


	tos_count_tPostgresqlOutput_2++;

/**
 * [tPostgresqlOutput_2 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

 



/**
 * [tPostgresqlOutput_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row3.set_mnemonic != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row3.set_mnemonic)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row3.cd_mnemonic != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row3.cd_mnemonic)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row3.display != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row3.display)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row3.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row3.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row3.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row3.errorMessage)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tPostgresqlOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

 



/**
 * [tPostgresqlOutput_2 process_data_end ] stop
 */

} // End of branch "outputCodes"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	if (rs_tPostgresqlInput_1 != null) {
		rs_tPostgresqlInput_1.close();
	}
	if (stmt_tPostgresqlInput_1 != null) {
		stmt_tPostgresqlInput_1.close();
	}
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



        if(pstmtUpdate_tPostgresqlOutput_2 != null){
            pstmtUpdate_tPostgresqlOutput_2.close();
            resourceMap.remove("pstmtUpdate_tPostgresqlOutput_2");
        }
        if(pstmtInsert_tPostgresqlOutput_2 != null){
            pstmtInsert_tPostgresqlOutput_2.close();
            resourceMap.remove("pstmtInsert_tPostgresqlOutput_2");
        }
        if(pstmt_tPostgresqlOutput_2 != null) {
            pstmt_tPostgresqlOutput_2.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_2");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_2", true);

	nb_line_deleted_tPostgresqlOutput_2=nb_line_deleted_tPostgresqlOutput_2+ deletedCount_tPostgresqlOutput_2;
	nb_line_update_tPostgresqlOutput_2=nb_line_update_tPostgresqlOutput_2 + updatedCount_tPostgresqlOutput_2;
	nb_line_inserted_tPostgresqlOutput_2=nb_line_inserted_tPostgresqlOutput_2 + insertedCount_tPostgresqlOutput_2;
	nb_line_rejected_tPostgresqlOutput_2=nb_line_rejected_tPostgresqlOutput_2 + rejectedCount_tPostgresqlOutput_2;
	
        globalMap.put("tPostgresqlOutput_2_NB_LINE",nb_line_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_2);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputCodes"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_2", true);
end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tWarn_2Process(globalMap);



/**
 * [tPostgresqlOutput_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tPostgresqlOutput_2 = null;
                if ((pstmtUpdateToClose_tPostgresqlOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tPostgresqlOutput_2")) != null) {
                    pstmtUpdateToClose_tPostgresqlOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tPostgresqlOutput_2 = null;
                if ((pstmtInsertToClose_tPostgresqlOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tPostgresqlOutput_2")) != null) {
                    pstmtInsertToClose_tPostgresqlOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_2 = null;
                if ((pstmtToClose_tPostgresqlOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_2")) != null) {
                    pstmtToClose_tPostgresqlOutput_2.close();
                }
    }
 



/**
 * [tPostgresqlOutput_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_2", false);
		start_Hash.put("tWarn_2", System.currentTimeMillis());
		
	
	currentComponent="tWarn_2";

	
		int tos_count_tWarn_2 = 0;
		

 



/**
 * [tWarn_2 begin ] stop
 */
	
	/**
	 * [tWarn_2 main ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread.currentThread().getId() + "", "INFO","","Starting addresses","", "");
	tLogCatcher_2.addMessage("tWarn", "tWarn_2", 3, "Starting addresses", 42);
	tLogCatcher_2Process(globalMap);
	globalMap.put("tWarn_2_WARN_MESSAGES", "Starting addresses"); 
	globalMap.put("tWarn_2_WARN_PRIORITY", 3);
	globalMap.put("tWarn_2_WARN_CODE", 42);
	
} catch (Exception e_tWarn_2) {
	logIgnoredError(String.format("tWarn_2 - tWarn failed to log message due to internal error: %s", e_tWarn_2), e_tWarn_2);
}


 


	tos_count_tWarn_2++;

/**
 * [tWarn_2 main ] stop
 */
	
	/**
	 * [tWarn_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 process_data_end ] stop
 */
	
	/**
	 * [tWarn_2 end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 

ok_Hash.put("tWarn_2", true);
end_Hash.put("tWarn_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tPostgresqlInput_3Process(globalMap);



/**
 * [tWarn_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_2 finally ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_2_SUBPROCESS_STATE", 1);
	}
	


public static class outputAddressesStruct implements routines.system.IPersistableRow<outputAddressesStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_PreRun = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_PreRun = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object addr_cmp_id;

				public Object getAddr_cmp_id () {
					return this.addr_cmp_id;
				}
				
			    public Object addr_id;

				public Object getAddr_id () {
					return this.addr_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public String use_cs;

				public String getUse_cs () {
					return this.use_cs;
				}
				
			    public String typ;

				public String getTyp () {
					return this.typ;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.addr_cmp_id == null) ? 0 : this.addr_cmp_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputAddressesStruct other = (outputAddressesStruct) obj;
		
						if (this.addr_cmp_id == null) {
							if (other.addr_cmp_id != null)
								return false;
						
						} else if (!this.addr_cmp_id.equals(other.addr_cmp_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputAddressesStruct other) {

		other.addr_cmp_id = this.addr_cmp_id;
	            other.addr_id = this.addr_id;
	            other.ent_id = this.ent_id;
	            other.use_cs = this.use_cs;
	            other.typ = this.typ;
	            other.value = this.value;
	            
	}

	public void copyKeysDataTo(outputAddressesStruct other) {

		other.addr_cmp_id = this.addr_cmp_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_PreRun.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_PreRun.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_PreRun) {

        	try {

        		int length = 0;
		
						this.addr_cmp_id = (Object) dis.readObject();
					
						this.addr_id = (Object) dis.readObject();
					
						this.ent_id = (Object) dis.readObject();
					
					this.use_cs = readString(dis);
					
					this.typ = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.addr_cmp_id);
					
					// Object
				
       			    	dos.writeObject(this.addr_id);
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// String
				
						writeString(this.use_cs,dos);
					
					// String
				
						writeString(this.typ,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("addr_cmp_id="+String.valueOf(addr_cmp_id));
		sb.append(",addr_id="+String.valueOf(addr_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",use_cs="+use_cs);
		sb.append(",typ="+typ);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputAddressesStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.addr_cmp_id, other.addr_cmp_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_PreRun = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_PreRun = new byte[0];

	
			    public Object addr_id;

				public Object getAddr_id () {
					return this.addr_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public String use;

				public String getUse () {
					return this.use;
				}
				
			    public String typ;

				public String getTyp () {
					return this.typ;
				}
				
			    public String val;

				public String getVal () {
					return this.val;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_PreRun.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_PreRun.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_PreRun) {

        	try {

        		int length = 0;
		
						this.addr_id = (Object) dis.readObject();
					
						this.ent_id = (Object) dis.readObject();
					
					this.use = readString(dis);
					
					this.typ = readString(dis);
					
					this.val = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.addr_id);
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// String
				
						writeString(this.use,dos);
					
					// String
				
						writeString(this.typ,dos);
					
					// String
				
						writeString(this.val,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("addr_id="+String.valueOf(addr_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",use="+use);
		sb.append(",typ="+typ);
		sb.append(",val="+val);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
outputAddressesStruct outputAddresses = new outputAddressesStruct();





	
	/**
	 * [tPostgresqlOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_3", false);
		start_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputAddresses" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_3 = 0;
		





String dbschema_tPostgresqlOutput_3 = null;
	dbschema_tPostgresqlOutput_3 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_3 = null;
if(dbschema_tPostgresqlOutput_3 == null || dbschema_tPostgresqlOutput_3.trim().length() == 0) {
	tableName_tPostgresqlOutput_3 = "addr_cmp_tbl";
} else {
	tableName_tPostgresqlOutput_3 = dbschema_tPostgresqlOutput_3 + "\".\"" + "addr_cmp_tbl";
}

int nb_line_tPostgresqlOutput_3 = 0;
int nb_line_update_tPostgresqlOutput_3 = 0;
int nb_line_inserted_tPostgresqlOutput_3 = 0;
int nb_line_deleted_tPostgresqlOutput_3 = 0;
int nb_line_rejected_tPostgresqlOutput_3 = 0;

int deletedCount_tPostgresqlOutput_3=0;
int updatedCount_tPostgresqlOutput_3=0;
int insertedCount_tPostgresqlOutput_3=0;
int rejectedCount_tPostgresqlOutput_3=0;

boolean whetherReject_tPostgresqlOutput_3 = false;

java.sql.Connection conn_tPostgresqlOutput_3 = null;
String dbUser_tPostgresqlOutput_3 = null;

	conn_tPostgresqlOutput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_3 = 10000;
   int batchSizeCounter_tPostgresqlOutput_3=0;

int count_tPostgresqlOutput_3=0;
            int rsTruncCountNumber_tPostgresqlOutput_3 = 0;
            try(java.sql.Statement stmtTruncCount_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tPostgresqlOutput_3 = stmtTruncCount_tPostgresqlOutput_3.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tPostgresqlOutput_3 + "\"")) {
                    if(rsTruncCount_tPostgresqlOutput_3.next()) {
                        rsTruncCountNumber_tPostgresqlOutput_3 = rsTruncCount_tPostgresqlOutput_3.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.createStatement()) {
                stmtTrunc_tPostgresqlOutput_3.executeUpdate("TRUNCATE TABLE \"" + tableName_tPostgresqlOutput_3 + "\"");
                deletedCount_tPostgresqlOutput_3 += rsTruncCountNumber_tPostgresqlOutput_3;
            }
	    String insert_tPostgresqlOutput_3 = "INSERT INTO \"" + tableName_tPostgresqlOutput_3 + "\" (\"addr_cmp_id\",\"addr_id\",\"ent_id\",\"use_cs\",\"typ\",\"value\") VALUES (?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.prepareStatement(insert_tPostgresqlOutput_3);
	    resourceMap.put("pstmt_tPostgresqlOutput_3", pstmt_tPostgresqlOutput_3);
	    

 



/**
 * [tPostgresqlOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputAddressesStruct outputAddresses_tmp = new outputAddressesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_3", false);
		start_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_3";

	
		int tos_count_tPostgresqlInput_3 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_3 = 0;
		    java.sql.Connection conn_tPostgresqlInput_3 = null;
		        conn_tPostgresqlInput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3.createStatement();

		    String dbquery_tPostgresqlInput_3 = "select * from ent_cur_addr_vw;";
			

            	globalMap.put("tPostgresqlInput_3_QUERY",dbquery_tPostgresqlInput_3);
		    java.sql.ResultSet rs_tPostgresqlInput_3 = null;

		    try {
		    	rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3.executeQuery(dbquery_tPostgresqlInput_3);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3.getColumnCount();

		    String tmpContent_tPostgresqlInput_3 = null;
		    
		    
		    while (rs_tPostgresqlInput_3.next()) {
		        nb_line_tPostgresqlInput_3++;
		        
							if(colQtyInRs_tPostgresqlInput_3 < 1) {
								row5.addr_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(1) != null) {
                row5.addr_id = rs_tPostgresqlInput_3.getObject(1);
            } else {
                    row5.addr_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 2) {
								row5.ent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(2) != null) {
                row5.ent_id = rs_tPostgresqlInput_3.getObject(2);
            } else {
                    row5.ent_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 3) {
								row5.use = null;
							} else {
	                         		
        	row5.use = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 3, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 4) {
								row5.typ = null;
							} else {
	                         		
        	row5.typ = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 4, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 5) {
								row5.val = null;
							} else {
	                         		
        	row5.val = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 5, false);
		                    }
					


 



/**
 * [tPostgresqlInput_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 


	tos_count_tPostgresqlInput_3++;

/**
 * [tPostgresqlInput_3 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

outputAddresses = null;


// # Output table : 'outputAddresses'
outputAddresses_tmp.addr_cmp_id = java.util.UUID.randomUUID().toString() ;
outputAddresses_tmp.addr_id = row5.addr_id;
outputAddresses_tmp.ent_id = row5.ent_id;
outputAddresses_tmp.use_cs = row5.use ;
outputAddresses_tmp.typ = row5.typ;
outputAddresses_tmp.value = row5.val ;
outputAddresses = outputAddresses_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "outputAddresses"
if(outputAddresses != null) { 



	
	/**
	 * [tPostgresqlOutput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

			//outputAddresses
			//outputAddresses


			
				if(execStat){
					runStat.updateStatOnConnection("outputAddresses"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_3 = false;
                    if(outputAddresses.addr_cmp_id == null) {
pstmt_tPostgresqlOutput_3.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(1, outputAddresses.addr_cmp_id, java.sql.Types.OTHER);
}

                    if(outputAddresses.addr_id == null) {
pstmt_tPostgresqlOutput_3.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(2, outputAddresses.addr_id, java.sql.Types.OTHER);
}

                    if(outputAddresses.ent_id == null) {
pstmt_tPostgresqlOutput_3.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(3, outputAddresses.ent_id, java.sql.Types.OTHER);
}

                    if(outputAddresses.use_cs == null) {
pstmt_tPostgresqlOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_3.setString(4, outputAddresses.use_cs);
}

                    if(outputAddresses.typ == null) {
pstmt_tPostgresqlOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_3.setString(5, outputAddresses.typ);
}

                    if(outputAddresses.value == null) {
pstmt_tPostgresqlOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_3.setString(6, outputAddresses.value);
}

			
    		pstmt_tPostgresqlOutput_3.addBatch();
    		nb_line_tPostgresqlOutput_3++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_3++;
    		  
            if(!whetherReject_tPostgresqlOutput_3) {
            }
    			if ((batchSize_tPostgresqlOutput_3 > 0) && (batchSize_tPostgresqlOutput_3 <= batchSizeCounter_tPostgresqlOutput_3)) {
                try {
						int countSum_tPostgresqlOutput_3 = 0;
						    
						for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
				    	
				    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_3){
				    	java.sql.SQLException ne_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getNextException(),sqle_tPostgresqlOutput_3=null;
				    	String errormessage_tPostgresqlOutput_3;
						if (ne_tPostgresqlOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_3 = new java.sql.SQLException(e_tPostgresqlOutput_3.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_3.getMessage(), ne_tPostgresqlOutput_3.getSQLState(), ne_tPostgresqlOutput_3.getErrorCode(), ne_tPostgresqlOutput_3);
							errormessage_tPostgresqlOutput_3 = sqle_tPostgresqlOutput_3.getMessage();
						}else{
							errormessage_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_3 = 0;
						for(int countEach_tPostgresqlOutput_3: e_tPostgresqlOutput_3.getUpdateCounts()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
						
				    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_3++;

/**
 * [tPostgresqlOutput_3 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

 



/**
 * [tPostgresqlOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

 



/**
 * [tPostgresqlOutput_3 process_data_end ] stop
 */

} // End of branch "outputAddresses"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

	}
}finally{
	if (rs_tPostgresqlInput_3 != null) {
		rs_tPostgresqlInput_3.close();
	}
	if (stmt_tPostgresqlInput_3 != null) {
		stmt_tPostgresqlInput_3.close();
	}
}
globalMap.put("tPostgresqlInput_3_NB_LINE",nb_line_tPostgresqlInput_3);
 

ok_Hash.put("tPostgresqlInput_3", true);
end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());




/**
 * [tPostgresqlInput_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



	    try {
				int countSum_tPostgresqlOutput_3 = 0;
				if (pstmt_tPostgresqlOutput_3 != null && batchSizeCounter_tPostgresqlOutput_3 > 0) {
						
					for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
						countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_3){
	    	java.sql.SQLException ne_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getNextException(),sqle_tPostgresqlOutput_3=null;
	    	String errormessage_tPostgresqlOutput_3;
			if (ne_tPostgresqlOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_3 = new java.sql.SQLException(e_tPostgresqlOutput_3.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_3.getMessage(), ne_tPostgresqlOutput_3.getSQLState(), ne_tPostgresqlOutput_3.getErrorCode(), ne_tPostgresqlOutput_3);
				errormessage_tPostgresqlOutput_3 = sqle_tPostgresqlOutput_3.getMessage();
			}else{
				errormessage_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_3 = 0;
			for(int countEach_tPostgresqlOutput_3: e_tPostgresqlOutput_3.getUpdateCounts()) {
				countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
			}
			
	    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_3);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_3 != null) {
        		
            pstmt_tPostgresqlOutput_3.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_3");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_3", true);

	nb_line_deleted_tPostgresqlOutput_3=nb_line_deleted_tPostgresqlOutput_3+ deletedCount_tPostgresqlOutput_3;
	nb_line_update_tPostgresqlOutput_3=nb_line_update_tPostgresqlOutput_3 + updatedCount_tPostgresqlOutput_3;
	nb_line_inserted_tPostgresqlOutput_3=nb_line_inserted_tPostgresqlOutput_3 + insertedCount_tPostgresqlOutput_3;
	nb_line_rejected_tPostgresqlOutput_3=nb_line_rejected_tPostgresqlOutput_3 + rejectedCount_tPostgresqlOutput_3;
	
        globalMap.put("tPostgresqlOutput_3_NB_LINE",nb_line_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_3);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputAddresses"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_3", true);
end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tWarn_3Process(globalMap);



/**
 * [tPostgresqlOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_3 = null;
                if ((pstmtToClose_tPostgresqlOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_3")) != null) {
                    pstmtToClose_tPostgresqlOutput_3.close();
                }
    }
 



/**
 * [tPostgresqlOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_3", false);
		start_Hash.put("tWarn_3", System.currentTimeMillis());
		
	
	currentComponent="tWarn_3";

	
		int tos_count_tWarn_3 = 0;
		

 



/**
 * [tWarn_3 begin ] stop
 */
	
	/**
	 * [tWarn_3 main ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_3", "", Thread.currentThread().getId() + "", "INFO","","Starting Names","", "");
	tLogCatcher_2.addMessage("tWarn", "tWarn_3", 3, "Starting Names", 42);
	tLogCatcher_2Process(globalMap);
	globalMap.put("tWarn_3_WARN_MESSAGES", "Starting Names"); 
	globalMap.put("tWarn_3_WARN_PRIORITY", 3);
	globalMap.put("tWarn_3_WARN_CODE", 42);
	
} catch (Exception e_tWarn_3) {
	logIgnoredError(String.format("tWarn_3 - tWarn failed to log message due to internal error: %s", e_tWarn_3), e_tWarn_3);
}


 


	tos_count_tWarn_3++;

/**
 * [tWarn_3 main ] stop
 */
	
	/**
	 * [tWarn_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 process_data_end ] stop
 */
	
	/**
	 * [tWarn_3 end ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 

ok_Hash.put("tWarn_3", true);
end_Hash.put("tWarn_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tPostgresqlInput_2Process(globalMap);



/**
 * [tWarn_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_3 finally ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_3_SUBPROCESS_STATE", 1);
	}
	


public static class outputNamesStruct implements routines.system.IPersistableRow<outputNamesStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_PreRun = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_PreRun = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object name_cmp_id;

				public Object getName_cmp_id () {
					return this.name_cmp_id;
				}
				
			    public Object name_id;

				public Object getName_id () {
					return this.name_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public String use_cs;

				public String getUse_cs () {
					return this.use_cs;
				}
				
			    public String typ;

				public String getTyp () {
					return this.typ;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.name_cmp_id == null) ? 0 : this.name_cmp_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputNamesStruct other = (outputNamesStruct) obj;
		
						if (this.name_cmp_id == null) {
							if (other.name_cmp_id != null)
								return false;
						
						} else if (!this.name_cmp_id.equals(other.name_cmp_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputNamesStruct other) {

		other.name_cmp_id = this.name_cmp_id;
	            other.name_id = this.name_id;
	            other.ent_id = this.ent_id;
	            other.use_cs = this.use_cs;
	            other.typ = this.typ;
	            other.value = this.value;
	            
	}

	public void copyKeysDataTo(outputNamesStruct other) {

		other.name_cmp_id = this.name_cmp_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_PreRun.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_PreRun.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_PreRun) {

        	try {

        		int length = 0;
		
						this.name_cmp_id = (Object) dis.readObject();
					
						this.name_id = (Object) dis.readObject();
					
						this.ent_id = (Object) dis.readObject();
					
					this.use_cs = readString(dis);
					
					this.typ = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.name_cmp_id);
					
					// Object
				
       			    	dos.writeObject(this.name_id);
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// String
				
						writeString(this.use_cs,dos);
					
					// String
				
						writeString(this.typ,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name_cmp_id="+String.valueOf(name_cmp_id));
		sb.append(",name_id="+String.valueOf(name_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",use_cs="+use_cs);
		sb.append(",typ="+typ);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputNamesStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.name_cmp_id, other.name_cmp_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_PreRun = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_PreRun = new byte[0];

	
			    public Object name_id;

				public Object getName_id () {
					return this.name_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public String use;

				public String getUse () {
					return this.use;
				}
				
			    public String typ;

				public String getTyp () {
					return this.typ;
				}
				
			    public String val;

				public String getVal () {
					return this.val;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_PreRun.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_PreRun.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_PreRun) {

        	try {

        		int length = 0;
		
						this.name_id = (Object) dis.readObject();
					
						this.ent_id = (Object) dis.readObject();
					
					this.use = readString(dis);
					
					this.typ = readString(dis);
					
					this.val = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.name_id);
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// String
				
						writeString(this.use,dos);
					
					// String
				
						writeString(this.typ,dos);
					
					// String
				
						writeString(this.val,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name_id="+String.valueOf(name_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",use="+use);
		sb.append(",typ="+typ);
		sb.append(",val="+val);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
outputNamesStruct outputNames = new outputNamesStruct();





	
	/**
	 * [tPostgresqlOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_4", false);
		start_Hash.put("tPostgresqlOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputNames" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_4 = 0;
		





String dbschema_tPostgresqlOutput_4 = null;
	dbschema_tPostgresqlOutput_4 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_4 = null;
if(dbschema_tPostgresqlOutput_4 == null || dbschema_tPostgresqlOutput_4.trim().length() == 0) {
	tableName_tPostgresqlOutput_4 = "name_cmp_tbl";
} else {
	tableName_tPostgresqlOutput_4 = dbschema_tPostgresqlOutput_4 + "\".\"" + "name_cmp_tbl";
}

int nb_line_tPostgresqlOutput_4 = 0;
int nb_line_update_tPostgresqlOutput_4 = 0;
int nb_line_inserted_tPostgresqlOutput_4 = 0;
int nb_line_deleted_tPostgresqlOutput_4 = 0;
int nb_line_rejected_tPostgresqlOutput_4 = 0;

int deletedCount_tPostgresqlOutput_4=0;
int updatedCount_tPostgresqlOutput_4=0;
int insertedCount_tPostgresqlOutput_4=0;
int rejectedCount_tPostgresqlOutput_4=0;

boolean whetherReject_tPostgresqlOutput_4 = false;

java.sql.Connection conn_tPostgresqlOutput_4 = null;
String dbUser_tPostgresqlOutput_4 = null;

	conn_tPostgresqlOutput_4 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_4 = 10000;
   int batchSizeCounter_tPostgresqlOutput_4=0;

int count_tPostgresqlOutput_4=0;
            int rsTruncCountNumber_tPostgresqlOutput_4 = 0;
            try(java.sql.Statement stmtTruncCount_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tPostgresqlOutput_4 = stmtTruncCount_tPostgresqlOutput_4.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tPostgresqlOutput_4 + "\"")) {
                    if(rsTruncCount_tPostgresqlOutput_4.next()) {
                        rsTruncCountNumber_tPostgresqlOutput_4 = rsTruncCount_tPostgresqlOutput_4.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4.createStatement()) {
                stmtTrunc_tPostgresqlOutput_4.executeUpdate("TRUNCATE TABLE \"" + tableName_tPostgresqlOutput_4 + "\"");
                deletedCount_tPostgresqlOutput_4 += rsTruncCountNumber_tPostgresqlOutput_4;
            }
	    String insert_tPostgresqlOutput_4 = "INSERT INTO \"" + tableName_tPostgresqlOutput_4 + "\" (\"name_cmp_id\",\"name_id\",\"ent_id\",\"use_cs\",\"typ\",\"value\") VALUES (?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4.prepareStatement(insert_tPostgresqlOutput_4);
	    resourceMap.put("pstmt_tPostgresqlOutput_4", pstmt_tPostgresqlOutput_4);
	    

 



/**
 * [tPostgresqlOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputNamesStruct outputNames_tmp = new outputNamesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
		        conn_tPostgresqlInput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "select * from ent_cur_name_vw";
			

            	globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);
		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;

		    try {
		    	rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								row6.name_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(1) != null) {
                row6.name_id = rs_tPostgresqlInput_2.getObject(1);
            } else {
                    row6.name_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 2) {
								row6.ent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(2) != null) {
                row6.ent_id = rs_tPostgresqlInput_2.getObject(2);
            } else {
                    row6.ent_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 3) {
								row6.use = null;
							} else {
	                         		
        	row6.use = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 3, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 4) {
								row6.typ = null;
							} else {
	                         		
        	row6.typ = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 4, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 5) {
								row6.val = null;
							} else {
	                         		
        	row6.val = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 5, false);
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

outputNames = null;


// # Output table : 'outputNames'
outputNames_tmp.name_cmp_id = java.util.UUID.randomUUID().toString() ;
outputNames_tmp.name_id = row6.name_id;
outputNames_tmp.ent_id = row6.ent_id;
outputNames_tmp.use_cs = row6.use ;
outputNames_tmp.typ = row6.typ;
outputNames_tmp.value = row6.val ;
outputNames = outputNames_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "outputNames"
if(outputNames != null) { 



	
	/**
	 * [tPostgresqlOutput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	

			//outputNames
			//outputNames


			
				if(execStat){
					runStat.updateStatOnConnection("outputNames"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_4 = false;
                    if(outputNames.name_cmp_id == null) {
pstmt_tPostgresqlOutput_4.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(1, outputNames.name_cmp_id, java.sql.Types.OTHER);
}

                    if(outputNames.name_id == null) {
pstmt_tPostgresqlOutput_4.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(2, outputNames.name_id, java.sql.Types.OTHER);
}

                    if(outputNames.ent_id == null) {
pstmt_tPostgresqlOutput_4.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(3, outputNames.ent_id, java.sql.Types.OTHER);
}

                    if(outputNames.use_cs == null) {
pstmt_tPostgresqlOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_4.setString(4, outputNames.use_cs);
}

                    if(outputNames.typ == null) {
pstmt_tPostgresqlOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_4.setString(5, outputNames.typ);
}

                    if(outputNames.value == null) {
pstmt_tPostgresqlOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_4.setString(6, outputNames.value);
}

			
    		pstmt_tPostgresqlOutput_4.addBatch();
    		nb_line_tPostgresqlOutput_4++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_4++;
    		  
            if(!whetherReject_tPostgresqlOutput_4) {
            }
    			if ((batchSize_tPostgresqlOutput_4 > 0) && (batchSize_tPostgresqlOutput_4 <= batchSizeCounter_tPostgresqlOutput_4)) {
                try {
						int countSum_tPostgresqlOutput_4 = 0;
						    
						for(int countEach_tPostgresqlOutput_4: pstmt_tPostgresqlOutput_4.executeBatch()) {
							countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
						}
				    	
				    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_4){
				    	java.sql.SQLException ne_tPostgresqlOutput_4 = e_tPostgresqlOutput_4.getNextException(),sqle_tPostgresqlOutput_4=null;
				    	String errormessage_tPostgresqlOutput_4;
						if (ne_tPostgresqlOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_4 = new java.sql.SQLException(e_tPostgresqlOutput_4.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_4.getMessage(), ne_tPostgresqlOutput_4.getSQLState(), ne_tPostgresqlOutput_4.getErrorCode(), ne_tPostgresqlOutput_4);
							errormessage_tPostgresqlOutput_4 = sqle_tPostgresqlOutput_4.getMessage();
						}else{
							errormessage_tPostgresqlOutput_4 = e_tPostgresqlOutput_4.getMessage();
						}
				    	
				    		if (ne_tPostgresqlOutput_4 != null) {
				    			throw(sqle_tPostgresqlOutput_4);
				    		}else{
				            	throw(e_tPostgresqlOutput_4);
				            }
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_4++;

/**
 * [tPostgresqlOutput_4 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	

 



/**
 * [tPostgresqlOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	

 



/**
 * [tPostgresqlOutput_4 process_data_end ] stop
 */

} // End of branch "outputNames"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	if (rs_tPostgresqlInput_2 != null) {
		rs_tPostgresqlInput_2.close();
	}
	if (stmt_tPostgresqlInput_2 != null) {
		stmt_tPostgresqlInput_2.close();
	}
}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	



	    try {
				int countSum_tPostgresqlOutput_4 = 0;
				if (pstmt_tPostgresqlOutput_4 != null && batchSizeCounter_tPostgresqlOutput_4 > 0) {
						
					for(int countEach_tPostgresqlOutput_4: pstmt_tPostgresqlOutput_4.executeBatch()) {
						countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_4){
	    	java.sql.SQLException ne_tPostgresqlOutput_4 = e_tPostgresqlOutput_4.getNextException(),sqle_tPostgresqlOutput_4=null;
	    	String errormessage_tPostgresqlOutput_4;
			if (ne_tPostgresqlOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_4 = new java.sql.SQLException(e_tPostgresqlOutput_4.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_4.getMessage(), ne_tPostgresqlOutput_4.getSQLState(), ne_tPostgresqlOutput_4.getErrorCode(), ne_tPostgresqlOutput_4);
				errormessage_tPostgresqlOutput_4 = sqle_tPostgresqlOutput_4.getMessage();
			}else{
				errormessage_tPostgresqlOutput_4 = e_tPostgresqlOutput_4.getMessage();
			}
	    	
	    		if (ne_tPostgresqlOutput_4 != null) {
	    			throw(sqle_tPostgresqlOutput_4);
	    		}else{
	            	throw(e_tPostgresqlOutput_4);
	            }
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_4 != null) {
        		
            pstmt_tPostgresqlOutput_4.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_4");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_4", true);

	nb_line_deleted_tPostgresqlOutput_4=nb_line_deleted_tPostgresqlOutput_4+ deletedCount_tPostgresqlOutput_4;
	nb_line_update_tPostgresqlOutput_4=nb_line_update_tPostgresqlOutput_4 + updatedCount_tPostgresqlOutput_4;
	nb_line_inserted_tPostgresqlOutput_4=nb_line_inserted_tPostgresqlOutput_4 + insertedCount_tPostgresqlOutput_4;
	nb_line_rejected_tPostgresqlOutput_4=nb_line_rejected_tPostgresqlOutput_4 + rejectedCount_tPostgresqlOutput_4;
	
        globalMap.put("tPostgresqlOutput_4_NB_LINE",nb_line_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_4);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputNames"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_4", true);
end_Hash.put("tPostgresqlOutput_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tWarn_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tPostgresqlCommit_1Process(globalMap);



/**
 * [tPostgresqlOutput_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_4 = null;
                if ((pstmtToClose_tPostgresqlOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_4")) != null) {
                    pstmtToClose_tPostgresqlOutput_4.close();
                }
    }
 



/**
 * [tPostgresqlOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Starting refresh of materialized views","", "");
	tLogCatcher_2.addMessage("tWarn", "tWarn_1", 3, "Starting refresh of materialized views", 42);
	tLogCatcher_2Process(globalMap);
	globalMap.put("tWarn_1_WARN_MESSAGES", "Starting refresh of materialized views"); 
	globalMap.put("tWarn_1_WARN_PRIORITY", 3);
	globalMap.put("tWarn_1_WARN_CODE", 42);
	
} catch (Exception e_tWarn_1) {
	logIgnoredError(String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1), e_tWarn_1);
}


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_end ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	

public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

	try {
				tLogCatcher_2.addMessage("tDie", "tDie_1", 5, "Pre-run of warehouse has failed", 4);
				tLogCatcher_2Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Pre-run of warehouse has failed");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Pre-run of warehouse has failed");
	globalMap.put("tDie_1_DIE_MESSAGES", "Pre-run of warehouse has failed");
	
	} catch (Exception | Error e_tDie_1) {
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	
	System.exit(4);

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlCommit_1", false);
		start_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlCommit_1";

	
		int tos_count_tPostgresqlCommit_1 = 0;
		

 



/**
 * [tPostgresqlCommit_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

	java.sql.Connection conn_tPostgresqlCommit_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	if(conn_tPostgresqlCommit_1 != null && !conn_tPostgresqlCommit_1.isClosed())
	{
	
			
			conn_tPostgresqlCommit_1.commit();
			
	
	}

 


	tos_count_tPostgresqlCommit_1++;

/**
 * [tPostgresqlCommit_1 main ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 

ok_Hash.put("tPostgresqlCommit_1", true);
end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());




/**
 * [tPostgresqlCommit_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlCommit_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tPostgresqlRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_1", false);
		start_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_1";

	
		int tos_count_tPostgresqlRow_1 = 0;
		

	java.sql.Connection conn_tPostgresqlRow_1 = null;
	String query_tPostgresqlRow_1 = "";
	boolean whetherReject_tPostgresqlRow_1 = false;
				conn_tPostgresqlRow_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
			
    resourceMap.put("conn_tPostgresqlRow_1", conn_tPostgresqlRow_1);
        java.sql.Statement stmt_tPostgresqlRow_1 = conn_tPostgresqlRow_1.createStatement();
        resourceMap.put("stmt_tPostgresqlRow_1", stmt_tPostgresqlRow_1);


 



/**
 * [tPostgresqlRow_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

query_tPostgresqlRow_1 = "REFRESH MATERIALIZED VIEW  addr_typ_pivot_vw;\nREFRESH MATERIALIZED VIEW  ent_name_pivot_vw;\nREFRESH MATERIALIZED VIEW"
+"  ent_addr_pivot_vw;";
whetherReject_tPostgresqlRow_1 = false;
globalMap.put("tPostgresqlRow_1_QUERY",query_tPostgresqlRow_1);
try {
		stmt_tPostgresqlRow_1.execute(query_tPostgresqlRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_1) {
		
	}
	

 


	tos_count_tPostgresqlRow_1++;

/**
 * [tPostgresqlRow_1 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

 



/**
 * [tPostgresqlRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

 



/**
 * [tPostgresqlRow_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

	
        stmt_tPostgresqlRow_1.close();
        resourceMap.remove("stmt_tPostgresqlRow_1");
    resourceMap.put("statementClosed_tPostgresqlRow_1", true);
    resourceMap.put("finish_tPostgresqlRow_1", true);
 

ok_Hash.put("tPostgresqlRow_1", true);
end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());




/**
 * [tPostgresqlRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tDBCommit_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

    if (resourceMap.get("statementClosed_tPostgresqlRow_1") == null) {
            java.sql.Statement stmtToClose_tPostgresqlRow_1 = null;
            if ((stmtToClose_tPostgresqlRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tPostgresqlRow_1")) != null) {
                stmtToClose_tPostgresqlRow_1.close();
            }
    }
 



/**
 * [tPostgresqlRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_1", false);
		start_Hash.put("tDBCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_1";

	
		int tos_count_tDBCommit_1 = 0;
		

 



/**
 * [tDBCommit_1 begin ] stop
 */
	
	/**
	 * [tDBCommit_1 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

	java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	if(conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed())
	{
	
		try{
	
			
			conn_tDBCommit_1.commit();
			
	
		}finally{
			
			conn_tDBCommit_1.close();
			
	    }
	
	}

 


	tos_count_tDBCommit_1++;

/**
 * [tDBCommit_1 main ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_1 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 

ok_Hash.put("tDBCommit_1", true);
end_Hash.put("tDBCommit_1", System.currentTimeMillis());




/**
 * [tDBCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_PreRun = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_PreRun = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object name_id;

				public Object getName_id () {
					return this.name_id;
				}
				
			    public Object cd_id;

				public Object getCd_id () {
					return this.cd_id;
				}
				
			    public Double efft_vrsn_seq_id;

				public Double getEfft_vrsn_seq_id () {
					return this.efft_vrsn_seq_id;
				}
				
			    public Double obslt_vrsn_seq_id;

				public Double getObslt_vrsn_seq_id () {
					return this.obslt_vrsn_seq_id;
				}
				
			    public String lang_cs;

				public String getLang_cs () {
					return this.lang_cs;
				}
				
			    public String val;

				public String getVal () {
					return this.val;
				}
				
			    public String phon_cs;

				public String getPhon_cs () {
					return this.phon_cs;
				}
				
			    public Object phon_alg_id;

				public Object getPhon_alg_id () {
					return this.phon_alg_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.cd_id == null) ? 0 : this.cd_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.cd_id == null) {
							if (other.cd_id != null)
								return false;
						
						} else if (!this.cd_id.equals(other.cd_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.name_id = this.name_id;
	            other.cd_id = this.cd_id;
	            other.efft_vrsn_seq_id = this.efft_vrsn_seq_id;
	            other.obslt_vrsn_seq_id = this.obslt_vrsn_seq_id;
	            other.lang_cs = this.lang_cs;
	            other.val = this.val;
	            other.phon_cs = this.phon_cs;
	            other.phon_alg_id = this.phon_alg_id;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.cd_id = this.cd_id;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_PreRun) {

        	try {

        		int length = 0;
		
						this.cd_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.cd_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.name_id = (Object) ois.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.efft_vrsn_seq_id = null;
           				} else {
           			    	this.efft_vrsn_seq_id = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.obslt_vrsn_seq_id = null;
           				} else {
           			    	this.obslt_vrsn_seq_id = dis.readDouble();
           				}
					
						this.lang_cs = readString(dis,ois);
					
						this.val = readString(dis,ois);
					
						this.phon_cs = readString(dis,ois);
					
       			    	this.phon_alg_id = (Object) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.name_id);
					
						if(this.efft_vrsn_seq_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.efft_vrsn_seq_id);
		            	}
					
						if(this.obslt_vrsn_seq_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.obslt_vrsn_seq_id);
		            	}
					
						writeString(this.lang_cs, dos, oos);
					
						writeString(this.val, dos, oos);
					
						writeString(this.phon_cs, dos, oos);
					
       			    	oos.writeObject(this.phon_alg_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name_id="+String.valueOf(name_id));
		sb.append(",cd_id="+String.valueOf(cd_id));
		sb.append(",efft_vrsn_seq_id="+String.valueOf(efft_vrsn_seq_id));
		sb.append(",obslt_vrsn_seq_id="+String.valueOf(obslt_vrsn_seq_id));
		sb.append(",lang_cs="+lang_cs);
		sb.append(",val="+val);
		sb.append(",phon_cs="+phon_cs);
		sb.append(",phon_alg_id="+String.valueOf(phon_alg_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.cd_id, other.cd_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tPostgresqlInput_5 - inputs:(after_tPostgresqlInput_1) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row7) outputs:(outputCodes)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_5", false);
		start_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_5";

	
		int tos_count_tPostgresqlInput_5 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_5 = 0;
		    java.sql.Connection conn_tPostgresqlInput_5 = null;
		        conn_tPostgresqlInput_5 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_5 = conn_tPostgresqlInput_5.createStatement();

		    String dbquery_tPostgresqlInput_5 = "select * from cd_name_tbl where lang_cs = 'en' and obslt_vrsn_seq_id is null";
			

            	globalMap.put("tPostgresqlInput_5_QUERY",dbquery_tPostgresqlInput_5);
		    java.sql.ResultSet rs_tPostgresqlInput_5 = null;

		    try {
		    	rs_tPostgresqlInput_5 = stmt_tPostgresqlInput_5.executeQuery(dbquery_tPostgresqlInput_5);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_5 = rs_tPostgresqlInput_5.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_5 = rsmd_tPostgresqlInput_5.getColumnCount();

		    String tmpContent_tPostgresqlInput_5 = null;
		    
		    
		    while (rs_tPostgresqlInput_5.next()) {
		        nb_line_tPostgresqlInput_5++;
		        
							if(colQtyInRs_tPostgresqlInput_5 < 1) {
								row7.name_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_5.getObject(1) != null) {
                row7.name_id = rs_tPostgresqlInput_5.getObject(1);
            } else {
                    row7.name_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 2) {
								row7.cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_5.getObject(2) != null) {
                row7.cd_id = rs_tPostgresqlInput_5.getObject(2);
            } else {
                    row7.cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 3) {
								row7.efft_vrsn_seq_id = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_5.getObject(3) != null) {
                row7.efft_vrsn_seq_id = rs_tPostgresqlInput_5.getDouble(3);
            } else {
                    row7.efft_vrsn_seq_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 4) {
								row7.obslt_vrsn_seq_id = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_5.getObject(4) != null) {
                row7.obslt_vrsn_seq_id = rs_tPostgresqlInput_5.getDouble(4);
            } else {
                    row7.obslt_vrsn_seq_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 5) {
								row7.lang_cs = null;
							} else {
	                         		
        	row7.lang_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 5, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 6) {
								row7.val = null;
							} else {
	                         		
        	row7.val = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 6, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 7) {
								row7.phon_cs = null;
							} else {
	                         		
        	row7.phon_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 7, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 8) {
								row7.phon_alg_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_5.getObject(8) != null) {
                row7.phon_alg_id = rs_tPostgresqlInput_5.getObject(8);
            } else {
                    row7.phon_alg_id = null;
            }
		                    }
					


 



/**
 * [tPostgresqlInput_5 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_5 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 


	tos_count_tPostgresqlInput_5++;

/**
 * [tPostgresqlInput_5 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 



/**
 * [tPostgresqlInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.name_id = row7.name_id;
				
				row7_HashRow.cd_id = row7.cd_id;
				
				row7_HashRow.efft_vrsn_seq_id = row7.efft_vrsn_seq_id;
				
				row7_HashRow.obslt_vrsn_seq_id = row7.obslt_vrsn_seq_id;
				
				row7_HashRow.lang_cs = row7.lang_cs;
				
				row7_HashRow.val = row7.val;
				
				row7_HashRow.phon_cs = row7.phon_cs;
				
				row7_HashRow.phon_alg_id = row7.phon_alg_id;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 



/**
 * [tPostgresqlInput_5 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_5 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

	}
}finally{
	if (rs_tPostgresqlInput_5 != null) {
		rs_tPostgresqlInput_5.close();
	}
	if (stmt_tPostgresqlInput_5 != null) {
		stmt_tPostgresqlInput_5.close();
	}
}
globalMap.put("tPostgresqlInput_5_NB_LINE",nb_line_tPostgresqlInput_5);
 

ok_Hash.put("tPostgresqlInput_5", true);
end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());




/**
 * [tPostgresqlInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

tHash_Lookup_row7.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_5 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 



/**
 * [tPostgresqlInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_PreRun = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_PreRun = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_PreRun.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_PreRun.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_PreRun = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_PreRun, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_PreRun) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
		java.io.PrintStream consoleOut_tLogRow_3 = null;	

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tLogCatcher_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_2", false);
		start_Hash.put("tLogCatcher_2", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_2";

	
		int tos_count_tLogCatcher_2 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_2.getMessages()) {
		row9.type = lcm.getType();
		row9.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row9.priority = lcm.getPriority();
		row9.message = lcm.getMessage();
		row9.code = lcm.getCode();
		
		row9.moment = java.util.Calendar.getInstance().getTime();
	
    	row9.pid = pid;
		row9.root_pid = rootPid;
		row9.father_pid = fatherPid;
	
    	row9.project = projectName;
    	row9.job = jobName;
    	row9.context = contextStr;
    		
 



/**
 * [tLogCatcher_2 begin ] stop
 */
	
	/**
	 * [tLogCatcher_2 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_2";

	

 


	tos_count_tLogCatcher_2++;

/**
 * [tLogCatcher_2 main ] stop
 */
	
	/**
	 * [tLogCatcher_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_2";

	

 



/**
 * [tLogCatcher_2 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(row9.moment != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
								FormatterUtils.format_Date(row9.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row9.pid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row9.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row9.root_pid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row9.root_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row9.father_pid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row9.father_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row9.project != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row9.project)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row9.job != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row9.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row9.context != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row9.context)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row9.priority != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row9.priority)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row9.type != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row9.type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row9.origin != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row9.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row9.message != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row9.message)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row9.code != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row9.code)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_2";

	

 



/**
 * [tLogCatcher_2 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_2 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_2";

	
	}
} catch (Exception e_tLogCatcher_2) {
	logIgnoredError(String.format("tLogCatcher_2 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_2), e_tLogCatcher_2);
}

 

ok_Hash.put("tLogCatcher_2", true);
end_Hash.put("tLogCatcher_2", System.currentTimeMillis());




/**
 * [tLogCatcher_2 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_2 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_2";

	

 



/**
 * [tLogCatcher_2 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Production";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Warehouse_PreRun Warehouse_PreRunClass = new Warehouse_PreRun();

        int exitCode = Warehouse_PreRunClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Warehouse_PreRun.class.getClassLoader().getResourceAsStream("openiz/warehouse_prerun_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Warehouse_PreRun.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("dbName", "id_String");
				
                context.dbName=(String) context.getProperty("dbName");
				    context.setContextType("dbPassword", "id_String");
				
                context.dbPassword=(String) context.getProperty("dbPassword");
				    context.setContextType("dbPort", "id_String");
				
                context.dbPort=(String) context.getProperty("dbPort");
				    context.setContextType("dbServer", "id_String");
				
                context.dbServer=(String) context.getProperty("dbServer");
				    context.setContextType("dbUser", "id_String");
				
                context.dbUser=(String) context.getProperty("dbUser");
				    context.setContextType("dwName", "id_String");
				
                context.dwName=(String) context.getProperty("dwName");
				    context.setContextType("dwPassword", "id_String");
				
                context.dwPassword=(String) context.getProperty("dwPassword");
				    context.setContextType("dwPort", "id_String");
				
                context.dwPort=(String) context.getProperty("dwPort");
				    context.setContextType("dwServer", "id_String");
				
                context.dwServer=(String) context.getProperty("dwServer");
				    context.setContextType("dwUser", "id_String");
				
                context.dwUser=(String) context.getProperty("dwUser");
				    context.setContextType("dwTemplate", "id_String");
				
                context.dwTemplate=(String) context.getProperty("dwTemplate");
				    context.setContextType("dwWorking", "id_String");
				
                context.dwWorking=(String) context.getProperty("dwWorking");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("dbName")) {
                context.dbName = (String) parentContextMap.get("dbName");
            }if (parentContextMap.containsKey("dbPassword")) {
                context.dbPassword = (String) parentContextMap.get("dbPassword");
            }if (parentContextMap.containsKey("dbPort")) {
                context.dbPort = (String) parentContextMap.get("dbPort");
            }if (parentContextMap.containsKey("dbServer")) {
                context.dbServer = (String) parentContextMap.get("dbServer");
            }if (parentContextMap.containsKey("dbUser")) {
                context.dbUser = (String) parentContextMap.get("dbUser");
            }if (parentContextMap.containsKey("dwName")) {
                context.dwName = (String) parentContextMap.get("dwName");
            }if (parentContextMap.containsKey("dwPassword")) {
                context.dwPassword = (String) parentContextMap.get("dwPassword");
            }if (parentContextMap.containsKey("dwPort")) {
                context.dwPort = (String) parentContextMap.get("dwPort");
            }if (parentContextMap.containsKey("dwServer")) {
                context.dwServer = (String) parentContextMap.get("dwServer");
            }if (parentContextMap.containsKey("dwUser")) {
                context.dwUser = (String) parentContextMap.get("dwUser");
            }if (parentContextMap.containsKey("dwTemplate")) {
                context.dwTemplate = (String) parentContextMap.get("dwTemplate");
            }if (parentContextMap.containsKey("dwWorking")) {
                context.dwWorking = (String) parentContextMap.get("dwWorking");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tPostgresqlConnection_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostgresqlConnection_2) {
globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", -1);

e_tPostgresqlConnection_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Warehouse_PreRun");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tPostgresqlConnection_2", globalMap.get("conn_tPostgresqlConnection_2"));
            connections.put("conn_tPostgresqlConnection_1", globalMap.get("conn_tPostgresqlConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     221985 characters generated by Talend Open Studio for Data Integration 
 *     on the September 25, 2020 9:15:01 EDT AM
 ************************************************************************************************/