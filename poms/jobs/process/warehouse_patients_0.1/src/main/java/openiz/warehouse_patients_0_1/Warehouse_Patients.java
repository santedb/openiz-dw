// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package openiz.warehouse_patients_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Warehouse_Patients Purpose: Prepare Patients<br>
 * Description: Copies patients to the warehouse <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class Warehouse_Patients implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(dbName != null){
				
					this.setProperty("dbName", dbName.toString());
				
			}
			
			if(dbPassword != null){
				
					this.setProperty("dbPassword", dbPassword.toString());
				
			}
			
			if(dbPort != null){
				
					this.setProperty("dbPort", dbPort.toString());
				
			}
			
			if(dbServer != null){
				
					this.setProperty("dbServer", dbServer.toString());
				
			}
			
			if(dbUser != null){
				
					this.setProperty("dbUser", dbUser.toString());
				
			}
			
			if(dwName != null){
				
					this.setProperty("dwName", dwName.toString());
				
			}
			
			if(dwPassword != null){
				
					this.setProperty("dwPassword", dwPassword.toString());
				
			}
			
			if(dwPort != null){
				
					this.setProperty("dwPort", dwPort.toString());
				
			}
			
			if(dwServer != null){
				
					this.setProperty("dwServer", dwServer.toString());
				
			}
			
			if(dwUser != null){
				
					this.setProperty("dwUser", dwUser.toString());
				
			}
			
			if(dwTemplate != null){
				
					this.setProperty("dwTemplate", dwTemplate.toString());
				
			}
			
			if(dwWorking != null){
				
					this.setProperty("dwWorking", dwWorking.toString());
				
			}
			
		}

public String dbName;
public String getDbName(){
	return this.dbName;
}
public String dbPassword;
public String getDbPassword(){
	return this.dbPassword;
}
public String dbPort;
public String getDbPort(){
	return this.dbPort;
}
public String dbServer;
public String getDbServer(){
	return this.dbServer;
}
public String dbUser;
public String getDbUser(){
	return this.dbUser;
}
public String dwName;
public String getDwName(){
	return this.dwName;
}
public String dwPassword;
public String getDwPassword(){
	return this.dwPassword;
}
public String dwPort;
public String getDwPort(){
	return this.dwPort;
}
public String dwServer;
public String getDwServer(){
	return this.dwServer;
}
public String dwUser;
public String getDwUser(){
	return this.dwUser;
}
public String dwTemplate;
public String getDwTemplate(){
	return this.dwTemplate;
}
public String dwWorking;
public String getDwWorking(){
	return this.dwWorking;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Warehouse_Patients";
	private final String projectName = "OPENIZ";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Warehouse_Patients.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Warehouse_Patients.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostgresqlConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError9", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError3", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRollback_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRollback_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError2", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError4", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError5", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError6", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError11", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRollback_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPostgresqlConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_2", false);
		start_Hash.put("tPostgresqlConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_2";

	
		int tos_count_tPostgresqlConnection_2 = 0;
		


	
		String url_tPostgresqlConnection_2 = "jdbc:postgresql://"+context.dwServer+":"+context.dwPort+"/"+context.dwWorking; 
		String dbUser_tPostgresqlConnection_2 = context.dwUser;
		
		
			
	final String decryptedPassword_tPostgresqlConnection_2 = context.dwPassword; 
			String dbPwd_tPostgresqlConnection_2 = decryptedPassword_tPostgresqlConnection_2;
		
	java.sql.Connection conn_tPostgresqlConnection_2 = null;
	
		java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_2 =  java.sql.DriverManager.getDrivers();
    while (drivers_tPostgresqlConnection_2.hasMoreElements()) {
        java.sql.Driver d_tPostgresqlConnection_2 = drivers_tPostgresqlConnection_2.nextElement();
        java.util.List<String> driverList_tPostgresqlConnection_2 = java.util.Arrays.<String>asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver");
        if (driverList_tPostgresqlConnection_2.contains(d_tPostgresqlConnection_2.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tPostgresqlConnection_2);
                java.sql.DriverManager.registerDriver(d_tPostgresqlConnection_2);
            } catch (java.lang.Exception e_tPostgresqlConnection_2) {
            		//do nothing
            }
        }
    }
					String driverClass_tPostgresqlConnection_2 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tPostgresqlConnection_2);
		
				conn_tPostgresqlConnection_2 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_2,dbUser_tPostgresqlConnection_2,dbPwd_tPostgresqlConnection_2);

		globalMap.put("conn_tPostgresqlConnection_2", conn_tPostgresqlConnection_2);
	if (null != conn_tPostgresqlConnection_2) {
		
			conn_tPostgresqlConnection_2.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_2","public");

	globalMap.put("conn_" + "tPostgresqlConnection_2",conn_tPostgresqlConnection_2);

 



/**
 * [tPostgresqlConnection_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 


	tos_count_tPostgresqlConnection_2++;

/**
 * [tPostgresqlConnection_2 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 



/**
 * [tPostgresqlConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 



/**
 * [tPostgresqlConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 

ok_Hash.put("tPostgresqlConnection_2", true);
end_Hash.put("tPostgresqlConnection_2", System.currentTimeMillis());




/**
 * [tPostgresqlConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tPostgresqlConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 



/**
 * [tPostgresqlConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_1", false);
		start_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_1";

	
		int tos_count_tPostgresqlConnection_1 = 0;
		


	
		String url_tPostgresqlConnection_1 = "jdbc:postgresql://"+context.dbServer+":"+context.dbPort+"/"+context.dbName; 
		String dbUser_tPostgresqlConnection_1 = context.dbUser;
		
		
			
	final String decryptedPassword_tPostgresqlConnection_1 = context.dbPassword; 
			String dbPwd_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;
		
	java.sql.Connection conn_tPostgresqlConnection_1 = null;
	
		java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_1 =  java.sql.DriverManager.getDrivers();
    while (drivers_tPostgresqlConnection_1.hasMoreElements()) {
        java.sql.Driver d_tPostgresqlConnection_1 = drivers_tPostgresqlConnection_1.nextElement();
        java.util.List<String> driverList_tPostgresqlConnection_1 = java.util.Arrays.<String>asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver");
        if (driverList_tPostgresqlConnection_1.contains(d_tPostgresqlConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tPostgresqlConnection_1);
                java.sql.DriverManager.registerDriver(d_tPostgresqlConnection_1);
            } catch (java.lang.Exception e_tPostgresqlConnection_1) {
            		//do nothing
            }
        }
    }
					String driverClass_tPostgresqlConnection_1 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tPostgresqlConnection_1);
		
				conn_tPostgresqlConnection_1 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_1,dbUser_tPostgresqlConnection_1,dbPwd_tPostgresqlConnection_1);

		globalMap.put("conn_tPostgresqlConnection_1", conn_tPostgresqlConnection_1);
	if (null != conn_tPostgresqlConnection_1) {
		
			conn_tPostgresqlConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_1","public");

	globalMap.put("conn_" + "tPostgresqlConnection_1",conn_tPostgresqlConnection_1);

 



/**
 * [tPostgresqlConnection_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 


	tos_count_tPostgresqlConnection_1++;

/**
 * [tPostgresqlConnection_1 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 

ok_Hash.put("tPostgresqlConnection_1", true);
end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tPostgresqlRow_1Process(globalMap);



/**
 * [tPostgresqlConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_1", false);
		start_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_1";

	
		int tos_count_tPostgresqlRow_1 = 0;
		

	java.sql.Connection conn_tPostgresqlRow_1 = null;
	String query_tPostgresqlRow_1 = "";
	boolean whetherReject_tPostgresqlRow_1 = false;
				conn_tPostgresqlRow_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
			
    resourceMap.put("conn_tPostgresqlRow_1", conn_tPostgresqlRow_1);
        java.sql.Statement stmt_tPostgresqlRow_1 = conn_tPostgresqlRow_1.createStatement();
        resourceMap.put("stmt_tPostgresqlRow_1", stmt_tPostgresqlRow_1);


 



/**
 * [tPostgresqlRow_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

query_tPostgresqlRow_1 = "SET CONSTRAINTS ALL DEFERRED;\ntruncate ent_ext_tbl cascade;\ntruncate pvd_tbl cascade;\ntruncate usr_tbl cascade;\ntru"
+"ncate pat_tbl cascade;\ntruncate psn_tbl cascade;";
whetherReject_tPostgresqlRow_1 = false;
globalMap.put("tPostgresqlRow_1_QUERY",query_tPostgresqlRow_1);
try {
		stmt_tPostgresqlRow_1.execute(query_tPostgresqlRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_1) {
		
	}
	

 


	tos_count_tPostgresqlRow_1++;

/**
 * [tPostgresqlRow_1 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

 



/**
 * [tPostgresqlRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

 



/**
 * [tPostgresqlRow_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

	
        stmt_tPostgresqlRow_1.close();
        resourceMap.remove("stmt_tPostgresqlRow_1");
    resourceMap.put("statementClosed_tPostgresqlRow_1", true);
    resourceMap.put("finish_tPostgresqlRow_1", true);
 

ok_Hash.put("tPostgresqlRow_1", true);
end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());




/**
 * [tPostgresqlRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tPostgresqlInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

    if (resourceMap.get("statementClosed_tPostgresqlRow_1") == null) {
            java.sql.Statement stmtToClose_tPostgresqlRow_1 = null;
            if ((stmtToClose_tPostgresqlRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tPostgresqlRow_1")) != null) {
                stmtToClose_tPostgresqlRow_1.close();
            }
    }
 



/**
 * [tPostgresqlRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class outputFacilitiesStruct implements routines.system.IPersistableRow<outputFacilitiesStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public String sts_cs;

				public String getSts_cs () {
					return this.sts_cs;
				}
				
			    public String type_mnemonic;

				public String getType_mnemonic () {
					return this.type_mnemonic;
				}
				
			    public Object parent_id;

				public Object getParent_id () {
					return this.parent_id;
				}
				
			    public String tel;

				public String getTel () {
					return this.tel;
				}
				
			    public Integer trg_pop;

				public Integer getTrg_pop () {
					return this.trg_pop;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.fac_id == null) ? 0 : this.fac_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputFacilitiesStruct other = (outputFacilitiesStruct) obj;
		
						if (this.fac_id == null) {
							if (other.fac_id != null)
								return false;
						
						} else if (!this.fac_id.equals(other.fac_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputFacilitiesStruct other) {

		other.fac_id = this.fac_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            other.sts_cs = this.sts_cs;
	            other.type_mnemonic = this.type_mnemonic;
	            other.parent_id = this.parent_id;
	            other.tel = this.tel;
	            other.trg_pop = this.trg_pop;
	            
	}

	public void copyKeysDataTo(outputFacilitiesStruct other) {

		other.fac_id = this.fac_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.fac_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.sts_cs = readString(dis);
					
					this.type_mnemonic = readString(dis);
					
						this.parent_id = (Object) dis.readObject();
					
					this.tel = readString(dis);
					
						this.trg_pop = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// String
				
						writeString(this.sts_cs,dos);
					
					// String
				
						writeString(this.type_mnemonic,dos);
					
					// Object
				
       			    	dos.writeObject(this.parent_id);
					
					// String
				
						writeString(this.tel,dos);
					
					// Integer
				
						writeInteger(this.trg_pop,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fac_id="+String.valueOf(fac_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",sts_cs="+sts_cs);
		sb.append(",type_mnemonic="+type_mnemonic);
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",tel="+tel);
		sb.append(",trg_pop="+String.valueOf(trg_pop));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputFacilitiesStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.fac_id, other.fac_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public Object ent_vrsn_id;

				public Object getEnt_vrsn_id () {
					return this.ent_vrsn_id;
				}
				
			    public Object cls_cd_id;

				public Object getCls_cd_id () {
					return this.cls_cd_id;
				}
				
			    public Object dtr_cd_id;

				public Object getDtr_cd_id () {
					return this.dtr_cd_id;
				}
				
			    public Object tpl_id;

				public Object getTpl_id () {
					return this.tpl_id;
				}
				
			    public Double vrsn_seq_id;

				public Double getVrsn_seq_id () {
					return this.vrsn_seq_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public Object rplc_vrsn_id;

				public Object getRplc_vrsn_id () {
					return this.rplc_vrsn_id;
				}
				
			    public Object sts_cd_id;

				public Object getSts_cd_id () {
					return this.sts_cd_id;
				}
				
			    public Object typ_cd_id;

				public Object getTyp_cd_id () {
					return this.typ_cd_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public Object crt_usr_id;

				public Object getCrt_usr_id () {
					return this.crt_usr_id;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object obslt_usr_id;

				public Object getObslt_usr_id () {
					return this.obslt_usr_id;
				}
				
			    public String sts_cs;

				public String getSts_cs () {
					return this.sts_cs;
				}
				
			    public Boolean mob_ind;

				public Boolean getMob_ind () {
					return this.mob_ind;
				}
				
			    public Double lat;

				public Double getLat () {
					return this.lat;
				}
				
			    public Double lng;

				public Double getLng () {
					return this.lng;
				}
				
			    public Object parent_id;

				public Object getParent_id () {
					return this.parent_id;
				}
				
			    public String type_mnemonic;

				public String getType_mnemonic () {
					return this.type_mnemonic;
				}
				
			    public String tel_val;

				public String getTel_val () {
					return this.tel_val;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.ent_vrsn_id = (Object) dis.readObject();
					
						this.cls_cd_id = (Object) dis.readObject();
					
						this.dtr_cd_id = (Object) dis.readObject();
					
						this.tpl_id = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.vrsn_seq_id = null;
           				} else {
           			    	this.vrsn_seq_id = dis.readDouble();
           				}
					
						this.ent_id = (Object) dis.readObject();
					
						this.rplc_vrsn_id = (Object) dis.readObject();
					
						this.sts_cd_id = (Object) dis.readObject();
					
						this.typ_cd_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
						this.crt_usr_id = (Object) dis.readObject();
					
					this.obslt_utc = readDate(dis);
					
						this.obslt_usr_id = (Object) dis.readObject();
					
					this.sts_cs = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.mob_ind = null;
           				} else {
           			    	this.mob_ind = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
						this.parent_id = (Object) dis.readObject();
					
					this.type_mnemonic = readString(dis);
					
					this.tel_val = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.cls_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.dtr_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.tpl_id);
					
					// Double
				
						if(this.vrsn_seq_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.vrsn_seq_id);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// Object
				
       			    	dos.writeObject(this.rplc_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.sts_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.typ_cd_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.crt_usr_id);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.obslt_usr_id);
					
					// String
				
						writeString(this.sts_cs,dos);
					
					// Boolean
				
						if(this.mob_ind == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.mob_ind);
		            	}
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.parent_id);
					
					// String
				
						writeString(this.type_mnemonic,dos);
					
					// String
				
						writeString(this.tel_val,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_vrsn_id="+String.valueOf(ent_vrsn_id));
		sb.append(",cls_cd_id="+String.valueOf(cls_cd_id));
		sb.append(",dtr_cd_id="+String.valueOf(dtr_cd_id));
		sb.append(",tpl_id="+String.valueOf(tpl_id));
		sb.append(",vrsn_seq_id="+String.valueOf(vrsn_seq_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",rplc_vrsn_id="+String.valueOf(rplc_vrsn_id));
		sb.append(",sts_cd_id="+String.valueOf(sts_cd_id));
		sb.append(",typ_cd_id="+String.valueOf(typ_cd_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",crt_usr_id="+String.valueOf(crt_usr_id));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",obslt_usr_id="+String.valueOf(obslt_usr_id));
		sb.append(",sts_cs="+sts_cs);
		sb.append(",mob_ind="+String.valueOf(mob_ind));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",type_mnemonic="+type_mnemonic);
		sb.append(",tel_val="+tel_val);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_3Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_3Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public Object ent_vrsn_id;

				public Object getEnt_vrsn_id () {
					return this.ent_vrsn_id;
				}
				
			    public Object cls_cd_id;

				public Object getCls_cd_id () {
					return this.cls_cd_id;
				}
				
			    public Object dtr_cd_id;

				public Object getDtr_cd_id () {
					return this.dtr_cd_id;
				}
				
			    public Object tpl_id;

				public Object getTpl_id () {
					return this.tpl_id;
				}
				
			    public Double vrsn_seq_id;

				public Double getVrsn_seq_id () {
					return this.vrsn_seq_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public Object rplc_vrsn_id;

				public Object getRplc_vrsn_id () {
					return this.rplc_vrsn_id;
				}
				
			    public Object sts_cd_id;

				public Object getSts_cd_id () {
					return this.sts_cd_id;
				}
				
			    public Object typ_cd_id;

				public Object getTyp_cd_id () {
					return this.typ_cd_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public Object crt_usr_id;

				public Object getCrt_usr_id () {
					return this.crt_usr_id;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object obslt_usr_id;

				public Object getObslt_usr_id () {
					return this.obslt_usr_id;
				}
				
			    public String sts_cs;

				public String getSts_cs () {
					return this.sts_cs;
				}
				
			    public Boolean mob_ind;

				public Boolean getMob_ind () {
					return this.mob_ind;
				}
				
			    public Double lat;

				public Double getLat () {
					return this.lat;
				}
				
			    public Double lng;

				public Double getLng () {
					return this.lng;
				}
				
			    public Object parent_id;

				public Object getParent_id () {
					return this.parent_id;
				}
				
			    public String type_mnemonic;

				public String getType_mnemonic () {
					return this.type_mnemonic;
				}
				
			    public String tel_val;

				public String getTel_val () {
					return this.tel_val;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.ent_vrsn_id = (Object) dis.readObject();
					
						this.cls_cd_id = (Object) dis.readObject();
					
						this.dtr_cd_id = (Object) dis.readObject();
					
						this.tpl_id = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.vrsn_seq_id = null;
           				} else {
           			    	this.vrsn_seq_id = dis.readDouble();
           				}
					
						this.ent_id = (Object) dis.readObject();
					
						this.rplc_vrsn_id = (Object) dis.readObject();
					
						this.sts_cd_id = (Object) dis.readObject();
					
						this.typ_cd_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
						this.crt_usr_id = (Object) dis.readObject();
					
					this.obslt_utc = readDate(dis);
					
						this.obslt_usr_id = (Object) dis.readObject();
					
					this.sts_cs = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.mob_ind = null;
           				} else {
           			    	this.mob_ind = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
						this.parent_id = (Object) dis.readObject();
					
					this.type_mnemonic = readString(dis);
					
					this.tel_val = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.cls_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.dtr_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.tpl_id);
					
					// Double
				
						if(this.vrsn_seq_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.vrsn_seq_id);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// Object
				
       			    	dos.writeObject(this.rplc_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.sts_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.typ_cd_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.crt_usr_id);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.obslt_usr_id);
					
					// String
				
						writeString(this.sts_cs,dos);
					
					// Boolean
				
						if(this.mob_ind == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.mob_ind);
		            	}
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.parent_id);
					
					// String
				
						writeString(this.type_mnemonic,dos);
					
					// String
				
						writeString(this.tel_val,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_vrsn_id="+String.valueOf(ent_vrsn_id));
		sb.append(",cls_cd_id="+String.valueOf(cls_cd_id));
		sb.append(",dtr_cd_id="+String.valueOf(dtr_cd_id));
		sb.append(",tpl_id="+String.valueOf(tpl_id));
		sb.append(",vrsn_seq_id="+String.valueOf(vrsn_seq_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",rplc_vrsn_id="+String.valueOf(rplc_vrsn_id));
		sb.append(",sts_cd_id="+String.valueOf(sts_cd_id));
		sb.append(",typ_cd_id="+String.valueOf(typ_cd_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",crt_usr_id="+String.valueOf(crt_usr_id));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",obslt_usr_id="+String.valueOf(obslt_usr_id));
		sb.append(",sts_cs="+sts_cs);
		sb.append(",mob_ind="+String.valueOf(mob_ind));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",type_mnemonic="+type_mnemonic);
		sb.append(",tel_val="+tel_val);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_2Process(globalMap);
		tPostgresqlInput_4Process(globalMap);

		row12Struct row12 = new row12Struct();
outputFacilitiesStruct outputFacilities = new outputFacilitiesStruct();





	
	/**
	 * [tPostgresqlOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_2", false);
		start_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputFacilities" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_2 = 0;
		





String dbschema_tPostgresqlOutput_2 = null;
	dbschema_tPostgresqlOutput_2 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_2 = null;
if(dbschema_tPostgresqlOutput_2 == null || dbschema_tPostgresqlOutput_2.trim().length() == 0) {
	tableName_tPostgresqlOutput_2 = "fac_tbl";
} else {
	tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2 + "\".\"" + "fac_tbl";
}

        int updateKeyCount_tPostgresqlOutput_2 = 1;
        if(updateKeyCount_tPostgresqlOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_2 = 0;
int nb_line_update_tPostgresqlOutput_2 = 0;
int nb_line_inserted_tPostgresqlOutput_2 = 0;
int nb_line_deleted_tPostgresqlOutput_2 = 0;
int nb_line_rejected_tPostgresqlOutput_2 = 0;

int deletedCount_tPostgresqlOutput_2=0;
int updatedCount_tPostgresqlOutput_2=0;
int insertedCount_tPostgresqlOutput_2=0;
int rejectedCount_tPostgresqlOutput_2=0;

boolean whetherReject_tPostgresqlOutput_2 = false;

java.sql.Connection conn_tPostgresqlOutput_2 = null;
String dbUser_tPostgresqlOutput_2 = null;

	conn_tPostgresqlOutput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	



int count_tPostgresqlOutput_2=0;
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tPostgresqlOutput_2 + "\" WHERE \"fac_id\" = ?");
	    resourceMap.put("pstmt_tPostgresqlOutput_2", pstmt_tPostgresqlOutput_2);
	    String insert_tPostgresqlOutput_2 = "INSERT INTO \"" + tableName_tPostgresqlOutput_2 + "\" (\"trg_pop\",\"fac_id\",\"crt_etl_id\",\"upd_etl_id\",\"crt_utc\",\"upd_utc\",\"obslt_utc\",\"sts_cs\",\"type_mnemonic\",\"parent_id\",\"tel\") VALUES (?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.prepareStatement(insert_tPostgresqlOutput_2);
	    resourceMap.put("pstmtInsert_tPostgresqlOutput_2", pstmtInsert_tPostgresqlOutput_2);
	    String update_tPostgresqlOutput_2 = "UPDATE \"" + tableName_tPostgresqlOutput_2 + "\" SET \"trg_pop\" = ?,\"crt_etl_id\" = ?,\"upd_etl_id\" = ?,\"crt_utc\" = ?,\"upd_utc\" = ?,\"obslt_utc\" = ?,\"sts_cs\" = ?,\"type_mnemonic\" = ?,\"parent_id\" = ?,\"tel\" = ? WHERE \"fac_id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.prepareStatement(update_tPostgresqlOutput_2);
	    resourceMap.put("pstmtUpdate_tPostgresqlOutput_2", pstmtUpdate_tPostgresqlOutput_2);
	    

 



/**
 * [tPostgresqlOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
					globalMap.get( "tHash_Lookup_row17" ))
					;					
					
	
		tHash_Lookup_row17.initGet();
	

row17Struct row17HashKey = new row17Struct();
row17Struct row17Default = new row17Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
					globalMap.get( "tHash_Lookup_row11" ))
					;					
					
	

row11Struct row11HashKey = new row11Struct();
row11Struct row11Default = new row11Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputFacilitiesStruct outputFacilities_tmp = new outputFacilitiesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_3", false);
		start_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_3";

	
		int tos_count_tPostgresqlInput_3 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_3 = 0;
		    java.sql.Connection conn_tPostgresqlInput_3 = null;
		        conn_tPostgresqlInput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3.createStatement();

		    String dbquery_tPostgresqlInput_3 = "with parent_rel as (\n	select * from ent_rel_tbl where rel_typ_cd_id = 'bfcbb345-86db-43ba-b47e-e7411276ac7c' and obslt"
+"_vrsn_seq_id is null\n)\nselect plc_cur_vrsn_vw.*, parent.ent_id as parent_id, type.mnemonic as type_mnemonic, tel.tel_v"
+"al from plc_cur_vrsn_vw \nleft join cd_cur_vrsn_vw as type on (type.cd_id = plc_cur_vrsn_vw.typ_cd_id)\nleft join parent"
+"_rel on (plc_cur_vrsn_vw.ent_id = parent_rel.src_ent_id) \nleft join plc_cur_vrsn_vw as parent on (parent_rel.trg_ent_id"
+" = parent.ent_id)\nleft join ent_cur_tel_vw as tel on (tel.ent_id = plc_cur_vrsn_vw.ent_id)\nwhere\nplc_cur_vrsn_vw.cls_"
+"cd_id = 'ff34dfa7-c6d3-4f8b-bc9f-14bcdc13ba6c'\norder by parent_id, vrsn_seq_id"
;
			

            	globalMap.put("tPostgresqlInput_3_QUERY",dbquery_tPostgresqlInput_3);
		    java.sql.ResultSet rs_tPostgresqlInput_3 = null;

		    try {
		    	rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3.executeQuery(dbquery_tPostgresqlInput_3);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3.getColumnCount();

		    String tmpContent_tPostgresqlInput_3 = null;
		    
		    
		    while (rs_tPostgresqlInput_3.next()) {
		        nb_line_tPostgresqlInput_3++;
		        
							if(colQtyInRs_tPostgresqlInput_3 < 1) {
								row12.ent_vrsn_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(1) != null) {
                row12.ent_vrsn_id = rs_tPostgresqlInput_3.getObject(1);
            } else {
                    row12.ent_vrsn_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 2) {
								row12.cls_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(2) != null) {
                row12.cls_cd_id = rs_tPostgresqlInput_3.getObject(2);
            } else {
                    row12.cls_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 3) {
								row12.dtr_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(3) != null) {
                row12.dtr_cd_id = rs_tPostgresqlInput_3.getObject(3);
            } else {
                    row12.dtr_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 4) {
								row12.tpl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(4) != null) {
                row12.tpl_id = rs_tPostgresqlInput_3.getObject(4);
            } else {
                    row12.tpl_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 5) {
								row12.vrsn_seq_id = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_3.getObject(5) != null) {
                row12.vrsn_seq_id = rs_tPostgresqlInput_3.getDouble(5);
            } else {
                    row12.vrsn_seq_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 6) {
								row12.ent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(6) != null) {
                row12.ent_id = rs_tPostgresqlInput_3.getObject(6);
            } else {
                    row12.ent_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 7) {
								row12.rplc_vrsn_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(7) != null) {
                row12.rplc_vrsn_id = rs_tPostgresqlInput_3.getObject(7);
            } else {
                    row12.rplc_vrsn_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 8) {
								row12.sts_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(8) != null) {
                row12.sts_cd_id = rs_tPostgresqlInput_3.getObject(8);
            } else {
                    row12.sts_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 9) {
								row12.typ_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(9) != null) {
                row12.typ_cd_id = rs_tPostgresqlInput_3.getObject(9);
            } else {
                    row12.typ_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 10) {
								row12.crt_utc = null;
							} else {
										
			row12.crt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_3, 10);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 11) {
								row12.crt_usr_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(11) != null) {
                row12.crt_usr_id = rs_tPostgresqlInput_3.getObject(11);
            } else {
                    row12.crt_usr_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 12) {
								row12.obslt_utc = null;
							} else {
										
			row12.obslt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_3, 12);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 13) {
								row12.obslt_usr_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(13) != null) {
                row12.obslt_usr_id = rs_tPostgresqlInput_3.getObject(13);
            } else {
                    row12.obslt_usr_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 14) {
								row12.sts_cs = null;
							} else {
	                         		
        	row12.sts_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 14, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 15) {
								row12.mob_ind = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_3.getObject(15) != null) {
                row12.mob_ind = rs_tPostgresqlInput_3.getBoolean(15);
            } else {
                    row12.mob_ind = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 16) {
								row12.lat = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_3.getObject(16) != null) {
                row12.lat = rs_tPostgresqlInput_3.getDouble(16);
            } else {
                    row12.lat = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 17) {
								row12.lng = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_3.getObject(17) != null) {
                row12.lng = rs_tPostgresqlInput_3.getDouble(17);
            } else {
                    row12.lng = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 18) {
								row12.parent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(18) != null) {
                row12.parent_id = rs_tPostgresqlInput_3.getObject(18);
            } else {
                    row12.parent_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 19) {
								row12.type_mnemonic = null;
							} else {
	                         		
        	row12.type_mnemonic = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 19, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 20) {
								row12.tel_val = null;
							} else {
	                         		
        	row12.tel_val = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 20, false);
		                    }
					


 



/**
 * [tPostgresqlInput_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 


	tos_count_tPostgresqlInput_3++;

/**
 * [tPostgresqlInput_3 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row17" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow17 = false;
       		  	    	
       		  	    	
 							row17Struct row17ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row17.lookup( row17HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row17.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow17 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow17 = true;
			           		  	} // G 21
                    		  	
                    		

							row17Struct row17 = null;
                    		  	 
							

								while ((tHash_Lookup_row17 != null && tHash_Lookup_row17.hasNext()) || forceLooprow17) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row17'
									
                    		  	 
							   
                    		  	 
	       		  	    	row17Struct fromLookup_row17 = null;
							row17 = row17Default;
										 
							
								
								if(!forceLooprow17) { // G 46
								
							
								 
							
								
								fromLookup_row17 = tHash_Lookup_row17.next();

							

							if(fromLookup_row17 != null) {
								row17 = fromLookup_row17;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow17 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row11" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow11 = false;
       		  	    	
       		  	    	
 							row11Struct row11ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row11HashKey.ent_id = row12.ent_id ;
                        		    		

								
		                        	row11HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row11.lookup( row11HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row11 != null && tHash_Lookup_row11.getCount(row11HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row11' and it contains more one result from keys :  row11.ent_id = '" + row11HashKey.ent_id + "'");
								} // G 071
							

							row11Struct row11 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row11Struct fromLookup_row11 = null;
							row11 = row11Default;
										 
							
								 
							
							
								if (tHash_Lookup_row11 !=null && tHash_Lookup_row11.hasNext()) { // G 099
								
							
								
								fromLookup_row11 = tHash_Lookup_row11.next();

							
							
								} // G 099
							
							

							if(fromLookup_row11 != null) {
								row11 = fromLookup_row11;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

outputFacilities = null;


// # Output table : 'outputFacilities'
outputFacilities_tmp.fac_id = row12.ent_id ;
outputFacilities_tmp.crt_etl_id = row17.etl_id ;
outputFacilities_tmp.upd_etl_id = null;
outputFacilities_tmp.crt_utc = row12.crt_utc;
outputFacilities_tmp.upd_utc = null;
outputFacilities_tmp.obslt_utc = row12.obslt_utc;
outputFacilities_tmp.sts_cs = row12.sts_cs;
outputFacilities_tmp.type_mnemonic = row12.type_mnemonic;
outputFacilities_tmp.parent_id = row12.parent_id ;
outputFacilities_tmp.tel = row12.tel_val ;
outputFacilities_tmp.trg_pop = row11.trg_pop ;
outputFacilities = outputFacilities_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "outputFacilities"
if(outputFacilities != null) { 



	
	/**
	 * [tPostgresqlOutput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

			//outputFacilities
			//outputFacilities


			
				if(execStat){
					runStat.updateStatOnConnection("outputFacilities"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_2 = false;
                    if(outputFacilities.fac_id == null) {
pstmt_tPostgresqlOutput_2.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_2.setObject(1, outputFacilities.fac_id, java.sql.Types.OTHER);
}

            int checkCount_tPostgresqlOutput_2 = -1;
            try (java.sql.ResultSet rs_tPostgresqlOutput_2 = pstmt_tPostgresqlOutput_2.executeQuery()) {
                while(rs_tPostgresqlOutput_2.next()) {
                    checkCount_tPostgresqlOutput_2 = rs_tPostgresqlOutput_2.getInt(1);
                }
            }
            if(checkCount_tPostgresqlOutput_2 > 0) {
                        if(outputFacilities.trg_pop == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tPostgresqlOutput_2.setInt(1, outputFacilities.trg_pop);
}

                        if(outputFacilities.crt_etl_id == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(2, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_2.setObject(2, outputFacilities.crt_etl_id, java.sql.Types.OTHER);
}

                        if(outputFacilities.upd_etl_id == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(3, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_2.setObject(3, outputFacilities.upd_etl_id, java.sql.Types.OTHER);
}

                        if(outputFacilities.crt_utc != null) {
pstmtUpdate_tPostgresqlOutput_2.setTimestamp(4, new java.sql.Timestamp(outputFacilities.crt_utc.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_2.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(outputFacilities.upd_utc != null) {
pstmtUpdate_tPostgresqlOutput_2.setTimestamp(5, new java.sql.Timestamp(outputFacilities.upd_utc.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_2.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(outputFacilities.obslt_utc != null) {
pstmtUpdate_tPostgresqlOutput_2.setTimestamp(6, new java.sql.Timestamp(outputFacilities.obslt_utc.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_2.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(outputFacilities.sts_cs == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_2.setString(7, outputFacilities.sts_cs);
}

                        if(outputFacilities.type_mnemonic == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_2.setString(8, outputFacilities.type_mnemonic);
}

                        if(outputFacilities.parent_id == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(9, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_2.setObject(9, outputFacilities.parent_id, java.sql.Types.OTHER);
}

                        if(outputFacilities.tel == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_2.setString(10, outputFacilities.tel);
}

                        if(outputFacilities.fac_id == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(11 + count_tPostgresqlOutput_2, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_2.setObject(11 + count_tPostgresqlOutput_2, outputFacilities.fac_id);
}

                try {
					
                    updatedCount_tPostgresqlOutput_2 = updatedCount_tPostgresqlOutput_2 + pstmtUpdate_tPostgresqlOutput_2.executeUpdate();
                    nb_line_tPostgresqlOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tPostgresqlOutput_2 = true;
                        nb_line_tPostgresqlOutput_2++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(outputFacilities.trg_pop == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(1, java.sql.Types.INTEGER);
} else {pstmtInsert_tPostgresqlOutput_2.setInt(1, outputFacilities.trg_pop);
}

                        if(outputFacilities.fac_id == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(2, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_2.setObject(2, outputFacilities.fac_id, java.sql.Types.OTHER);
}

                        if(outputFacilities.crt_etl_id == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(3, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_2.setObject(3, outputFacilities.crt_etl_id, java.sql.Types.OTHER);
}

                        if(outputFacilities.upd_etl_id == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(4, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_2.setObject(4, outputFacilities.upd_etl_id, java.sql.Types.OTHER);
}

                        if(outputFacilities.crt_utc != null) {
pstmtInsert_tPostgresqlOutput_2.setTimestamp(5, new java.sql.Timestamp(outputFacilities.crt_utc.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_2.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(outputFacilities.upd_utc != null) {
pstmtInsert_tPostgresqlOutput_2.setTimestamp(6, new java.sql.Timestamp(outputFacilities.upd_utc.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_2.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(outputFacilities.obslt_utc != null) {
pstmtInsert_tPostgresqlOutput_2.setTimestamp(7, new java.sql.Timestamp(outputFacilities.obslt_utc.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_2.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(outputFacilities.sts_cs == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_2.setString(8, outputFacilities.sts_cs);
}

                        if(outputFacilities.type_mnemonic == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_2.setString(9, outputFacilities.type_mnemonic);
}

                        if(outputFacilities.parent_id == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(10, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_2.setObject(10, outputFacilities.parent_id, java.sql.Types.OTHER);
}

                        if(outputFacilities.tel == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_2.setString(11, outputFacilities.tel);
}

                try {
					
                    insertedCount_tPostgresqlOutput_2 = insertedCount_tPostgresqlOutput_2 + pstmtInsert_tPostgresqlOutput_2.executeUpdate();
                    nb_line_tPostgresqlOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tPostgresqlOutput_2 = true;
                        nb_line_tPostgresqlOutput_2++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tPostgresqlOutput_2) {
            }

 


	tos_count_tPostgresqlOutput_2++;

/**
 * [tPostgresqlOutput_2 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

 



/**
 * [tPostgresqlOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

 



/**
 * [tPostgresqlOutput_2 process_data_end ] stop
 */

} // End of branch "outputFacilities"



	
		} // close loop of lookup 'row17' // G_TM_M_043
	
	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

	}
}finally{
	if (rs_tPostgresqlInput_3 != null) {
		rs_tPostgresqlInput_3.close();
	}
	if (stmt_tPostgresqlInput_3 != null) {
		stmt_tPostgresqlInput_3.close();
	}
}
globalMap.put("tPostgresqlInput_3_NB_LINE",nb_line_tPostgresqlInput_3);
 

ok_Hash.put("tPostgresqlInput_3", true);
end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());




/**
 * [tPostgresqlInput_3 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row17 != null) {
						tHash_Lookup_row17.endGet();
					}
					globalMap.remove( "tHash_Lookup_row17" );

					
					
				
					if(tHash_Lookup_row11 != null) {
						tHash_Lookup_row11.endGet();
					}
					globalMap.remove( "tHash_Lookup_row11" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



        if(pstmtUpdate_tPostgresqlOutput_2 != null){
            pstmtUpdate_tPostgresqlOutput_2.close();
            resourceMap.remove("pstmtUpdate_tPostgresqlOutput_2");
        }
        if(pstmtInsert_tPostgresqlOutput_2 != null){
            pstmtInsert_tPostgresqlOutput_2.close();
            resourceMap.remove("pstmtInsert_tPostgresqlOutput_2");
        }
        if(pstmt_tPostgresqlOutput_2 != null) {
            pstmt_tPostgresqlOutput_2.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_2");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_2", true);

	nb_line_deleted_tPostgresqlOutput_2=nb_line_deleted_tPostgresqlOutput_2+ deletedCount_tPostgresqlOutput_2;
	nb_line_update_tPostgresqlOutput_2=nb_line_update_tPostgresqlOutput_2 + updatedCount_tPostgresqlOutput_2;
	nb_line_inserted_tPostgresqlOutput_2=nb_line_inserted_tPostgresqlOutput_2 + insertedCount_tPostgresqlOutput_2;
	nb_line_rejected_tPostgresqlOutput_2=nb_line_rejected_tPostgresqlOutput_2 + rejectedCount_tPostgresqlOutput_2;
	
        globalMap.put("tPostgresqlOutput_2_NB_LINE",nb_line_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_2);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputFacilities"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_2", true);
end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tPostgresqlInput_12Process(globalMap);



/**
 * [tPostgresqlOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row11"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row17"); 
				     			
				try{
					
	
	/**
	 * [tPostgresqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tPostgresqlOutput_2 = null;
                if ((pstmtUpdateToClose_tPostgresqlOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tPostgresqlOutput_2")) != null) {
                    pstmtUpdateToClose_tPostgresqlOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tPostgresqlOutput_2 = null;
                if ((pstmtInsertToClose_tPostgresqlOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tPostgresqlOutput_2")) != null) {
                    pstmtInsertToClose_tPostgresqlOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_2 = null;
                if ((pstmtToClose_tPostgresqlOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_2")) != null) {
                    pstmtToClose_tPostgresqlOutput_2.close();
                }
    }
 



/**
 * [tPostgresqlOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public Object parent_id;

				public Object getParent_id () {
					return this.parent_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.fac_id == null) ? 0 : this.fac_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.fac_id == null) {
							if (other.fac_id != null)
								return false;
						
						} else if (!this.fac_id.equals(other.fac_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.fac_id = this.fac_id;
	            other.parent_id = this.parent_id;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.fac_id = this.fac_id;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.fac_id = (Object) dis.readObject();
					
						this.parent_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// Object
				
       			    	dos.writeObject(this.parent_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fac_id="+String.valueOf(fac_id));
		sb.append(",parent_id="+String.valueOf(parent_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.fac_id, other.fac_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public Object parent_id;

				public Object getParent_id () {
					return this.parent_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.fac_id == null) ? 0 : this.fac_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.fac_id == null) {
							if (other.fac_id != null)
								return false;
						
						} else if (!this.fac_id.equals(other.fac_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.fac_id = this.fac_id;
	            other.parent_id = this.parent_id;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.fac_id = this.fac_id;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.fac_id = (Object) dis.readObject();
					
						this.parent_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// Object
				
       			    	dos.writeObject(this.parent_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fac_id="+String.valueOf(fac_id));
		sb.append(",parent_id="+String.valueOf(parent_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.fac_id, other.fac_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row4Struct row5 = row4;





	
	/**
	 * [tPostgresqlOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_8", false);
		start_Hash.put("tPostgresqlOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_8 = 0;
		





String dbschema_tPostgresqlOutput_8 = null;
	dbschema_tPostgresqlOutput_8 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_8 = null;
if(dbschema_tPostgresqlOutput_8 == null || dbschema_tPostgresqlOutput_8.trim().length() == 0) {
	tableName_tPostgresqlOutput_8 = "fac_tbl";
} else {
	tableName_tPostgresqlOutput_8 = dbschema_tPostgresqlOutput_8 + "\".\"" + "fac_tbl";
}

        int deleteKeyCount_tPostgresqlOutput_8 = 1;
        if(deleteKeyCount_tPostgresqlOutput_8 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_8 = 0;
int nb_line_update_tPostgresqlOutput_8 = 0;
int nb_line_inserted_tPostgresqlOutput_8 = 0;
int nb_line_deleted_tPostgresqlOutput_8 = 0;
int nb_line_rejected_tPostgresqlOutput_8 = 0;

int deletedCount_tPostgresqlOutput_8=0;
int updatedCount_tPostgresqlOutput_8=0;
int insertedCount_tPostgresqlOutput_8=0;
int rejectedCount_tPostgresqlOutput_8=0;

boolean whetherReject_tPostgresqlOutput_8 = false;

java.sql.Connection conn_tPostgresqlOutput_8 = null;
String dbUser_tPostgresqlOutput_8 = null;

	conn_tPostgresqlOutput_8 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_8 = 10000;
   int batchSizeCounter_tPostgresqlOutput_8=0;

int count_tPostgresqlOutput_8=0;
	    String delete_tPostgresqlOutput_8 = "DELETE FROM \"" + tableName_tPostgresqlOutput_8 + "\" WHERE \"fac_id\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_8 = conn_tPostgresqlOutput_8.prepareStatement(delete_tPostgresqlOutput_8);
	    resourceMap.put("pstmt_tPostgresqlOutput_8", pstmt_tPostgresqlOutput_8);
	    

 



/**
 * [tPostgresqlOutput_8 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;
                    
                    
                StringBuilder sbHeader_tLogRow_1 = new StringBuilder();
				
				sbHeader_tLogRow_1.append("fac_id");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("parent_id");
				
                   
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(sbHeader_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_12", false);
		start_Hash.put("tPostgresqlInput_12", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_12";

	
		int tos_count_tPostgresqlInput_12 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_12 = 0;
		    java.sql.Connection conn_tPostgresqlInput_12 = null;
		        conn_tPostgresqlInput_12 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_12 = conn_tPostgresqlInput_12.createStatement();

		    String dbquery_tPostgresqlInput_12 = "select fac_id, parent_id from fac_tbl where parent_id not in (select fac_id from fac_tbl)";
			

            	globalMap.put("tPostgresqlInput_12_QUERY",dbquery_tPostgresqlInput_12);
		    java.sql.ResultSet rs_tPostgresqlInput_12 = null;

		    try {
		    	rs_tPostgresqlInput_12 = stmt_tPostgresqlInput_12.executeQuery(dbquery_tPostgresqlInput_12);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_12 = rs_tPostgresqlInput_12.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_12 = rsmd_tPostgresqlInput_12.getColumnCount();

		    String tmpContent_tPostgresqlInput_12 = null;
		    
		    
		    while (rs_tPostgresqlInput_12.next()) {
		        nb_line_tPostgresqlInput_12++;
		        
							if(colQtyInRs_tPostgresqlInput_12 < 1) {
								row4.fac_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_12.getObject(1) != null) {
                row4.fac_id = rs_tPostgresqlInput_12.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_12 < 2) {
								row4.parent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_12.getObject(2) != null) {
                row4.parent_id = rs_tPostgresqlInput_12.getObject(2);
            } else {
                    row4.parent_id = null;
            }
		                    }
					


 



/**
 * [tPostgresqlInput_12 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_12 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

 


	tos_count_tPostgresqlInput_12++;

/**
 * [tPostgresqlInput_12 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

 



/**
 * [tPostgresqlInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row4.fac_id != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row4.fac_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row4.parent_id != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row4.parent_id)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row5 = row4;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tPostgresqlOutput_8 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_8";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_8 = false;
					
                    if(row5.fac_id == null) {
pstmt_tPostgresqlOutput_8.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_8.setObject(1, row5.fac_id);
}

    		pstmt_tPostgresqlOutput_8.addBatch();
			nb_line_tPostgresqlOutput_8++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_8++;
    		
    			if ((batchSize_tPostgresqlOutput_8 > 0) && (batchSize_tPostgresqlOutput_8 <= batchSizeCounter_tPostgresqlOutput_8)) {
                try {
						int countSum_tPostgresqlOutput_8 = 0;
						    
						for(int countEach_tPostgresqlOutput_8: pstmt_tPostgresqlOutput_8.executeBatch()) {
							countSum_tPostgresqlOutput_8 += (countEach_tPostgresqlOutput_8 < 0 ? 0 : countEach_tPostgresqlOutput_8);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_8 += countSum_tPostgresqlOutput_8;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_8 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_8){
				    	java.sql.SQLException ne_tPostgresqlOutput_8 = e_tPostgresqlOutput_8.getNextException(),sqle_tPostgresqlOutput_8=null;
				    	String errormessage_tPostgresqlOutput_8;
						if (ne_tPostgresqlOutput_8 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_8 = new java.sql.SQLException(e_tPostgresqlOutput_8.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_8.getMessage(), ne_tPostgresqlOutput_8.getSQLState(), ne_tPostgresqlOutput_8.getErrorCode(), ne_tPostgresqlOutput_8);
							errormessage_tPostgresqlOutput_8 = sqle_tPostgresqlOutput_8.getMessage();
						}else{
							errormessage_tPostgresqlOutput_8 = e_tPostgresqlOutput_8.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_8 = 0;
						for(int countEach_tPostgresqlOutput_8: e_tPostgresqlOutput_8.getUpdateCounts()) {
							countSum_tPostgresqlOutput_8 += (countEach_tPostgresqlOutput_8 < 0 ? 0 : countEach_tPostgresqlOutput_8);
						}
						
				    	    deletedCount_tPostgresqlOutput_8 += countSum_tPostgresqlOutput_8;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_8);
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_8++;

/**
 * [tPostgresqlOutput_8 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_8";

	

 



/**
 * [tPostgresqlOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_8";

	

 



/**
 * [tPostgresqlOutput_8 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

 



/**
 * [tPostgresqlInput_12 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_12 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

	}
}finally{
	if (rs_tPostgresqlInput_12 != null) {
		rs_tPostgresqlInput_12.close();
	}
	if (stmt_tPostgresqlInput_12 != null) {
		stmt_tPostgresqlInput_12.close();
	}
}
globalMap.put("tPostgresqlInput_12_NB_LINE",nb_line_tPostgresqlInput_12);
 

ok_Hash.put("tPostgresqlInput_12", true);
end_Hash.put("tPostgresqlInput_12", System.currentTimeMillis());




/**
 * [tPostgresqlInput_12 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_8 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_8";

	



	    try {
				int countSum_tPostgresqlOutput_8 = 0;
				if (pstmt_tPostgresqlOutput_8 != null && batchSizeCounter_tPostgresqlOutput_8 > 0) {
						
					for(int countEach_tPostgresqlOutput_8: pstmt_tPostgresqlOutput_8.executeBatch()) {
						countSum_tPostgresqlOutput_8 += (countEach_tPostgresqlOutput_8 < 0 ? 0 : countEach_tPostgresqlOutput_8);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_8 += countSum_tPostgresqlOutput_8;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_8){
	    	java.sql.SQLException ne_tPostgresqlOutput_8 = e_tPostgresqlOutput_8.getNextException(),sqle_tPostgresqlOutput_8=null;
	    	String errormessage_tPostgresqlOutput_8;
			if (ne_tPostgresqlOutput_8 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_8 = new java.sql.SQLException(e_tPostgresqlOutput_8.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_8.getMessage(), ne_tPostgresqlOutput_8.getSQLState(), ne_tPostgresqlOutput_8.getErrorCode(), ne_tPostgresqlOutput_8);
				errormessage_tPostgresqlOutput_8 = sqle_tPostgresqlOutput_8.getMessage();
			}else{
				errormessage_tPostgresqlOutput_8 = e_tPostgresqlOutput_8.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_8 = 0;
			for(int countEach_tPostgresqlOutput_8: e_tPostgresqlOutput_8.getUpdateCounts()) {
				countSum_tPostgresqlOutput_8 += (countEach_tPostgresqlOutput_8 < 0 ? 0 : countEach_tPostgresqlOutput_8);
			}
			
	    	    deletedCount_tPostgresqlOutput_8 += countSum_tPostgresqlOutput_8;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_8);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_8 != null) {
        		
            pstmt_tPostgresqlOutput_8.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_8");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_8", true);

	nb_line_deleted_tPostgresqlOutput_8=nb_line_deleted_tPostgresqlOutput_8+ deletedCount_tPostgresqlOutput_8;
	nb_line_update_tPostgresqlOutput_8=nb_line_update_tPostgresqlOutput_8 + updatedCount_tPostgresqlOutput_8;
	nb_line_inserted_tPostgresqlOutput_8=nb_line_inserted_tPostgresqlOutput_8 + insertedCount_tPostgresqlOutput_8;
	nb_line_rejected_tPostgresqlOutput_8=nb_line_rejected_tPostgresqlOutput_8 + rejectedCount_tPostgresqlOutput_8;
	
        globalMap.put("tPostgresqlOutput_8_NB_LINE",nb_line_tPostgresqlOutput_8);
        globalMap.put("tPostgresqlOutput_8_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_8);
        globalMap.put("tPostgresqlOutput_8_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_8);
        globalMap.put("tPostgresqlOutput_8_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_8);
        globalMap.put("tPostgresqlOutput_8_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_8);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_8", true);
end_Hash.put("tPostgresqlOutput_8", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_8 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlInput_12:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tWarn_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_12 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

 



/**
 * [tPostgresqlInput_12 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_8";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_8 = null;
                if ((pstmtToClose_tPostgresqlOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_8")) != null) {
                    pstmtToClose_tPostgresqlOutput_8.close();
                }
    }
 



/**
 * [tPostgresqlOutput_8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_12_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_6", false);
		start_Hash.put("tWarn_6", System.currentTimeMillis());
		
	
	currentComponent="tWarn_6";

	
		int tos_count_tWarn_6 = 0;
		

 



/**
 * [tWarn_6 begin ] stop
 */
	
	/**
	 * [tWarn_6 main ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_6", "", Thread.currentThread().getId() + "", "WARN","","Correcting Facility Hierarchy (missing parents)","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_6", 4, "Correcting Facility Hierarchy (missing parents)", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_6_WARN_MESSAGES", "Correcting Facility Hierarchy (missing parents)"); 
	globalMap.put("tWarn_6_WARN_PRIORITY", 4);
	globalMap.put("tWarn_6_WARN_CODE", 42);
	
} catch (Exception e_tWarn_6) {
	logIgnoredError(String.format("tWarn_6 - tWarn failed to log message due to internal error: %s", e_tWarn_6), e_tWarn_6);
}


 


	tos_count_tWarn_6++;

/**
 * [tWarn_6 main ] stop
 */
	
	/**
	 * [tWarn_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 



/**
 * [tWarn_6 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 



/**
 * [tWarn_6 process_data_end ] stop
 */
	
	/**
	 * [tWarn_6 end ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 

ok_Hash.put("tWarn_6", true);
end_Hash.put("tWarn_6", System.currentTimeMillis());




/**
 * [tWarn_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tWarn_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tDBRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_6 finally ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 



/**
 * [tWarn_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_6_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
				conn_tDBRow_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
			
    resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);


 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

query_tDBRow_1 = "REFRESH MATERIALIZED VIEW fac_vw;\n";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
		stmt_tDBRow_1.execute(query_tDBRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_1) {
		
	}
	

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

	
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
    resourceMap.put("finish_tDBRow_1", true);
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class outputFacilityParentStruct implements routines.system.IPersistableRow<outputFacilityParentStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public Object parent_id;

				public Object getParent_id () {
					return this.parent_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.fac_id == null) ? 0 : this.fac_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputFacilityParentStruct other = (outputFacilityParentStruct) obj;
		
						if (this.fac_id == null) {
							if (other.fac_id != null)
								return false;
						
						} else if (!this.fac_id.equals(other.fac_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputFacilityParentStruct other) {

		other.fac_id = this.fac_id;
	            other.parent_id = this.parent_id;
	            
	}

	public void copyKeysDataTo(outputFacilityParentStruct other) {

		other.fac_id = this.fac_id;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.fac_id = (Object) dis.readObject();
					
						this.parent_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// Object
				
       			    	dos.writeObject(this.parent_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fac_id="+String.valueOf(fac_id));
		sb.append(",parent_id="+String.valueOf(parent_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputFacilityParentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.fac_id, other.fac_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public String type_mnemonic;

				public String getType_mnemonic () {
					return this.type_mnemonic;
				}
				
			    public String loc_name;

				public String getLoc_name () {
					return this.loc_name;
				}
				
			    public Object parent_id;

				public Object getParent_id () {
					return this.parent_id;
				}
				
			    public String parent_name;

				public String getParent_name () {
					return this.parent_name;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.fac_id = (Object) dis.readObject();
					
					this.type_mnemonic = readString(dis);
					
					this.loc_name = readString(dis);
					
						this.parent_id = (Object) dis.readObject();
					
					this.parent_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// String
				
						writeString(this.type_mnemonic,dos);
					
					// String
				
						writeString(this.loc_name,dos);
					
					// Object
				
       			    	dos.writeObject(this.parent_id);
					
					// String
				
						writeString(this.parent_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fac_id="+String.valueOf(fac_id));
		sb.append(",type_mnemonic="+type_mnemonic);
		sb.append(",loc_name="+loc_name);
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",parent_name="+parent_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public String type_mnemonic;

				public String getType_mnemonic () {
					return this.type_mnemonic;
				}
				
			    public String loc_name;

				public String getLoc_name () {
					return this.loc_name;
				}
				
			    public Object parent_id;

				public Object getParent_id () {
					return this.parent_id;
				}
				
			    public String parent_name;

				public String getParent_name () {
					return this.parent_name;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.fac_id == null) ? 0 : this.fac_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.fac_id == null) {
							if (other.fac_id != null)
								return false;
						
						} else if (!this.fac_id.equals(other.fac_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.fac_id = this.fac_id;
	            other.type_mnemonic = this.type_mnemonic;
	            other.loc_name = this.loc_name;
	            other.parent_id = this.parent_id;
	            other.parent_name = this.parent_name;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.fac_id = this.fac_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.fac_id = (Object) dis.readObject();
					
					this.type_mnemonic = readString(dis);
					
					this.loc_name = readString(dis);
					
						this.parent_id = (Object) dis.readObject();
					
					this.parent_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// String
				
						writeString(this.type_mnemonic,dos);
					
					// String
				
						writeString(this.loc_name,dos);
					
					// Object
				
       			    	dos.writeObject(this.parent_id);
					
					// String
				
						writeString(this.parent_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fac_id="+String.valueOf(fac_id));
		sb.append(",type_mnemonic="+type_mnemonic);
		sb.append(",loc_name="+loc_name);
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",parent_name="+parent_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.fac_id, other.fac_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();
row13Struct row14 = row13;
outputFacilityParentStruct outputFacilityParent = new outputFacilityParentStruct();






	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputFacilityParent" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = "fac_tbl";
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + "fac_tbl";
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tDBOutput_3 = 10000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"parent_id\" = ? WHERE \"fac_id\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row14" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputFacilityParentStruct outputFacilityParent_tmp = new outputFacilityParentStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row13" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_4 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
		java.io.PrintStream consoleOut_tLogRow_4 = null;
                    
                    
                StringBuilder sbHeader_tLogRow_4 = new StringBuilder();
				
				sbHeader_tLogRow_4.append("fac_id");
				
    			sbHeader_tLogRow_4.append("\t");
				
				sbHeader_tLogRow_4.append("type_mnemonic");
				
    			sbHeader_tLogRow_4.append("\t");
				
				sbHeader_tLogRow_4.append("loc_name");
				
    			sbHeader_tLogRow_4.append("\t");
				
				sbHeader_tLogRow_4.append("parent_id");
				
    			sbHeader_tLogRow_4.append("\t");
				
				sbHeader_tLogRow_4.append("parent_name");
				
                   
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    consoleOut_tLogRow_4.println(sbHeader_tLogRow_4.toString());
                    consoleOut_tLogRow_4.flush();
                    	

 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
		        conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select fac_vw.fac_id, fac_vw.type_mnemonic, fac_vw.loc_name, parent.fac_id as parent_id, parent.loc_name as parent_name"
+"\nfrom \n	fac_vw \n	inner join fac_vw parent ON (case when fac_vw.type_mnemonic = 'Facility-Region' then parent.fac_id ="
+" '6130e1ce-3ed1-467f-8c33-2f96e47674f7' when fac_vw.type_mnemonic = 'Facility-District' then fac_vw.state = parent.state"
+" AND parent.type_mnemonic = 'Facility-Region' else fac_vw.state = parent.state AND parent.type_mnemonic = 'Facility-Dist"
+"rict' and fac_vw.county = parent.county end)\nwhere fac_vw.parent_id is null\nand fac_vw.type_mnemonic <>'Facility-Natio"
+"n'";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row13.fac_id = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(1) != null) {
                row13.fac_id = rs_tDBInput_2.getObject(1);
            } else {
                    row13.fac_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row13.type_mnemonic = null;
							} else {
	                         		
        	row13.type_mnemonic = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row13.loc_name = null;
							} else {
	                         		
        	row13.loc_name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row13.parent_id = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(4) != null) {
                row13.parent_id = rs_tDBInput_2.getObject(4);
            } else {
                    row13.parent_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row13.parent_name = null;
							} else {
	                         		
        	row13.parent_name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

			//row13
			//row13


			
				if(execStat){
					runStat.updateStatOnConnection("row13"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_4 = new StringBuilder();




   				
	    		if(row13.fac_id != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row13.fac_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row13.type_mnemonic != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row13.type_mnemonic)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row13.loc_name != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row13.loc_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row13.parent_id != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row13.parent_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row13.parent_name != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row13.parent_name)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    consoleOut_tLogRow_4.println(strBuffer_tLogRow_4.toString());
                    consoleOut_tLogRow_4.flush();
                    nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 
     row14 = row13;


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row14
			//row14


			
				if(execStat){
					runStat.updateStatOnConnection("row14"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

outputFacilityParent = null;


// # Output table : 'outputFacilityParent'
outputFacilityParent_tmp.fac_id = row14.fac_id;
outputFacilityParent_tmp.parent_id = row14.parent_id;
outputFacilityParent = outputFacilityParent_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "outputFacilityParent"
if(outputFacilityParent != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

			//outputFacilityParent
			//outputFacilityParent


			
				if(execStat){
					runStat.updateStatOnConnection("outputFacilityParent"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_3 = false;
                    if(outputFacilityParent.parent_id == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_3.setObject(1, outputFacilityParent.parent_id);
}

                    if(outputFacilityParent.fac_id == null) {
pstmt_tDBOutput_3.setNull(2 + count_tDBOutput_3, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_3.setObject(2 + count_tDBOutput_3, outputFacilityParent.fac_id);
}


    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "outputFacilityParent"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row13"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row14"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
						
				}
		    	
		    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    	int countSum_tDBOutput_3 = 0;
			for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
				countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
			}
			
	    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	
	    	System.err.println(errormessage_tDBOutput_3);
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputFacilityParent"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class outputFacilityIdStruct implements routines.system.IPersistableRow<outputFacilityIdStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public String nsid;

				public String getNsid () {
					return this.nsid;
				}
				
			    public String ext_id;

				public String getExt_id () {
					return this.ext_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.fac_id == null) ? 0 : this.fac_id.hashCode());
					
						result = prime * result + ((this.nsid == null) ? 0 : this.nsid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputFacilityIdStruct other = (outputFacilityIdStruct) obj;
		
						if (this.fac_id == null) {
							if (other.fac_id != null)
								return false;
						
						} else if (!this.fac_id.equals(other.fac_id))
						
							return false;
					
						if (this.nsid == null) {
							if (other.nsid != null)
								return false;
						
						} else if (!this.nsid.equals(other.nsid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputFacilityIdStruct other) {

		other.fac_id = this.fac_id;
	            other.nsid = this.nsid;
	            other.ext_id = this.ext_id;
	            
	}

	public void copyKeysDataTo(outputFacilityIdStruct other) {

		other.fac_id = this.fac_id;
	            	other.nsid = this.nsid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.fac_id = (Object) dis.readObject();
					
					this.nsid = readString(dis);
					
					this.ext_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// String
				
						writeString(this.nsid,dos);
					
					// String
				
						writeString(this.ext_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fac_id="+String.valueOf(fac_id));
		sb.append(",nsid="+nsid);
		sb.append(",ext_id="+ext_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputFacilityIdStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.fac_id, other.fac_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.nsid, other.nsid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public String nsid;

				public String getNsid () {
					return this.nsid;
				}
				
			    public String id_val;

				public String getId_val () {
					return this.id_val;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.ent_id = (Object) dis.readObject();
					
					this.nsid = readString(dis);
					
					this.id_val = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// String
				
						writeString(this.nsid,dos);
					
					// String
				
						writeString(this.id_val,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_id="+String.valueOf(ent_id));
		sb.append(",nsid="+nsid);
		sb.append(",id_val="+id_val);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();
outputFacilityIdStruct outputFacilityId = new outputFacilityIdStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputFacilityId" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = "fac_id_tbl";
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + "fac_id_tbl";
}

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
            int rsTruncCountNumber_tDBOutput_2 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_2 = stmtTruncCount_tDBOutput_2.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_2 + "\"")) {
                    if(rsTruncCount_tDBOutput_2.next()) {
                        rsTruncCountNumber_tDBOutput_2 = rsTruncCount_tDBOutput_2.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                stmtTrunc_tDBOutput_2.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_2 + "\"");
                deletedCount_tDBOutput_2 += rsTruncCountNumber_tDBOutput_2;
            }
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"fac_id\",\"nsid\",\"ext_id\") VALUES (?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row22" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputFacilityIdStruct outputFacilityId_tmp = new outputFacilityIdStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
		        conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT DISTINCT ENT_ID_TBL.ENT_ID, ASGN_AUT_TBL.NSID, FIRST(ENT_ID_TBL.ID_VAL) AS ID_VAL\nFROM \n	ENT_ID_TBL\n	INNER JO"
+"IN ASGN_AUT_TBL USING (AUT_ID)\nWHERE\n    OBSLT_VRSN_SEQ_ID IS NULL\n	AND ENT_ID IN (SELECT ENT_ID FROM ENT_TBL WHERE C"
+"LS_CD_ID = 'ff34dfa7-c6d3-4f8b-bc9f-14bcdc13ba6c')\nGROUP BY ENT_ID_TBL.ENT_ID, ASGN_AUT_TBL.NSID\n";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row22.ent_id = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(1) != null) {
                row22.ent_id = rs_tDBInput_1.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row22.nsid = null;
							} else {
	                         		
        	row22.nsid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row22.id_val = null;
							} else {
	                         		
        	row22.id_val = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

			//row22
			//row22


			
				if(execStat){
					runStat.updateStatOnConnection("row22"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

outputFacilityId = null;


// # Output table : 'outputFacilityId'
outputFacilityId_tmp.fac_id = row22.ent_id ;
outputFacilityId_tmp.nsid = row22.nsid;
outputFacilityId_tmp.ext_id = row22.id_val ;
outputFacilityId = outputFacilityId_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "outputFacilityId"
if(outputFacilityId != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

			//outputFacilityId
			//outputFacilityId


			
				if(execStat){
					runStat.updateStatOnConnection("outputFacilityId"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_2 = false;
                    if(outputFacilityId.fac_id == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_2.setObject(1, outputFacilityId.fac_id, java.sql.Types.OTHER);
}

                    if(outputFacilityId.nsid == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, outputFacilityId.nsid);
}

                    if(outputFacilityId.ext_id == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, outputFacilityId.ext_id);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "outputFacilityId"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row22"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputFacilityId"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tWarn_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Transforming Persons","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 3, "Transforming Persons", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_1_WARN_MESSAGES", "Transforming Persons"); 
	globalMap.put("tWarn_1_WARN_PRIORITY", 3);
	globalMap.put("tWarn_1_WARN_CODE", 42);
	
} catch (Exception e_tWarn_1) {
	logIgnoredError(String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1), e_tWarn_1);
}


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_end ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tPostgresqlInput_9Process(globalMap);



/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	


public static class outputPersonsStruct implements routines.system.IPersistableRow<outputPersonsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object psn_id;

				public Object getPsn_id () {
					return this.psn_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public String sts_cs;

				public String getSts_cs () {
					return this.sts_cs;
				}
				
			    public java.util.Date dob;

				public java.util.Date getDob () {
					return this.dob;
				}
				
			    public String alt_id;

				public String getAlt_id () {
					return this.alt_id;
				}
				
			    public String alt_id_type;

				public String getAlt_id_type () {
					return this.alt_id_type;
				}
				
			    public String tel;

				public String getTel () {
					return this.tel;
				}
				
			    public Object birthplace;

				public Object getBirthplace () {
					return this.birthplace;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.psn_id == null) ? 0 : this.psn_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputPersonsStruct other = (outputPersonsStruct) obj;
		
						if (this.psn_id == null) {
							if (other.psn_id != null)
								return false;
						
						} else if (!this.psn_id.equals(other.psn_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputPersonsStruct other) {

		other.psn_id = this.psn_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            other.sts_cs = this.sts_cs;
	            other.dob = this.dob;
	            other.alt_id = this.alt_id;
	            other.alt_id_type = this.alt_id_type;
	            other.tel = this.tel;
	            other.birthplace = this.birthplace;
	            
	}

	public void copyKeysDataTo(outputPersonsStruct other) {

		other.psn_id = this.psn_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.psn_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.sts_cs = readString(dis);
					
					this.dob = readDate(dis);
					
					this.alt_id = readString(dis);
					
					this.alt_id_type = readString(dis);
					
					this.tel = readString(dis);
					
						this.birthplace = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.psn_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// String
				
						writeString(this.sts_cs,dos);
					
					// java.util.Date
				
						writeDate(this.dob,dos);
					
					// String
				
						writeString(this.alt_id,dos);
					
					// String
				
						writeString(this.alt_id_type,dos);
					
					// String
				
						writeString(this.tel,dos);
					
					// Object
				
       			    	dos.writeObject(this.birthplace);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("psn_id="+String.valueOf(psn_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",sts_cs="+sts_cs);
		sb.append(",dob="+String.valueOf(dob));
		sb.append(",alt_id="+alt_id);
		sb.append(",alt_id_type="+alt_id_type);
		sb.append(",tel="+tel);
		sb.append(",birthplace="+String.valueOf(birthplace));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputPersonsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.psn_id, other.psn_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public String sts_cs;

				public String getSts_cs () {
					return this.sts_cs;
				}
				
			    public java.util.Date dob;

				public java.util.Date getDob () {
					return this.dob;
				}
				
			    public String id_val;

				public String getId_val () {
					return this.id_val;
				}
				
			    public String nsid;

				public String getNsid () {
					return this.nsid;
				}
				
			    public String tel_val;

				public String getTel_val () {
					return this.tel_val;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.ent_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.sts_cs = readString(dis);
					
					this.dob = readDate(dis);
					
					this.id_val = readString(dis);
					
					this.nsid = readString(dis);
					
					this.tel_val = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// String
				
						writeString(this.sts_cs,dos);
					
					// java.util.Date
				
						writeDate(this.dob,dos);
					
					// String
				
						writeString(this.id_val,dos);
					
					// String
				
						writeString(this.nsid,dos);
					
					// String
				
						writeString(this.tel_val,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_id="+String.valueOf(ent_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",sts_cs="+sts_cs);
		sb.append(",dob="+String.valueOf(dob));
		sb.append(",id_val="+id_val);
		sb.append(",nsid="+nsid);
		sb.append(",tel_val="+tel_val);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_9Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_9Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public String sts_cs;

				public String getSts_cs () {
					return this.sts_cs;
				}
				
			    public java.util.Date dob;

				public java.util.Date getDob () {
					return this.dob;
				}
				
			    public String id_val;

				public String getId_val () {
					return this.id_val;
				}
				
			    public String nsid;

				public String getNsid () {
					return this.nsid;
				}
				
			    public String tel_val;

				public String getTel_val () {
					return this.tel_val;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.ent_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.sts_cs = readString(dis);
					
					this.dob = readDate(dis);
					
					this.id_val = readString(dis);
					
					this.nsid = readString(dis);
					
					this.tel_val = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// String
				
						writeString(this.sts_cs,dos);
					
					// java.util.Date
				
						writeDate(this.dob,dos);
					
					// String
				
						writeString(this.id_val,dos);
					
					// String
				
						writeString(this.nsid,dos);
					
					// String
				
						writeString(this.tel_val,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_id="+String.valueOf(ent_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",sts_cs="+sts_cs);
		sb.append(",dob="+String.valueOf(dob));
		sb.append(",id_val="+id_val);
		sb.append(",nsid="+nsid);
		sb.append(",tel_val="+tel_val);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_11Process(globalMap);
		tDBInput_3Process(globalMap);

		row2Struct row2 = new row2Struct();
outputPersonsStruct outputPersons = new outputPersonsStruct();





	
	/**
	 * [tPostgresqlOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_3", false);
		start_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputPersons" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_3 = 0;
		





String dbschema_tPostgresqlOutput_3 = null;
	dbschema_tPostgresqlOutput_3 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_3 = null;
if(dbschema_tPostgresqlOutput_3 == null || dbschema_tPostgresqlOutput_3.trim().length() == 0) {
	tableName_tPostgresqlOutput_3 = "psn_tbl";
} else {
	tableName_tPostgresqlOutput_3 = dbschema_tPostgresqlOutput_3 + "\".\"" + "psn_tbl";
}

int nb_line_tPostgresqlOutput_3 = 0;
int nb_line_update_tPostgresqlOutput_3 = 0;
int nb_line_inserted_tPostgresqlOutput_3 = 0;
int nb_line_deleted_tPostgresqlOutput_3 = 0;
int nb_line_rejected_tPostgresqlOutput_3 = 0;

int deletedCount_tPostgresqlOutput_3=0;
int updatedCount_tPostgresqlOutput_3=0;
int insertedCount_tPostgresqlOutput_3=0;
int rejectedCount_tPostgresqlOutput_3=0;

boolean whetherReject_tPostgresqlOutput_3 = false;

java.sql.Connection conn_tPostgresqlOutput_3 = null;
String dbUser_tPostgresqlOutput_3 = null;

	conn_tPostgresqlOutput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_3 = 10000;
   int batchSizeCounter_tPostgresqlOutput_3=0;

int count_tPostgresqlOutput_3=0;
	    String insert_tPostgresqlOutput_3 = "INSERT INTO \"" + tableName_tPostgresqlOutput_3 + "\" (\"psn_id\",\"crt_etl_id\",\"upd_etl_id\",\"crt_utc\",\"upd_utc\",\"obslt_utc\",\"sts_cs\",\"dob\",\"alt_id\",\"alt_id_type\",\"tel\",\"birthplace\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.prepareStatement(insert_tPostgresqlOutput_3);
	    resourceMap.put("pstmt_tPostgresqlOutput_3", pstmt_tPostgresqlOutput_3);
	    

 



/**
 * [tPostgresqlOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	
		tHash_Lookup_row3.initGet();
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
					globalMap.get( "tHash_Lookup_row16" ))
					;					
					
	

row16Struct row16HashKey = new row16Struct();
row16Struct row16Default = new row16Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputPersonsStruct outputPersons_tmp = new outputPersonsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_9", false);
		start_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_9";

	
		int tos_count_tPostgresqlInput_9 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_9 = 0;
		    java.sql.Connection conn_tPostgresqlInput_9 = null;
		        conn_tPostgresqlInput_9 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_9 = conn_tPostgresqlInput_9.createStatement();

		    String dbquery_tPostgresqlInput_9 = "SELECT ent_vrsn_tbl.ent_id, MAX(ent_vrsn_tbl.crt_utc) AS crt_utc, FIRST(mnemonic) AS sts_cs, FIRST(dob) AS dob, FIRST(e"
+"nt_id_tbl.id_val) AS id_val, FIRST(asgn_aut_tbl.nsid) AS nsid, FIRST(tel_val) AS tel_val\nFROM\n	ent_vrsn_tbl \n	INNER J"
+"OIN psn_tbl USING (ent_vrsn_id)\n	LEFT JOIN ent_id_tbl ON (ent_vrsn_tbl.ent_id = ent_id_tbl.ent_id AND ent_id_tbl.obslt_"
+"vrsn_seq_id IS NULL)\n	LEFT JOIN asgn_aut_tbl USING (aut_id)\n	INNER JOIN cd_vrsn_tbl ON (ent_vrsn_tbl.sts_cd_id = cd_id"
+" AND cd_vrsn_tbl.obslt_utc IS NULL)\n	LEFT JOIN ent_tel_tbl ON (ent_tel_tbl.ent_id = ent_vrsn_tbl.ent_id AND ent_tel_tbl"
+".obslt_vrsn_seq_id IS NULL)\nWHERE\n	ent_vrsn_tbl.obslt_utc IS NULL\nGROUP BY \n	ent_vrsn_tbl.ent_id";
			

            	globalMap.put("tPostgresqlInput_9_QUERY",dbquery_tPostgresqlInput_9);
		    java.sql.ResultSet rs_tPostgresqlInput_9 = null;

		    try {
		    	rs_tPostgresqlInput_9 = stmt_tPostgresqlInput_9.executeQuery(dbquery_tPostgresqlInput_9);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_9 = rs_tPostgresqlInput_9.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_9 = rsmd_tPostgresqlInput_9.getColumnCount();

		    String tmpContent_tPostgresqlInput_9 = null;
		    
		    
		    while (rs_tPostgresqlInput_9.next()) {
		        nb_line_tPostgresqlInput_9++;
		        
							if(colQtyInRs_tPostgresqlInput_9 < 1) {
								row2.ent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_9.getObject(1) != null) {
                row2.ent_id = rs_tPostgresqlInput_9.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_9 < 2) {
								row2.crt_utc = null;
							} else {
										
			row2.crt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_9, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_9 < 3) {
								row2.sts_cs = null;
							} else {
	                         		
        	row2.sts_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_9, 3, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_9 < 4) {
								row2.dob = null;
							} else {
										
			row2.dob = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_9, 4);
		                    }
							if(colQtyInRs_tPostgresqlInput_9 < 5) {
								row2.id_val = null;
							} else {
	                         		
        	row2.id_val = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_9, 5, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_9 < 6) {
								row2.nsid = null;
							} else {
	                         		
        	row2.nsid = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_9, 6, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_9 < 7) {
								row2.tel_val = null;
							} else {
	                         		
        	row2.tel_val = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_9, 7, false);
		                    }
					


 



/**
 * [tPostgresqlInput_9 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_9 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 


	tos_count_tPostgresqlInput_9++;

/**
 * [tPostgresqlInput_9 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 



/**
 * [tPostgresqlInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow3 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow3 = true;
			           		  	} // G 21
                    		  	
                    		

							row3Struct row3 = null;
                    		  	 
							

								while ((tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) || forceLooprow3) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row3'
									
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								
								if(!forceLooprow3) { // G 46
								
							
								 
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow3 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		row16HashKey.src_ent_id = row2.ent_id ;
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							row16Struct row16 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								 
							
							
								if (tHash_Lookup_row16 !=null && tHash_Lookup_row16.hasNext()) { // G 099
								
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							
							
								} // G 099
							
							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

outputPersons = null;


// # Output table : 'outputPersons'
outputPersons_tmp.psn_id = row2.ent_id ;
outputPersons_tmp.crt_etl_id = row3.etl_id ;
outputPersons_tmp.upd_etl_id = null;
outputPersons_tmp.crt_utc = row2.crt_utc;
outputPersons_tmp.upd_utc = null;
outputPersons_tmp.obslt_utc = null;
outputPersons_tmp.sts_cs = row2.sts_cs;
outputPersons_tmp.dob = row2.dob;
outputPersons_tmp.alt_id = row2.id_val ;
outputPersons_tmp.alt_id_type = row2.nsid ;
outputPersons_tmp.tel = row2.tel_val ;
outputPersons_tmp.birthplace = row16.trg_ent_id ;
outputPersons = outputPersons_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "outputPersons"
if(outputPersons != null) { 



	
	/**
	 * [tPostgresqlOutput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

			//outputPersons
			//outputPersons


			
				if(execStat){
					runStat.updateStatOnConnection("outputPersons"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_3 = false;
                    if(outputPersons.psn_id == null) {
pstmt_tPostgresqlOutput_3.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(1, outputPersons.psn_id, java.sql.Types.OTHER);
}

                    if(outputPersons.crt_etl_id == null) {
pstmt_tPostgresqlOutput_3.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(2, outputPersons.crt_etl_id, java.sql.Types.OTHER);
}

                    if(outputPersons.upd_etl_id == null) {
pstmt_tPostgresqlOutput_3.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(3, outputPersons.upd_etl_id, java.sql.Types.OTHER);
}

                    if(outputPersons.crt_utc != null) {
pstmt_tPostgresqlOutput_3.setTimestamp(4, new java.sql.Timestamp(outputPersons.crt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_3.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(outputPersons.upd_utc != null) {
pstmt_tPostgresqlOutput_3.setTimestamp(5, new java.sql.Timestamp(outputPersons.upd_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_3.setNull(5, java.sql.Types.TIMESTAMP);
}

                    if(outputPersons.obslt_utc != null) {
pstmt_tPostgresqlOutput_3.setTimestamp(6, new java.sql.Timestamp(outputPersons.obslt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_3.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(outputPersons.sts_cs == null) {
pstmt_tPostgresqlOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_3.setString(7, outputPersons.sts_cs);
}

                    if(outputPersons.dob != null) {
pstmt_tPostgresqlOutput_3.setTimestamp(8, new java.sql.Timestamp(outputPersons.dob.getTime()));
} else {
pstmt_tPostgresqlOutput_3.setNull(8, java.sql.Types.TIMESTAMP);
}

                    if(outputPersons.alt_id == null) {
pstmt_tPostgresqlOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_3.setString(9, outputPersons.alt_id);
}

                    if(outputPersons.alt_id_type == null) {
pstmt_tPostgresqlOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_3.setString(10, outputPersons.alt_id_type);
}

                    if(outputPersons.tel == null) {
pstmt_tPostgresqlOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_3.setString(11, outputPersons.tel);
}

                    if(outputPersons.birthplace == null) {
pstmt_tPostgresqlOutput_3.setNull(12, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(12, outputPersons.birthplace, java.sql.Types.OTHER);
}

			
    		pstmt_tPostgresqlOutput_3.addBatch();
    		nb_line_tPostgresqlOutput_3++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_3++;
    		  
            if(!whetherReject_tPostgresqlOutput_3) {
            }
    			if ((batchSize_tPostgresqlOutput_3 > 0) && (batchSize_tPostgresqlOutput_3 <= batchSizeCounter_tPostgresqlOutput_3)) {
                try {
						int countSum_tPostgresqlOutput_3 = 0;
						    
						for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
				    	
				    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_3){
				    	java.sql.SQLException ne_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getNextException(),sqle_tPostgresqlOutput_3=null;
				    	String errormessage_tPostgresqlOutput_3;
						if (ne_tPostgresqlOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_3 = new java.sql.SQLException(e_tPostgresqlOutput_3.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_3.getMessage(), ne_tPostgresqlOutput_3.getSQLState(), ne_tPostgresqlOutput_3.getErrorCode(), ne_tPostgresqlOutput_3);
							errormessage_tPostgresqlOutput_3 = sqle_tPostgresqlOutput_3.getMessage();
						}else{
							errormessage_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_3 = 0;
						for(int countEach_tPostgresqlOutput_3: e_tPostgresqlOutput_3.getUpdateCounts()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
						
				    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_3++;

/**
 * [tPostgresqlOutput_3 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

 



/**
 * [tPostgresqlOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

 



/**
 * [tPostgresqlOutput_3 process_data_end ] stop
 */

} // End of branch "outputPersons"



	
		} // close loop of lookup 'row3' // G_TM_M_043
	
	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 



/**
 * [tPostgresqlInput_9 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_9 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

	}
}finally{
	if (rs_tPostgresqlInput_9 != null) {
		rs_tPostgresqlInput_9.close();
	}
	if (stmt_tPostgresqlInput_9 != null) {
		stmt_tPostgresqlInput_9.close();
	}
}
globalMap.put("tPostgresqlInput_9_NB_LINE",nb_line_tPostgresqlInput_9);
 

ok_Hash.put("tPostgresqlInput_9", true);
end_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());




/**
 * [tPostgresqlInput_9 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
					if(tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove( "tHash_Lookup_row16" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



	    try {
				int countSum_tPostgresqlOutput_3 = 0;
				if (pstmt_tPostgresqlOutput_3 != null && batchSizeCounter_tPostgresqlOutput_3 > 0) {
						
					for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
						countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_3){
	    	java.sql.SQLException ne_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getNextException(),sqle_tPostgresqlOutput_3=null;
	    	String errormessage_tPostgresqlOutput_3;
			if (ne_tPostgresqlOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_3 = new java.sql.SQLException(e_tPostgresqlOutput_3.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_3.getMessage(), ne_tPostgresqlOutput_3.getSQLState(), ne_tPostgresqlOutput_3.getErrorCode(), ne_tPostgresqlOutput_3);
				errormessage_tPostgresqlOutput_3 = sqle_tPostgresqlOutput_3.getMessage();
			}else{
				errormessage_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_3 = 0;
			for(int countEach_tPostgresqlOutput_3: e_tPostgresqlOutput_3.getUpdateCounts()) {
				countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
			}
			
	    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_3);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_3 != null) {
        		
            pstmt_tPostgresqlOutput_3.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_3");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_3", true);

	nb_line_deleted_tPostgresqlOutput_3=nb_line_deleted_tPostgresqlOutput_3+ deletedCount_tPostgresqlOutput_3;
	nb_line_update_tPostgresqlOutput_3=nb_line_update_tPostgresqlOutput_3 + updatedCount_tPostgresqlOutput_3;
	nb_line_inserted_tPostgresqlOutput_3=nb_line_inserted_tPostgresqlOutput_3 + insertedCount_tPostgresqlOutput_3;
	nb_line_rejected_tPostgresqlOutput_3=nb_line_rejected_tPostgresqlOutput_3 + rejectedCount_tPostgresqlOutput_3;
	
        globalMap.put("tPostgresqlOutput_3_NB_LINE",nb_line_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_3);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputPersons"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_3", true);
end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tWarn_2Process(globalMap);



/**
 * [tPostgresqlOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row16"); 
				     			
				try{
					
	
	/**
	 * [tPostgresqlInput_9 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 



/**
 * [tPostgresqlInput_9 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_3 = null;
                if ((pstmtToClose_tPostgresqlOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_3")) != null) {
                    pstmtToClose_tPostgresqlOutput_3.close();
                }
    }
 



/**
 * [tPostgresqlOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_2", false);
		start_Hash.put("tWarn_2", System.currentTimeMillis());
		
	
	currentComponent="tWarn_2";

	
		int tos_count_tWarn_2 = 0;
		

 



/**
 * [tWarn_2 begin ] stop
 */
	
	/**
	 * [tWarn_2 main ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread.currentThread().getId() + "", "INFO","","Transforming Patients","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_2", 3, "Transforming Patients", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_2_WARN_MESSAGES", "Transforming Patients"); 
	globalMap.put("tWarn_2_WARN_PRIORITY", 3);
	globalMap.put("tWarn_2_WARN_CODE", 42);
	
} catch (Exception e_tWarn_2) {
	logIgnoredError(String.format("tWarn_2 - tWarn failed to log message due to internal error: %s", e_tWarn_2), e_tWarn_2);
}


 


	tos_count_tWarn_2++;

/**
 * [tWarn_2 main ] stop
 */
	
	/**
	 * [tWarn_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 process_data_end ] stop
 */
	
	/**
	 * [tWarn_2 end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 

ok_Hash.put("tWarn_2", true);
end_Hash.put("tWarn_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tPostgresqlInput_1Process(globalMap);



/**
 * [tWarn_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_2 finally ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_2_SUBPROCESS_STATE", 1);
	}
	


public static class fixedValueAppliedStruct implements routines.system.IPersistableRow<fixedValueAppliedStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object pat_id;

				public Object getPat_id () {
					return this.pat_id;
				}
				
			    public Object psn_id;

				public Object getPsn_id () {
					return this.psn_id;
				}
				
			    public Object mth_id;

				public Object getMth_id () {
					return this.mth_id;
				}
				
			    public Object nok_id;

				public Object getNok_id () {
					return this.nok_id;
				}
				
			    public String nok_typ_mnemonic;

				public String getNok_typ_mnemonic () {
					return this.nok_typ_mnemonic;
				}
				
			    public Object reg_fac_id;

				public Object getReg_fac_id () {
					return this.reg_fac_id;
				}
				
			    public Object asgn_fac_id;

				public Object getAsgn_fac_id () {
					return this.asgn_fac_id;
				}
				
			    public java.util.Date deceased;

				public java.util.Date getDeceased () {
					return this.deceased;
				}
				
			    public String gender_mnemonic;

				public String getGender_mnemonic () {
					return this.gender_mnemonic;
				}
				
			    public BigDecimal mb_ord;

				public BigDecimal getMb_ord () {
					return this.mb_ord;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.pat_id == null) ? 0 : this.pat_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final fixedValueAppliedStruct other = (fixedValueAppliedStruct) obj;
		
						if (this.pat_id == null) {
							if (other.pat_id != null)
								return false;
						
						} else if (!this.pat_id.equals(other.pat_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(fixedValueAppliedStruct other) {

		other.pat_id = this.pat_id;
	            other.psn_id = this.psn_id;
	            other.mth_id = this.mth_id;
	            other.nok_id = this.nok_id;
	            other.nok_typ_mnemonic = this.nok_typ_mnemonic;
	            other.reg_fac_id = this.reg_fac_id;
	            other.asgn_fac_id = this.asgn_fac_id;
	            other.deceased = this.deceased;
	            other.gender_mnemonic = this.gender_mnemonic;
	            other.mb_ord = this.mb_ord;
	            
	}

	public void copyKeysDataTo(fixedValueAppliedStruct other) {

		other.pat_id = this.pat_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.pat_id = (Object) dis.readObject();
					
						this.psn_id = (Object) dis.readObject();
					
						this.mth_id = (Object) dis.readObject();
					
						this.nok_id = (Object) dis.readObject();
					
					this.nok_typ_mnemonic = readString(dis);
					
						this.reg_fac_id = (Object) dis.readObject();
					
						this.asgn_fac_id = (Object) dis.readObject();
					
					this.deceased = readDate(dis);
					
					this.gender_mnemonic = readString(dis);
					
						this.mb_ord = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.pat_id);
					
					// Object
				
       			    	dos.writeObject(this.psn_id);
					
					// Object
				
       			    	dos.writeObject(this.mth_id);
					
					// Object
				
       			    	dos.writeObject(this.nok_id);
					
					// String
				
						writeString(this.nok_typ_mnemonic,dos);
					
					// Object
				
       			    	dos.writeObject(this.reg_fac_id);
					
					// Object
				
       			    	dos.writeObject(this.asgn_fac_id);
					
					// java.util.Date
				
						writeDate(this.deceased,dos);
					
					// String
				
						writeString(this.gender_mnemonic,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.mb_ord);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("pat_id="+String.valueOf(pat_id));
		sb.append(",psn_id="+String.valueOf(psn_id));
		sb.append(",mth_id="+String.valueOf(mth_id));
		sb.append(",nok_id="+String.valueOf(nok_id));
		sb.append(",nok_typ_mnemonic="+nok_typ_mnemonic);
		sb.append(",reg_fac_id="+String.valueOf(reg_fac_id));
		sb.append(",asgn_fac_id="+String.valueOf(asgn_fac_id));
		sb.append(",deceased="+String.valueOf(deceased));
		sb.append(",gender_mnemonic="+gender_mnemonic);
		sb.append(",mb_ord="+String.valueOf(mb_ord));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(fixedValueAppliedStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.pat_id, other.pat_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public Object pat_id;

				public Object getPat_id () {
					return this.pat_id;
				}
				
			    public Object psn_id;

				public Object getPsn_id () {
					return this.psn_id;
				}
				
			    public Object mth_id;

				public Object getMth_id () {
					return this.mth_id;
				}
				
			    public Object nok_id;

				public Object getNok_id () {
					return this.nok_id;
				}
				
			    public String nok_typ_mnemonic;

				public String getNok_typ_mnemonic () {
					return this.nok_typ_mnemonic;
				}
				
			    public Object reg_fac_id;

				public Object getReg_fac_id () {
					return this.reg_fac_id;
				}
				
			    public Object asgn_fac_id;

				public Object getAsgn_fac_id () {
					return this.asgn_fac_id;
				}
				
			    public java.util.Date deceased;

				public java.util.Date getDeceased () {
					return this.deceased;
				}
				
			    public String gender_mnemonic;

				public String getGender_mnemonic () {
					return this.gender_mnemonic;
				}
				
			    public BigDecimal mb_ord;

				public BigDecimal getMb_ord () {
					return this.mb_ord;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.pat_id = (Object) dis.readObject();
					
						this.psn_id = (Object) dis.readObject();
					
						this.mth_id = (Object) dis.readObject();
					
						this.nok_id = (Object) dis.readObject();
					
					this.nok_typ_mnemonic = readString(dis);
					
						this.reg_fac_id = (Object) dis.readObject();
					
						this.asgn_fac_id = (Object) dis.readObject();
					
					this.deceased = readDate(dis);
					
					this.gender_mnemonic = readString(dis);
					
						this.mb_ord = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.pat_id);
					
					// Object
				
       			    	dos.writeObject(this.psn_id);
					
					// Object
				
       			    	dos.writeObject(this.mth_id);
					
					// Object
				
       			    	dos.writeObject(this.nok_id);
					
					// String
				
						writeString(this.nok_typ_mnemonic,dos);
					
					// Object
				
       			    	dos.writeObject(this.reg_fac_id);
					
					// Object
				
       			    	dos.writeObject(this.asgn_fac_id);
					
					// java.util.Date
				
						writeDate(this.deceased,dos);
					
					// String
				
						writeString(this.gender_mnemonic,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.mb_ord);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("pat_id="+String.valueOf(pat_id));
		sb.append(",psn_id="+String.valueOf(psn_id));
		sb.append(",mth_id="+String.valueOf(mth_id));
		sb.append(",nok_id="+String.valueOf(nok_id));
		sb.append(",nok_typ_mnemonic="+nok_typ_mnemonic);
		sb.append(",reg_fac_id="+String.valueOf(reg_fac_id));
		sb.append(",asgn_fac_id="+String.valueOf(asgn_fac_id));
		sb.append(",deceased="+String.valueOf(deceased));
		sb.append(",gender_mnemonic="+gender_mnemonic);
		sb.append(",mb_ord="+String.valueOf(mb_ord));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object pat_id;

				public Object getPat_id () {
					return this.pat_id;
				}
				
			    public Object psn_id;

				public Object getPsn_id () {
					return this.psn_id;
				}
				
			    public Object mth_id;

				public Object getMth_id () {
					return this.mth_id;
				}
				
			    public Object nok_id;

				public Object getNok_id () {
					return this.nok_id;
				}
				
			    public String nok_typ_mnemonic;

				public String getNok_typ_mnemonic () {
					return this.nok_typ_mnemonic;
				}
				
			    public Object reg_fac_id;

				public Object getReg_fac_id () {
					return this.reg_fac_id;
				}
				
			    public Object asgn_fac_id;

				public Object getAsgn_fac_id () {
					return this.asgn_fac_id;
				}
				
			    public java.util.Date deceased;

				public java.util.Date getDeceased () {
					return this.deceased;
				}
				
			    public String gender_mnemonic;

				public String getGender_mnemonic () {
					return this.gender_mnemonic;
				}
				
			    public BigDecimal mb_ord;

				public BigDecimal getMb_ord () {
					return this.mb_ord;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.pat_id == null) ? 0 : this.pat_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row21Struct other = (row21Struct) obj;
		
						if (this.pat_id == null) {
							if (other.pat_id != null)
								return false;
						
						} else if (!this.pat_id.equals(other.pat_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row21Struct other) {

		other.pat_id = this.pat_id;
	            other.psn_id = this.psn_id;
	            other.mth_id = this.mth_id;
	            other.nok_id = this.nok_id;
	            other.nok_typ_mnemonic = this.nok_typ_mnemonic;
	            other.reg_fac_id = this.reg_fac_id;
	            other.asgn_fac_id = this.asgn_fac_id;
	            other.deceased = this.deceased;
	            other.gender_mnemonic = this.gender_mnemonic;
	            other.mb_ord = this.mb_ord;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row21Struct other) {

		other.pat_id = this.pat_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.pat_id = (Object) dis.readObject();
					
						this.psn_id = (Object) dis.readObject();
					
						this.mth_id = (Object) dis.readObject();
					
						this.nok_id = (Object) dis.readObject();
					
					this.nok_typ_mnemonic = readString(dis);
					
						this.reg_fac_id = (Object) dis.readObject();
					
						this.asgn_fac_id = (Object) dis.readObject();
					
					this.deceased = readDate(dis);
					
					this.gender_mnemonic = readString(dis);
					
						this.mb_ord = (BigDecimal) dis.readObject();
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.pat_id);
					
					// Object
				
       			    	dos.writeObject(this.psn_id);
					
					// Object
				
       			    	dos.writeObject(this.mth_id);
					
					// Object
				
       			    	dos.writeObject(this.nok_id);
					
					// String
				
						writeString(this.nok_typ_mnemonic,dos);
					
					// Object
				
       			    	dos.writeObject(this.reg_fac_id);
					
					// Object
				
       			    	dos.writeObject(this.asgn_fac_id);
					
					// java.util.Date
				
						writeDate(this.deceased,dos);
					
					// String
				
						writeString(this.gender_mnemonic,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.mb_ord);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("pat_id="+String.valueOf(pat_id));
		sb.append(",psn_id="+String.valueOf(psn_id));
		sb.append(",mth_id="+String.valueOf(mth_id));
		sb.append(",nok_id="+String.valueOf(nok_id));
		sb.append(",nok_typ_mnemonic="+nok_typ_mnemonic);
		sb.append(",reg_fac_id="+String.valueOf(reg_fac_id));
		sb.append(",asgn_fac_id="+String.valueOf(asgn_fac_id));
		sb.append(",deceased="+String.valueOf(deceased));
		sb.append(",gender_mnemonic="+gender_mnemonic);
		sb.append(",mb_ord="+String.valueOf(mb_ord));
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.pat_id, other.pat_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outputPatientsStruct implements routines.system.IPersistableRow<outputPatientsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object pat_id;

				public Object getPat_id () {
					return this.pat_id;
				}
				
			    public Object psn_id;

				public Object getPsn_id () {
					return this.psn_id;
				}
				
			    public Object mth_id;

				public Object getMth_id () {
					return this.mth_id;
				}
				
			    public Object nok_id;

				public Object getNok_id () {
					return this.nok_id;
				}
				
			    public String nok_typ_mnemonic;

				public String getNok_typ_mnemonic () {
					return this.nok_typ_mnemonic;
				}
				
			    public Object reg_fac_id;

				public Object getReg_fac_id () {
					return this.reg_fac_id;
				}
				
			    public Object asgn_fac_id;

				public Object getAsgn_fac_id () {
					return this.asgn_fac_id;
				}
				
			    public java.util.Date deceased;

				public java.util.Date getDeceased () {
					return this.deceased;
				}
				
			    public String gender_mnemonic;

				public String getGender_mnemonic () {
					return this.gender_mnemonic;
				}
				
			    public BigDecimal mb_ord;

				public BigDecimal getMb_ord () {
					return this.mb_ord;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.pat_id == null) ? 0 : this.pat_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputPatientsStruct other = (outputPatientsStruct) obj;
		
						if (this.pat_id == null) {
							if (other.pat_id != null)
								return false;
						
						} else if (!this.pat_id.equals(other.pat_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputPatientsStruct other) {

		other.pat_id = this.pat_id;
	            other.psn_id = this.psn_id;
	            other.mth_id = this.mth_id;
	            other.nok_id = this.nok_id;
	            other.nok_typ_mnemonic = this.nok_typ_mnemonic;
	            other.reg_fac_id = this.reg_fac_id;
	            other.asgn_fac_id = this.asgn_fac_id;
	            other.deceased = this.deceased;
	            other.gender_mnemonic = this.gender_mnemonic;
	            other.mb_ord = this.mb_ord;
	            
	}

	public void copyKeysDataTo(outputPatientsStruct other) {

		other.pat_id = this.pat_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.pat_id = (Object) dis.readObject();
					
						this.psn_id = (Object) dis.readObject();
					
						this.mth_id = (Object) dis.readObject();
					
						this.nok_id = (Object) dis.readObject();
					
					this.nok_typ_mnemonic = readString(dis);
					
						this.reg_fac_id = (Object) dis.readObject();
					
						this.asgn_fac_id = (Object) dis.readObject();
					
					this.deceased = readDate(dis);
					
					this.gender_mnemonic = readString(dis);
					
						this.mb_ord = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.pat_id);
					
					// Object
				
       			    	dos.writeObject(this.psn_id);
					
					// Object
				
       			    	dos.writeObject(this.mth_id);
					
					// Object
				
       			    	dos.writeObject(this.nok_id);
					
					// String
				
						writeString(this.nok_typ_mnemonic,dos);
					
					// Object
				
       			    	dos.writeObject(this.reg_fac_id);
					
					// Object
				
       			    	dos.writeObject(this.asgn_fac_id);
					
					// java.util.Date
				
						writeDate(this.deceased,dos);
					
					// String
				
						writeString(this.gender_mnemonic,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.mb_ord);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("pat_id="+String.valueOf(pat_id));
		sb.append(",psn_id="+String.valueOf(psn_id));
		sb.append(",mth_id="+String.valueOf(mth_id));
		sb.append(",nok_id="+String.valueOf(nok_id));
		sb.append(",nok_typ_mnemonic="+nok_typ_mnemonic);
		sb.append(",reg_fac_id="+String.valueOf(reg_fac_id));
		sb.append(",asgn_fac_id="+String.valueOf(asgn_fac_id));
		sb.append(",deceased="+String.valueOf(deceased));
		sb.append(",gender_mnemonic="+gender_mnemonic);
		sb.append(",mb_ord="+String.valueOf(mb_ord));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputPatientsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.pat_id, other.pat_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public java.util.Date dcsd_utc;

				public java.util.Date getDcsd_utc () {
					return this.dcsd_utc;
				}
				
			    public String gndr_cs;

				public String getGndr_cs () {
					return this.gndr_cs;
				}
				
			    public Object nok_id;

				public Object getNok_id () {
					return this.nok_id;
				}
				
			    public String nok_typ;

				public String getNok_typ () {
					return this.nok_typ;
				}
				
			    public Object mth_id;

				public Object getMth_id () {
					return this.mth_id;
				}
				
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public Object reg_id;

				public Object getReg_id () {
					return this.reg_id;
				}
				
			    public BigDecimal mb_ord;

				public BigDecimal getMb_ord () {
					return this.mb_ord;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.ent_id = (Object) dis.readObject();
					
					this.dcsd_utc = readDate(dis);
					
					this.gndr_cs = readString(dis);
					
						this.nok_id = (Object) dis.readObject();
					
					this.nok_typ = readString(dis);
					
						this.mth_id = (Object) dis.readObject();
					
						this.fac_id = (Object) dis.readObject();
					
						this.reg_id = (Object) dis.readObject();
					
						this.mb_ord = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// java.util.Date
				
						writeDate(this.dcsd_utc,dos);
					
					// String
				
						writeString(this.gndr_cs,dos);
					
					// Object
				
       			    	dos.writeObject(this.nok_id);
					
					// String
				
						writeString(this.nok_typ,dos);
					
					// Object
				
       			    	dos.writeObject(this.mth_id);
					
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// Object
				
       			    	dos.writeObject(this.reg_id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.mb_ord);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_id="+String.valueOf(ent_id));
		sb.append(",dcsd_utc="+String.valueOf(dcsd_utc));
		sb.append(",gndr_cs="+gndr_cs);
		sb.append(",nok_id="+String.valueOf(nok_id));
		sb.append(",nok_typ="+nok_typ);
		sb.append(",mth_id="+String.valueOf(mth_id));
		sb.append(",fac_id="+String.valueOf(fac_id));
		sb.append(",reg_id="+String.valueOf(reg_id));
		sb.append(",mb_ord="+String.valueOf(mb_ord));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
outputPatientsStruct outputPatients = new outputPatientsStruct();
row20Struct row20 = new row20Struct();
fixedValueAppliedStruct fixedValueApplied = new fixedValueAppliedStruct();
row21Struct row21 = new row21Struct();







	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("fixedValueApplied" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "pat_tbl";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "pat_tbl";
}

int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	conn_tPostgresqlOutput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_1 = 10000;
   int batchSizeCounter_tPostgresqlOutput_1=0;

int count_tPostgresqlOutput_1=0;
	    String insert_tPostgresqlOutput_1 = "INSERT INTO \"" + tableName_tPostgresqlOutput_1 + "\" (\"mb_ord\",\"pat_id\",\"psn_id\",\"mth_id\",\"nok_id\",\"nok_typ_mnemonic\",\"reg_fac_id\",\"asgn_fac_id\",\"deceased\",\"gender_mnemonic\") VALUES (?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(insert_tPostgresqlOutput_1);
	    resourceMap.put("pstmt_tPostgresqlOutput_1", pstmt_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row20" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
fixedValueAppliedStruct fixedValueApplied_tmp = new fixedValueAppliedStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */




	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row21" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = "pat_tbl";
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + "pat_tbl";
}

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"pat_id\",\"psn_id\",\"mth_id\",\"nok_id\",\"nok_typ_mnemonic\",\"reg_fac_id\",\"asgn_fac_id\",\"deceased\",\"gender_mnemonic\",\"mb_ord\") VALUES (?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputPatients" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputPatientsStruct outputPatients_tmp = new outputPatientsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
		        conn_tPostgresqlInput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "with mother as (\n	select src_ent_id as ent_id, trg_ent_id from ent_rel_tbl inner join ent_tbl on (ent_tbl.ent_id = ent"
+"_rel_tbl.src_ent_id) where ent_tbl.cls_cd_id = 'bacd9c6f-3fa9-481e-9636-37457962804d' and rel_typ_cd_id = '29ff64e5-b564"
+"-411a-92c7-6818c02a9e48' and obslt_vrsn_seq_id is null\n),\nnok as (\n	select src_ent_id as ent_id, trg_ent_id, cd_mnemo"
+"nic from ent_rel_tbl inner join cd_set_mem_vw on (ent_rel_tbl.rel_typ_cd_id = cd_set_mem_vw.cd_id) inner join ent_tbl on"
+" (ent_tbl.ent_id = ent_rel_tbl.src_ent_id) where ent_tbl.cls_cd_id = 'bacd9c6f-3fa9-481e-9636-37457962804d' and rel_typ_"
+"cd_id != '29ff64e5-b564-411a-92c7-6818c02a9e48' and obslt_vrsn_seq_id is null and set_mnemonic = 'ChildFamilyMember'\n),"
+"\nsdl as (\n	select src_ent_id as ent_id, trg_ent_id from ent_rel_tbl inner join ent_tbl on (ent_tbl.ent_id = ent_rel_tb"
+"l.src_ent_id) where ent_tbl.cls_cd_id = 'bacd9c6f-3fa9-481e-9636-37457962804d' and rel_typ_cd_id = '455f1772-f580-47e8-8"
+"6bd-b5ce25d351f9' and obslt_vrsn_seq_id is null \n),\nregdl as (\n	select src_ent_id as ent_id, trg_ent_id from ent_rel_"
+"tbl inner join ent_tbl on (ent_tbl.ent_id = ent_rel_tbl.src_ent_id) where ent_tbl.cls_cd_id = 'bacd9c6f-3fa9-481e-9636-3"
+"7457962804d' and rel_typ_cd_id = 'ff34dfa7-c6d3-4f8b-bc9f-14bcdc13ba6c' and obslt_vrsn_seq_id is null \n)\nselect pat_cu"
+"r_vrsn_vw.ent_id, MAX(dcsd_utc) AS dcsd_utc, FIRST(gndr_cs) AS gndr_cs, FIRST(nok.trg_ent_id) as nok_id, FIRST(nok.cd_mn"
+"emonic) as nok_typ, FIRST(mother.trg_ent_id) as mth_id, FIRST(sdl.trg_ent_id) as fac_id, FIRST(regdl.trg_ent_id) as reg_"
+"id, FIRST(mb_ord) AS mb_ord\n	from pat_cur_vrsn_vw\n	natural left join sdl\n	left join mother on(pat_cur_vrsn_vw.ent_id "
+"= mother.ent_id)\n	left join nok on(pat_cur_vrsn_vw.ent_id = nok.ent_id)\n	left join regdl on (regdl.ent_id = pat_cur_vr"
+"sn_vw.ent_id)\nGROUP BY pat_cur_vrsn_vw.ent_id";
			

            	globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);
		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;

		    try {
		    	rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								row1.ent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(1) != null) {
                row1.ent_id = rs_tPostgresqlInput_1.getObject(1);
            } else {
                    row1.ent_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								row1.dcsd_utc = null;
							} else {
										
			row1.dcsd_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 3) {
								row1.gndr_cs = null;
							} else {
	                         		
        	row1.gndr_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 3, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 4) {
								row1.nok_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(4) != null) {
                row1.nok_id = rs_tPostgresqlInput_1.getObject(4);
            } else {
                    row1.nok_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 5) {
								row1.nok_typ = null;
							} else {
	                         		
        	row1.nok_typ = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 5, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 6) {
								row1.mth_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(6) != null) {
                row1.mth_id = rs_tPostgresqlInput_1.getObject(6);
            } else {
                    row1.mth_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 7) {
								row1.fac_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(7) != null) {
                row1.fac_id = rs_tPostgresqlInput_1.getObject(7);
            } else {
                    row1.fac_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 8) {
								row1.reg_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(8) != null) {
                row1.reg_id = rs_tPostgresqlInput_1.getObject(8);
            } else {
                    row1.reg_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 9) {
								row1.mb_ord = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(9) != null) {
                row1.mb_ord = rs_tPostgresqlInput_1.getBigDecimal(9);
            } else {
                    row1.mb_ord = null;
            }
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

outputPatients = null;


// # Output table : 'outputPatients'
outputPatients_tmp.pat_id = row1.ent_id ;
outputPatients_tmp.psn_id = row1.ent_id ;
outputPatients_tmp.mth_id = row1.mth_id;
outputPatients_tmp.nok_id = row1.nok_id;
outputPatients_tmp.nok_typ_mnemonic = row1.nok_typ ;
outputPatients_tmp.reg_fac_id = row1.reg_id ;
outputPatients_tmp.asgn_fac_id = row1.fac_id ;
outputPatients_tmp.deceased = row1.dcsd_utc ;
outputPatients_tmp.gender_mnemonic = row1.gndr_cs ;
outputPatients_tmp.mb_ord = row1.mb_ord ;
outputPatients = outputPatients_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "outputPatients"
if(outputPatients != null) { 



	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

			//outputPatients
			//outputPatients


			
				if(execStat){
					runStat.updateStatOnConnection("outputPatients"+iterateId,1, 1);
				} 
			

		

          row21 = null;
          row20 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
	        ope_tFilterRow_2.matches((outputPatients.asgn_fac_id == null)
	                       , "asgn_fac_id==null failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row20 == null){ 
                row20 = new row20Struct();
              }
               row20.pat_id = outputPatients.pat_id;
               row20.psn_id = outputPatients.psn_id;
               row20.mth_id = outputPatients.mth_id;
               row20.nok_id = outputPatients.nok_id;
               row20.nok_typ_mnemonic = outputPatients.nok_typ_mnemonic;
               row20.reg_fac_id = outputPatients.reg_fac_id;
               row20.asgn_fac_id = outputPatients.asgn_fac_id;
               row20.deceased = outputPatients.deceased;
               row20.gender_mnemonic = outputPatients.gender_mnemonic;
               row20.mb_ord = outputPatients.mb_ord;    
      nb_line_ok_tFilterRow_2++;
    } else {
            if (row21 == null){
              row21 = new row21Struct();
            }
                row21.pat_id = outputPatients.pat_id;
                row21.psn_id = outputPatients.psn_id;
                row21.mth_id = outputPatients.mth_id;
                row21.nok_id = outputPatients.nok_id;
                row21.nok_typ_mnemonic = outputPatients.nok_typ_mnemonic;
                row21.reg_fac_id = outputPatients.reg_fac_id;
                row21.asgn_fac_id = outputPatients.asgn_fac_id;
                row21.deceased = outputPatients.deceased;
                row21.gender_mnemonic = outputPatients.gender_mnemonic;
                row21.mb_ord = outputPatients.mb_ord;
	            row21.errorMessage = ope_tFilterRow_2.getErrorMsg();
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row20"
if(row20 != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

			//row20
			//row20


			
				if(execStat){
					runStat.updateStatOnConnection("row20"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

fixedValueApplied = null;


// # Output table : 'fixedValueApplied'
fixedValueApplied_tmp.pat_id = row20.pat_id;
fixedValueApplied_tmp.psn_id = row20.psn_id;
fixedValueApplied_tmp.mth_id = row20.mth_id;
fixedValueApplied_tmp.nok_id = row20.nok_id;
fixedValueApplied_tmp.nok_typ_mnemonic = row20.nok_typ_mnemonic;
fixedValueApplied_tmp.reg_fac_id = row20.reg_fac_id;
fixedValueApplied_tmp.asgn_fac_id = "6130e1ce-3ed1-467f-8c33-2f96e47674f7";
fixedValueApplied_tmp.deceased = row20.deceased;
fixedValueApplied_tmp.gender_mnemonic = row20.gender_mnemonic;
fixedValueApplied_tmp.mb_ord = row20.mb_ord ;
fixedValueApplied = fixedValueApplied_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "fixedValueApplied"
if(fixedValueApplied != null) { 



	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//fixedValueApplied
			//fixedValueApplied


			
				if(execStat){
					runStat.updateStatOnConnection("fixedValueApplied"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_1 = false;
                    pstmt_tPostgresqlOutput_1.setBigDecimal(1, fixedValueApplied.mb_ord);

                    if(fixedValueApplied.pat_id == null) {
pstmt_tPostgresqlOutput_1.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(2, fixedValueApplied.pat_id, java.sql.Types.OTHER);
}

                    if(fixedValueApplied.psn_id == null) {
pstmt_tPostgresqlOutput_1.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(3, fixedValueApplied.psn_id, java.sql.Types.OTHER);
}

                    if(fixedValueApplied.mth_id == null) {
pstmt_tPostgresqlOutput_1.setNull(4, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(4, fixedValueApplied.mth_id, java.sql.Types.OTHER);
}

                    if(fixedValueApplied.nok_id == null) {
pstmt_tPostgresqlOutput_1.setNull(5, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(5, fixedValueApplied.nok_id, java.sql.Types.OTHER);
}

                    if(fixedValueApplied.nok_typ_mnemonic == null) {
pstmt_tPostgresqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(6, fixedValueApplied.nok_typ_mnemonic);
}

                    if(fixedValueApplied.reg_fac_id == null) {
pstmt_tPostgresqlOutput_1.setNull(7, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(7, fixedValueApplied.reg_fac_id, java.sql.Types.OTHER);
}

                    if(fixedValueApplied.asgn_fac_id == null) {
pstmt_tPostgresqlOutput_1.setNull(8, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(8, fixedValueApplied.asgn_fac_id, java.sql.Types.OTHER);
}

                    if(fixedValueApplied.deceased != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(9, new java.sql.Timestamp(fixedValueApplied.deceased.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(9, java.sql.Types.TIMESTAMP);
}

                    if(fixedValueApplied.gender_mnemonic == null) {
pstmt_tPostgresqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(10, fixedValueApplied.gender_mnemonic);
}

			
    		pstmt_tPostgresqlOutput_1.addBatch();
    		nb_line_tPostgresqlOutput_1++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_1++;
    		  
            if(!whetherReject_tPostgresqlOutput_1) {
            }
    			if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
                try {
						int countSum_tPostgresqlOutput_1 = 0;
						    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
				    	
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
				    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
				    	String errormessage_tPostgresqlOutput_1;
						if (ne_tPostgresqlOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
							errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
						}else{
							errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_1 = 0;
						for(int countEach_tPostgresqlOutput_1: e_tPostgresqlOutput_1.getUpdateCounts()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
						
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_1);
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

 



/**
 * [tPostgresqlOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

 



/**
 * [tPostgresqlOutput_1 process_data_end ] stop
 */

} // End of branch "fixedValueApplied"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "row20"




// Start of branch "row21"
if(row21 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//row21
			//row21


			
				if(execStat){
					runStat.updateStatOnConnection("row21"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_1 = false;
                    if(row21.pat_id == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_1.setObject(1, row21.pat_id, java.sql.Types.OTHER);
}

                    if(row21.psn_id == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_1.setObject(2, row21.psn_id, java.sql.Types.OTHER);
}

                    if(row21.mth_id == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_1.setObject(3, row21.mth_id, java.sql.Types.OTHER);
}

                    if(row21.nok_id == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_1.setObject(4, row21.nok_id, java.sql.Types.OTHER);
}

                    if(row21.nok_typ_mnemonic == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, row21.nok_typ_mnemonic);
}

                    if(row21.reg_fac_id == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_1.setObject(6, row21.reg_fac_id, java.sql.Types.OTHER);
}

                    if(row21.asgn_fac_id == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_1.setObject(7, row21.asgn_fac_id, java.sql.Types.OTHER);
}

                    if(row21.deceased != null) {
pstmt_tDBOutput_1.setTimestamp(8, new java.sql.Timestamp(row21.deceased.getTime()));
} else {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.TIMESTAMP);
}

                    if(row21.gender_mnemonic == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, row21.gender_mnemonic);
}

                    pstmt_tDBOutput_1.setBigDecimal(10, row21.mb_ord);

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
            if(!whetherReject_tDBOutput_1) {
            }
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "row21"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */

} // End of branch "outputPatients"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	if (rs_tPostgresqlInput_1 != null) {
		rs_tPostgresqlInput_1.close();
	}
	if (stmt_tPostgresqlInput_1 != null) {
		stmt_tPostgresqlInput_1.close();
	}
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputPatients"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row20"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	    try {
				int countSum_tPostgresqlOutput_1 = 0;
				if (pstmt_tPostgresqlOutput_1 != null && batchSizeCounter_tPostgresqlOutput_1 > 0) {
						
					for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
	    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
	    	String errormessage_tPostgresqlOutput_1;
			if (ne_tPostgresqlOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
				errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
			}else{
				errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_1 = 0;
			for(int countEach_tPostgresqlOutput_1: e_tPostgresqlOutput_1.getUpdateCounts()) {
				countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
			}
			
	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_1);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_1 != null) {
        		
            pstmt_tPostgresqlOutput_1.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_1");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_1", true);

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("fixedValueApplied"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_1 end ] stop
 */







	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row21"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tWarn_3Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_1 = null;
                if ((pstmtToClose_tPostgresqlOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_1")) != null) {
                    pstmtToClose_tPostgresqlOutput_1.close();
                }
    }
 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */







	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRollback_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRollback_1", false);
		start_Hash.put("tDBRollback_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRollback_1";

	
		int tos_count_tDBRollback_1 = 0;
		

 



/**
 * [tDBRollback_1 begin ] stop
 */
	
	/**
	 * [tDBRollback_1 main ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

	java.sql.Connection conn_tDBRollback_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	if(conn_tDBRollback_1 != null && !conn_tDBRollback_1.isClosed()) {
		
			try{
				
			conn_tDBRollback_1.rollback();
			
			}finally{
		    	
			conn_tDBRollback_1.close();
			
		    }
		
	}

 


	tos_count_tDBRollback_1++;

/**
 * [tDBRollback_1 main ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRollback_1 end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 

ok_Hash.put("tDBRollback_1", true);
end_Hash.put("tDBRollback_1", System.currentTimeMillis());




/**
 * [tDBRollback_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRollback_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tDie_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRollback_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 1);
	}
	

public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "Error mapping patients", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Error mapping patients");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Error mapping patients");
	globalMap.put("tDie_1_DIE_MESSAGES", "Error mapping patients");
	
	} catch (Exception | Error e_tDie_1) {
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	
	System.exit(4);

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_3", false);
		start_Hash.put("tWarn_3", System.currentTimeMillis());
		
	
	currentComponent="tWarn_3";

	
		int tos_count_tWarn_3 = 0;
		

 



/**
 * [tWarn_3 begin ] stop
 */
	
	/**
	 * [tWarn_3 main ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_3", "", Thread.currentThread().getId() + "", "INFO","","Transforming Extensions","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_3", 3, "Transforming Extensions", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_3_WARN_MESSAGES", "Transforming Extensions"); 
	globalMap.put("tWarn_3_WARN_PRIORITY", 3);
	globalMap.put("tWarn_3_WARN_CODE", 42);
	
} catch (Exception e_tWarn_3) {
	logIgnoredError(String.format("tWarn_3 - tWarn failed to log message due to internal error: %s", e_tWarn_3), e_tWarn_3);
}


 


	tos_count_tWarn_3++;

/**
 * [tWarn_3 main ] stop
 */
	
	/**
	 * [tWarn_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 process_data_end ] stop
 */
	
	/**
	 * [tWarn_3 end ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 

ok_Hash.put("tWarn_3", true);
end_Hash.put("tWarn_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tPostgresqlInput_8Process(globalMap);



/**
 * [tWarn_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_3 finally ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_3_SUBPROCESS_STATE", 1);
	}
	


public static class outputExtensionsStruct implements routines.system.IPersistableRow<outputExtensionsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object ent_ext_id;

				public Object getEnt_ext_id () {
					return this.ent_ext_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public String ext_typ;

				public String getExt_typ () {
					return this.ext_typ;
				}
				
			    public String ext_value;

				public String getExt_value () {
					return this.ext_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ent_ext_id == null) ? 0 : this.ent_ext_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputExtensionsStruct other = (outputExtensionsStruct) obj;
		
						if (this.ent_ext_id == null) {
							if (other.ent_ext_id != null)
								return false;
						
						} else if (!this.ent_ext_id.equals(other.ent_ext_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputExtensionsStruct other) {

		other.ent_ext_id = this.ent_ext_id;
	            other.ent_id = this.ent_id;
	            other.ext_typ = this.ext_typ;
	            other.ext_value = this.ext_value;
	            
	}

	public void copyKeysDataTo(outputExtensionsStruct other) {

		other.ent_ext_id = this.ent_ext_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.ent_ext_id = (Object) dis.readObject();
					
						this.ent_id = (Object) dis.readObject();
					
					this.ext_typ = readString(dis);
					
					this.ext_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_ext_id);
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// String
				
						writeString(this.ext_typ,dos);
					
					// String
				
						writeString(this.ext_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_ext_id="+String.valueOf(ent_ext_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",ext_typ="+ext_typ);
		sb.append(",ext_value="+ext_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputExtensionsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ent_ext_id, other.ent_ext_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public String ext_name;

				public String getExt_name () {
					return this.ext_name;
				}
				
			    public String ext_disp;

				public String getExt_disp () {
					return this.ext_disp;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.ent_id = (Object) dis.readObject();
					
					this.ext_name = readString(dis);
					
					this.ext_disp = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// String
				
						writeString(this.ext_name,dos);
					
					// String
				
						writeString(this.ext_disp,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_id="+String.valueOf(ent_id));
		sb.append(",ext_name="+ext_name);
		sb.append(",ext_disp="+ext_disp);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
outputExtensionsStruct outputExtensions = new outputExtensionsStruct();





	
	/**
	 * [tPostgresqlOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_7", false);
		start_Hash.put("tPostgresqlOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputExtensions" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_7 = 0;
		





String dbschema_tPostgresqlOutput_7 = null;
	dbschema_tPostgresqlOutput_7 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_7 = null;
if(dbschema_tPostgresqlOutput_7 == null || dbschema_tPostgresqlOutput_7.trim().length() == 0) {
	tableName_tPostgresqlOutput_7 = "ent_ext_tbl";
} else {
	tableName_tPostgresqlOutput_7 = dbschema_tPostgresqlOutput_7 + "\".\"" + "ent_ext_tbl";
}

int nb_line_tPostgresqlOutput_7 = 0;
int nb_line_update_tPostgresqlOutput_7 = 0;
int nb_line_inserted_tPostgresqlOutput_7 = 0;
int nb_line_deleted_tPostgresqlOutput_7 = 0;
int nb_line_rejected_tPostgresqlOutput_7 = 0;

int deletedCount_tPostgresqlOutput_7=0;
int updatedCount_tPostgresqlOutput_7=0;
int insertedCount_tPostgresqlOutput_7=0;
int rejectedCount_tPostgresqlOutput_7=0;

boolean whetherReject_tPostgresqlOutput_7 = false;

java.sql.Connection conn_tPostgresqlOutput_7 = null;
String dbUser_tPostgresqlOutput_7 = null;

	conn_tPostgresqlOutput_7 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_7 = 10000;
   int batchSizeCounter_tPostgresqlOutput_7=0;

int count_tPostgresqlOutput_7=0;
	    String insert_tPostgresqlOutput_7 = "INSERT INTO \"" + tableName_tPostgresqlOutput_7 + "\" (\"ent_ext_id\",\"ent_id\",\"ext_typ\",\"ext_value\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_7 = conn_tPostgresqlOutput_7.prepareStatement(insert_tPostgresqlOutput_7);
	    resourceMap.put("pstmt_tPostgresqlOutput_7", pstmt_tPostgresqlOutput_7);
	    

 



/**
 * [tPostgresqlOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputExtensionsStruct outputExtensions_tmp = new outputExtensionsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_8", false);
		start_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_8";

	
		int tos_count_tPostgresqlInput_8 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_8 = 0;
		    java.sql.Connection conn_tPostgresqlInput_8 = null;
		        conn_tPostgresqlInput_8 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_8 = conn_tPostgresqlInput_8.createStatement();

		    String dbquery_tPostgresqlInput_8 = "select ent_id, ext_name, CASE WHEN SUBSTR(ext_disp, 1, 1)= '{' THEN CAST(ext_val AS TEXT) ELSE ext_disp END AS ext_disp"
+"\nfrom \n	ent_ext_tbl \n	inner join ext_typ_tbl using (ext_typ_id)\nwhere ext_disp is not null\nand obslt_vrsn_seq_id is"
+" null";
			

            	globalMap.put("tPostgresqlInput_8_QUERY",dbquery_tPostgresqlInput_8);
		    java.sql.ResultSet rs_tPostgresqlInput_8 = null;

		    try {
		    	rs_tPostgresqlInput_8 = stmt_tPostgresqlInput_8.executeQuery(dbquery_tPostgresqlInput_8);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_8 = rs_tPostgresqlInput_8.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_8 = rsmd_tPostgresqlInput_8.getColumnCount();

		    String tmpContent_tPostgresqlInput_8 = null;
		    
		    
		    while (rs_tPostgresqlInput_8.next()) {
		        nb_line_tPostgresqlInput_8++;
		        
							if(colQtyInRs_tPostgresqlInput_8 < 1) {
								row9.ent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_8.getObject(1) != null) {
                row9.ent_id = rs_tPostgresqlInput_8.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 2) {
								row9.ext_name = null;
							} else {
	                         		
        	row9.ext_name = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_8, 2, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 3) {
								row9.ext_disp = null;
							} else {
	                         		
        	row9.ext_disp = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_8, 3, false);
		                    }
					


 



/**
 * [tPostgresqlInput_8 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_8 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 


	tos_count_tPostgresqlInput_8++;

/**
 * [tPostgresqlInput_8 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 



/**
 * [tPostgresqlInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

outputExtensions = null;


// # Output table : 'outputExtensions'
outputExtensions_tmp.ent_ext_id = java.util.UUID.randomUUID().toString() ;
outputExtensions_tmp.ent_id = row9.ent_id ;
outputExtensions_tmp.ext_typ = row9.ext_name ;
outputExtensions_tmp.ext_value = row9.ext_disp ;
outputExtensions = outputExtensions_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "outputExtensions"
if(outputExtensions != null) { 



	
	/**
	 * [tPostgresqlOutput_7 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	

			//outputExtensions
			//outputExtensions


			
				if(execStat){
					runStat.updateStatOnConnection("outputExtensions"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_7 = false;
                    if(outputExtensions.ent_ext_id == null) {
pstmt_tPostgresqlOutput_7.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_7.setObject(1, outputExtensions.ent_ext_id, java.sql.Types.OTHER);
}

                    if(outputExtensions.ent_id == null) {
pstmt_tPostgresqlOutput_7.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_7.setObject(2, outputExtensions.ent_id, java.sql.Types.OTHER);
}

                    if(outputExtensions.ext_typ == null) {
pstmt_tPostgresqlOutput_7.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_7.setString(3, outputExtensions.ext_typ);
}

                    if(outputExtensions.ext_value == null) {
pstmt_tPostgresqlOutput_7.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_7.setString(4, outputExtensions.ext_value);
}

			
    		pstmt_tPostgresqlOutput_7.addBatch();
    		nb_line_tPostgresqlOutput_7++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_7++;
    		  
            if(!whetherReject_tPostgresqlOutput_7) {
            }
    			if ((batchSize_tPostgresqlOutput_7 > 0) && (batchSize_tPostgresqlOutput_7 <= batchSizeCounter_tPostgresqlOutput_7)) {
                try {
						int countSum_tPostgresqlOutput_7 = 0;
						    
						for(int countEach_tPostgresqlOutput_7: pstmt_tPostgresqlOutput_7.executeBatch()) {
							countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
						}
				    	
				    		insertedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_7 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_7){
				    	java.sql.SQLException ne_tPostgresqlOutput_7 = e_tPostgresqlOutput_7.getNextException(),sqle_tPostgresqlOutput_7=null;
				    	String errormessage_tPostgresqlOutput_7;
						if (ne_tPostgresqlOutput_7 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_7 = new java.sql.SQLException(e_tPostgresqlOutput_7.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_7.getMessage(), ne_tPostgresqlOutput_7.getSQLState(), ne_tPostgresqlOutput_7.getErrorCode(), ne_tPostgresqlOutput_7);
							errormessage_tPostgresqlOutput_7 = sqle_tPostgresqlOutput_7.getMessage();
						}else{
							errormessage_tPostgresqlOutput_7 = e_tPostgresqlOutput_7.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_7 = 0;
						for(int countEach_tPostgresqlOutput_7: e_tPostgresqlOutput_7.getUpdateCounts()) {
							countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
						}
						
				    		insertedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_7);
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_7++;

/**
 * [tPostgresqlOutput_7 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	

 



/**
 * [tPostgresqlOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	

 



/**
 * [tPostgresqlOutput_7 process_data_end ] stop
 */

} // End of branch "outputExtensions"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 



/**
 * [tPostgresqlInput_8 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_8 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

	}
}finally{
	if (rs_tPostgresqlInput_8 != null) {
		rs_tPostgresqlInput_8.close();
	}
	if (stmt_tPostgresqlInput_8 != null) {
		stmt_tPostgresqlInput_8.close();
	}
}
globalMap.put("tPostgresqlInput_8_NB_LINE",nb_line_tPostgresqlInput_8);
 

ok_Hash.put("tPostgresqlInput_8", true);
end_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());




/**
 * [tPostgresqlInput_8 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_7 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	



	    try {
				int countSum_tPostgresqlOutput_7 = 0;
				if (pstmt_tPostgresqlOutput_7 != null && batchSizeCounter_tPostgresqlOutput_7 > 0) {
						
					for(int countEach_tPostgresqlOutput_7: pstmt_tPostgresqlOutput_7.executeBatch()) {
						countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_7){
	    	java.sql.SQLException ne_tPostgresqlOutput_7 = e_tPostgresqlOutput_7.getNextException(),sqle_tPostgresqlOutput_7=null;
	    	String errormessage_tPostgresqlOutput_7;
			if (ne_tPostgresqlOutput_7 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_7 = new java.sql.SQLException(e_tPostgresqlOutput_7.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_7.getMessage(), ne_tPostgresqlOutput_7.getSQLState(), ne_tPostgresqlOutput_7.getErrorCode(), ne_tPostgresqlOutput_7);
				errormessage_tPostgresqlOutput_7 = sqle_tPostgresqlOutput_7.getMessage();
			}else{
				errormessage_tPostgresqlOutput_7 = e_tPostgresqlOutput_7.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_7 = 0;
			for(int countEach_tPostgresqlOutput_7: e_tPostgresqlOutput_7.getUpdateCounts()) {
				countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
			}
			
	    		insertedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_7);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_7 != null) {
        		
            pstmt_tPostgresqlOutput_7.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_7");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_7", true);

	nb_line_deleted_tPostgresqlOutput_7=nb_line_deleted_tPostgresqlOutput_7+ deletedCount_tPostgresqlOutput_7;
	nb_line_update_tPostgresqlOutput_7=nb_line_update_tPostgresqlOutput_7 + updatedCount_tPostgresqlOutput_7;
	nb_line_inserted_tPostgresqlOutput_7=nb_line_inserted_tPostgresqlOutput_7 + insertedCount_tPostgresqlOutput_7;
	nb_line_rejected_tPostgresqlOutput_7=nb_line_rejected_tPostgresqlOutput_7 + rejectedCount_tPostgresqlOutput_7;
	
        globalMap.put("tPostgresqlOutput_7_NB_LINE",nb_line_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_7);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputExtensions"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_7", true);
end_Hash.put("tPostgresqlOutput_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tWarn_4Process(globalMap);



/**
 * [tPostgresqlOutput_7 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlInput_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tDBInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_8 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 



/**
 * [tPostgresqlInput_8 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_7 = null;
                if ((pstmtToClose_tPostgresqlOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_7")) != null) {
                    pstmtToClose_tPostgresqlOutput_7.close();
                }
    }
 



/**
 * [tPostgresqlOutput_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_4", false);
		start_Hash.put("tWarn_4", System.currentTimeMillis());
		
	
	currentComponent="tWarn_4";

	
		int tos_count_tWarn_4 = 0;
		

 



/**
 * [tWarn_4 begin ] stop
 */
	
	/**
	 * [tWarn_4 main ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_4", "", Thread.currentThread().getId() + "", "INFO","","Transforming Villages","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_4", 3, "Transforming Villages", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_4_WARN_MESSAGES", "Transforming Villages"); 
	globalMap.put("tWarn_4_WARN_PRIORITY", 3);
	globalMap.put("tWarn_4_WARN_CODE", 42);
	
} catch (Exception e_tWarn_4) {
	logIgnoredError(String.format("tWarn_4 - tWarn failed to log message due to internal error: %s", e_tWarn_4), e_tWarn_4);
}


 


	tos_count_tWarn_4++;

/**
 * [tWarn_4 main ] stop
 */
	
	/**
	 * [tWarn_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 process_data_end ] stop
 */
	
	/**
	 * [tWarn_4 end ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 

ok_Hash.put("tWarn_4", true);
end_Hash.put("tWarn_4", System.currentTimeMillis());




/**
 * [tWarn_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_4 finally ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_4_SUBPROCESS_STATE", 1);
	}
	


public static class outputTagsStruct implements routines.system.IPersistableRow<outputTagsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object ent_ext_id;

				public Object getEnt_ext_id () {
					return this.ent_ext_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public String ext_typ;

				public String getExt_typ () {
					return this.ext_typ;
				}
				
			    public String ext_value;

				public String getExt_value () {
					return this.ext_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ent_ext_id == null) ? 0 : this.ent_ext_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputTagsStruct other = (outputTagsStruct) obj;
		
						if (this.ent_ext_id == null) {
							if (other.ent_ext_id != null)
								return false;
						
						} else if (!this.ent_ext_id.equals(other.ent_ext_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputTagsStruct other) {

		other.ent_ext_id = this.ent_ext_id;
	            other.ent_id = this.ent_id;
	            other.ext_typ = this.ext_typ;
	            other.ext_value = this.ext_value;
	            
	}

	public void copyKeysDataTo(outputTagsStruct other) {

		other.ent_ext_id = this.ent_ext_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.ent_ext_id = (Object) dis.readObject();
					
						this.ent_id = (Object) dis.readObject();
					
					this.ext_typ = readString(dis);
					
					this.ext_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_ext_id);
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// String
				
						writeString(this.ext_typ,dos);
					
					// String
				
						writeString(this.ext_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_ext_id="+String.valueOf(ent_ext_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",ext_typ="+ext_typ);
		sb.append(",ext_value="+ext_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputTagsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ent_ext_id, other.ent_ext_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public Object tag_id;

				public Object getTag_id () {
					return this.tag_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public String tag_name;

				public String getTag_name () {
					return this.tag_name;
				}
				
			    public String tag_value;

				public String getTag_value () {
					return this.tag_value;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public Object crt_usr_id;

				public Object getCrt_usr_id () {
					return this.crt_usr_id;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object obslt_usr_id;

				public Object getObslt_usr_id () {
					return this.obslt_usr_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.tag_id = (Object) dis.readObject();
					
						this.ent_id = (Object) dis.readObject();
					
					this.tag_name = readString(dis);
					
					this.tag_value = readString(dis);
					
					this.crt_utc = readDate(dis);
					
						this.crt_usr_id = (Object) dis.readObject();
					
					this.obslt_utc = readDate(dis);
					
						this.obslt_usr_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.tag_id);
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// String
				
						writeString(this.tag_name,dos);
					
					// String
				
						writeString(this.tag_value,dos);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.crt_usr_id);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.obslt_usr_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("tag_id="+String.valueOf(tag_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",tag_name="+tag_name);
		sb.append(",tag_value="+tag_value);
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",crt_usr_id="+String.valueOf(crt_usr_id));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",obslt_usr_id="+String.valueOf(obslt_usr_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();
outputTagsStruct outputTags = new outputTagsStruct();





	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputTags" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = "ent_ext_tbl";
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + "ent_ext_tbl";
}

int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tDBOutput_4 = 10000;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
	    String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4 + "\" (\"ent_ext_id\",\"ent_id\",\"ext_typ\",\"ext_value\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row19" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputTagsStruct outputTags_tmp = new outputTagsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
		        conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "select ent_tag_tbl.* from ent_tag_tbl \ninner join ent_vrsn_tbl using (ent_id)\ninner join psn_tbl using (ent_vrsn_id)"
+"\nwhere ent_tag_tbl.obslt_utc is null";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row19.tag_id = null;
							} else {
		                          
            if(rs_tDBInput_4.getObject(1) != null) {
                row19.tag_id = rs_tDBInput_4.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row19.ent_id = null;
							} else {
		                          
            if(rs_tDBInput_4.getObject(2) != null) {
                row19.ent_id = rs_tDBInput_4.getObject(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row19.tag_name = null;
							} else {
	                         		
        	row19.tag_name = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row19.tag_value = null;
							} else {
	                         		
        	row19.tag_value = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row19.crt_utc = null;
							} else {
										
			row19.crt_utc = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 5);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row19.crt_usr_id = null;
							} else {
		                          
            if(rs_tDBInput_4.getObject(6) != null) {
                row19.crt_usr_id = rs_tDBInput_4.getObject(6);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								row19.obslt_utc = null;
							} else {
										
			row19.obslt_utc = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 7);
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								row19.obslt_usr_id = null;
							} else {
		                          
            if(rs_tDBInput_4.getObject(8) != null) {
                row19.obslt_usr_id = rs_tDBInput_4.getObject(8);
            } else {
                    row19.obslt_usr_id = null;
            }
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

			//row19
			//row19


			
				if(execStat){
					runStat.updateStatOnConnection("row19"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

outputTags = null;


// # Output table : 'outputTags'
outputTags_tmp.ent_ext_id = java.util.UUID.randomUUID().toString() ;
outputTags_tmp.ent_id = row19.ent_id ;
outputTags_tmp.ext_typ = row19.tag_name ;
outputTags_tmp.ext_value = row19.tag_value ;
outputTags = outputTags_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "outputTags"
if(outputTags != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

			//outputTags
			//outputTags


			
				if(execStat){
					runStat.updateStatOnConnection("outputTags"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_4 = false;
                    if(outputTags.ent_ext_id == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_4.setObject(1, outputTags.ent_ext_id, java.sql.Types.OTHER);
}

                    if(outputTags.ent_id == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_4.setObject(2, outputTags.ent_id, java.sql.Types.OTHER);
}

                    if(outputTags.ext_typ == null) {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(3, outputTags.ext_typ);
}

                    if(outputTags.ext_value == null) {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(4, outputTags.ext_value);
}

			
    		pstmt_tDBOutput_4.addBatch();
    		nb_line_tDBOutput_4++;
    		  
    		  batchSizeCounter_tDBOutput_4++;
    		  
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
				    	
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    	int countSum_tDBOutput_4 = 0;
						for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
						
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    	System.err.println(errormessage_tDBOutput_4);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "outputTags"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row19"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    	int countSum_tDBOutput_4 = 0;
			for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
				countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
			}
			
	    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
	    	
	    	System.err.println(errormessage_tDBOutput_4);
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputTags"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tPostgresqlInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public Object plc_id;

				public Object getPlc_id () {
					return this.plc_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.fac_id == null) ? 0 : this.fac_id.hashCode());
					
						result = prime * result + ((this.plc_id == null) ? 0 : this.plc_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.fac_id == null) {
							if (other.fac_id != null)
								return false;
						
						} else if (!this.fac_id.equals(other.fac_id))
						
							return false;
					
						if (this.plc_id == null) {
							if (other.plc_id != null)
								return false;
						
						} else if (!this.plc_id.equals(other.plc_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.fac_id = this.fac_id;
	            other.plc_id = this.plc_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.fac_id = this.fac_id;
	            	other.plc_id = this.plc_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.fac_id = (Object) dis.readObject();
					
						this.plc_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// Object
				
       			    	dos.writeObject(this.plc_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fac_id="+String.valueOf(fac_id));
		sb.append(",plc_id="+String.valueOf(plc_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.fac_id, other.fac_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.plc_id, other.plc_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outputVillagesStruct implements routines.system.IPersistableRow<outputVillagesStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object plc_id;

				public Object getPlc_id () {
					return this.plc_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public String sts_cs;

				public String getSts_cs () {
					return this.sts_cs;
				}
				
			    public String type_mnemonic;

				public String getType_mnemonic () {
					return this.type_mnemonic;
				}
				
			    public Object parent_id;

				public Object getParent_id () {
					return this.parent_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.plc_id == null) ? 0 : this.plc_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputVillagesStruct other = (outputVillagesStruct) obj;
		
						if (this.plc_id == null) {
							if (other.plc_id != null)
								return false;
						
						} else if (!this.plc_id.equals(other.plc_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputVillagesStruct other) {

		other.plc_id = this.plc_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            other.sts_cs = this.sts_cs;
	            other.type_mnemonic = this.type_mnemonic;
	            other.parent_id = this.parent_id;
	            
	}

	public void copyKeysDataTo(outputVillagesStruct other) {

		other.plc_id = this.plc_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.plc_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.sts_cs = readString(dis);
					
					this.type_mnemonic = readString(dis);
					
						this.parent_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.plc_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// String
				
						writeString(this.sts_cs,dos);
					
					// String
				
						writeString(this.type_mnemonic,dos);
					
					// Object
				
       			    	dos.writeObject(this.parent_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("plc_id="+String.valueOf(plc_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",sts_cs="+sts_cs);
		sb.append(",type_mnemonic="+type_mnemonic);
		sb.append(",parent_id="+String.valueOf(parent_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputVillagesStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.plc_id, other.plc_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outputFacilityRelationsStruct implements routines.system.IPersistableRow<outputFacilityRelationsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public Object plc_id;

				public Object getPlc_id () {
					return this.plc_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.fac_id == null) ? 0 : this.fac_id.hashCode());
					
						result = prime * result + ((this.plc_id == null) ? 0 : this.plc_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputFacilityRelationsStruct other = (outputFacilityRelationsStruct) obj;
		
						if (this.fac_id == null) {
							if (other.fac_id != null)
								return false;
						
						} else if (!this.fac_id.equals(other.fac_id))
						
							return false;
					
						if (this.plc_id == null) {
							if (other.plc_id != null)
								return false;
						
						} else if (!this.plc_id.equals(other.plc_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputFacilityRelationsStruct other) {

		other.fac_id = this.fac_id;
	            other.plc_id = this.plc_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            
	}

	public void copyKeysDataTo(outputFacilityRelationsStruct other) {

		other.fac_id = this.fac_id;
	            	other.plc_id = this.plc_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.fac_id = (Object) dis.readObject();
					
						this.plc_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// Object
				
       			    	dos.writeObject(this.plc_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("fac_id="+String.valueOf(fac_id));
		sb.append(",plc_id="+String.valueOf(plc_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputFacilityRelationsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.fac_id, other.fac_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.plc_id, other.plc_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public Object ent_vrsn_id;

				public Object getEnt_vrsn_id () {
					return this.ent_vrsn_id;
				}
				
			    public Object cls_cd_id;

				public Object getCls_cd_id () {
					return this.cls_cd_id;
				}
				
			    public Object dtr_cd_id;

				public Object getDtr_cd_id () {
					return this.dtr_cd_id;
				}
				
			    public Object tpl_id;

				public Object getTpl_id () {
					return this.tpl_id;
				}
				
			    public Double vrsn_seq_id;

				public Double getVrsn_seq_id () {
					return this.vrsn_seq_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public Object rplc_vrsn_id;

				public Object getRplc_vrsn_id () {
					return this.rplc_vrsn_id;
				}
				
			    public Object sts_cd_id;

				public Object getSts_cd_id () {
					return this.sts_cd_id;
				}
				
			    public Object typ_cd_id;

				public Object getTyp_cd_id () {
					return this.typ_cd_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public Object crt_usr_id;

				public Object getCrt_usr_id () {
					return this.crt_usr_id;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object obslt_usr_id;

				public Object getObslt_usr_id () {
					return this.obslt_usr_id;
				}
				
			    public String sts_cs;

				public String getSts_cs () {
					return this.sts_cs;
				}
				
			    public Boolean mob_ind;

				public Boolean getMob_ind () {
					return this.mob_ind;
				}
				
			    public Double lat;

				public Double getLat () {
					return this.lat;
				}
				
			    public Double lng;

				public Double getLng () {
					return this.lng;
				}
				
			    public Object parent_id;

				public Object getParent_id () {
					return this.parent_id;
				}
				
			    public String type_mnemonic;

				public String getType_mnemonic () {
					return this.type_mnemonic;
				}
				
			    public String tel_val;

				public String getTel_val () {
					return this.tel_val;
				}
				
			    public Object facility;

				public Object getFacility () {
					return this.facility;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.ent_vrsn_id = (Object) dis.readObject();
					
						this.cls_cd_id = (Object) dis.readObject();
					
						this.dtr_cd_id = (Object) dis.readObject();
					
						this.tpl_id = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.vrsn_seq_id = null;
           				} else {
           			    	this.vrsn_seq_id = dis.readDouble();
           				}
					
						this.ent_id = (Object) dis.readObject();
					
						this.rplc_vrsn_id = (Object) dis.readObject();
					
						this.sts_cd_id = (Object) dis.readObject();
					
						this.typ_cd_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
						this.crt_usr_id = (Object) dis.readObject();
					
					this.obslt_utc = readDate(dis);
					
						this.obslt_usr_id = (Object) dis.readObject();
					
					this.sts_cs = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.mob_ind = null;
           				} else {
           			    	this.mob_ind = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
						this.parent_id = (Object) dis.readObject();
					
					this.type_mnemonic = readString(dis);
					
					this.tel_val = readString(dis);
					
						this.facility = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.cls_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.dtr_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.tpl_id);
					
					// Double
				
						if(this.vrsn_seq_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.vrsn_seq_id);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// Object
				
       			    	dos.writeObject(this.rplc_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.sts_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.typ_cd_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.crt_usr_id);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.obslt_usr_id);
					
					// String
				
						writeString(this.sts_cs,dos);
					
					// Boolean
				
						if(this.mob_ind == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.mob_ind);
		            	}
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.parent_id);
					
					// String
				
						writeString(this.type_mnemonic,dos);
					
					// String
				
						writeString(this.tel_val,dos);
					
					// Object
				
       			    	dos.writeObject(this.facility);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_vrsn_id="+String.valueOf(ent_vrsn_id));
		sb.append(",cls_cd_id="+String.valueOf(cls_cd_id));
		sb.append(",dtr_cd_id="+String.valueOf(dtr_cd_id));
		sb.append(",tpl_id="+String.valueOf(tpl_id));
		sb.append(",vrsn_seq_id="+String.valueOf(vrsn_seq_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",rplc_vrsn_id="+String.valueOf(rplc_vrsn_id));
		sb.append(",sts_cd_id="+String.valueOf(sts_cd_id));
		sb.append(",typ_cd_id="+String.valueOf(typ_cd_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",crt_usr_id="+String.valueOf(crt_usr_id));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",obslt_usr_id="+String.valueOf(obslt_usr_id));
		sb.append(",sts_cs="+sts_cs);
		sb.append(",mob_ind="+String.valueOf(mob_ind));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",type_mnemonic="+type_mnemonic);
		sb.append(",tel_val="+tel_val);
		sb.append(",facility="+String.valueOf(facility));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_6Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_6Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public Object ent_vrsn_id;

				public Object getEnt_vrsn_id () {
					return this.ent_vrsn_id;
				}
				
			    public Object cls_cd_id;

				public Object getCls_cd_id () {
					return this.cls_cd_id;
				}
				
			    public Object dtr_cd_id;

				public Object getDtr_cd_id () {
					return this.dtr_cd_id;
				}
				
			    public Object tpl_id;

				public Object getTpl_id () {
					return this.tpl_id;
				}
				
			    public Double vrsn_seq_id;

				public Double getVrsn_seq_id () {
					return this.vrsn_seq_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public Object rplc_vrsn_id;

				public Object getRplc_vrsn_id () {
					return this.rplc_vrsn_id;
				}
				
			    public Object sts_cd_id;

				public Object getSts_cd_id () {
					return this.sts_cd_id;
				}
				
			    public Object typ_cd_id;

				public Object getTyp_cd_id () {
					return this.typ_cd_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public Object crt_usr_id;

				public Object getCrt_usr_id () {
					return this.crt_usr_id;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object obslt_usr_id;

				public Object getObslt_usr_id () {
					return this.obslt_usr_id;
				}
				
			    public String sts_cs;

				public String getSts_cs () {
					return this.sts_cs;
				}
				
			    public Boolean mob_ind;

				public Boolean getMob_ind () {
					return this.mob_ind;
				}
				
			    public Double lat;

				public Double getLat () {
					return this.lat;
				}
				
			    public Double lng;

				public Double getLng () {
					return this.lng;
				}
				
			    public Object parent_id;

				public Object getParent_id () {
					return this.parent_id;
				}
				
			    public String type_mnemonic;

				public String getType_mnemonic () {
					return this.type_mnemonic;
				}
				
			    public String tel_val;

				public String getTel_val () {
					return this.tel_val;
				}
				
			    public Object facility;

				public Object getFacility () {
					return this.facility;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.ent_vrsn_id = (Object) dis.readObject();
					
						this.cls_cd_id = (Object) dis.readObject();
					
						this.dtr_cd_id = (Object) dis.readObject();
					
						this.tpl_id = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.vrsn_seq_id = null;
           				} else {
           			    	this.vrsn_seq_id = dis.readDouble();
           				}
					
						this.ent_id = (Object) dis.readObject();
					
						this.rplc_vrsn_id = (Object) dis.readObject();
					
						this.sts_cd_id = (Object) dis.readObject();
					
						this.typ_cd_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
						this.crt_usr_id = (Object) dis.readObject();
					
					this.obslt_utc = readDate(dis);
					
						this.obslt_usr_id = (Object) dis.readObject();
					
					this.sts_cs = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.mob_ind = null;
           				} else {
           			    	this.mob_ind = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lat = null;
           				} else {
           			    	this.lat = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lng = null;
           				} else {
           			    	this.lng = dis.readDouble();
           				}
					
						this.parent_id = (Object) dis.readObject();
					
					this.type_mnemonic = readString(dis);
					
					this.tel_val = readString(dis);
					
						this.facility = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.cls_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.dtr_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.tpl_id);
					
					// Double
				
						if(this.vrsn_seq_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.vrsn_seq_id);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// Object
				
       			    	dos.writeObject(this.rplc_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.sts_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.typ_cd_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.crt_usr_id);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.obslt_usr_id);
					
					// String
				
						writeString(this.sts_cs,dos);
					
					// Boolean
				
						if(this.mob_ind == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.mob_ind);
		            	}
					
					// Double
				
						if(this.lat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lat);
		            	}
					
					// Double
				
						if(this.lng == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.lng);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.parent_id);
					
					// String
				
						writeString(this.type_mnemonic,dos);
					
					// String
				
						writeString(this.tel_val,dos);
					
					// Object
				
       			    	dos.writeObject(this.facility);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_vrsn_id="+String.valueOf(ent_vrsn_id));
		sb.append(",cls_cd_id="+String.valueOf(cls_cd_id));
		sb.append(",dtr_cd_id="+String.valueOf(dtr_cd_id));
		sb.append(",tpl_id="+String.valueOf(tpl_id));
		sb.append(",vrsn_seq_id="+String.valueOf(vrsn_seq_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",rplc_vrsn_id="+String.valueOf(rplc_vrsn_id));
		sb.append(",sts_cd_id="+String.valueOf(sts_cd_id));
		sb.append(",typ_cd_id="+String.valueOf(typ_cd_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",crt_usr_id="+String.valueOf(crt_usr_id));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",obslt_usr_id="+String.valueOf(obslt_usr_id));
		sb.append(",sts_cs="+sts_cs);
		sb.append(",mob_ind="+String.valueOf(mob_ind));
		sb.append(",lat="+String.valueOf(lat));
		sb.append(",lng="+String.valueOf(lng));
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",type_mnemonic="+type_mnemonic);
		sb.append(",tel_val="+tel_val);
		sb.append(",facility="+String.valueOf(facility));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_7Process(globalMap);

		row6Struct row6 = new row6Struct();
outputVillagesStruct outputVillages = new outputVillagesStruct();
outputFacilityRelationsStruct outputFacilityRelations = new outputFacilityRelationsStruct();
row8Struct row8 = new row8Struct();





	
	/**
	 * [tPostgresqlOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_5", false);
		start_Hash.put("tPostgresqlOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputVillages" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_5 = 0;
		





String dbschema_tPostgresqlOutput_5 = null;
	dbschema_tPostgresqlOutput_5 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_5 = null;
if(dbschema_tPostgresqlOutput_5 == null || dbschema_tPostgresqlOutput_5.trim().length() == 0) {
	tableName_tPostgresqlOutput_5 = "plc_tbl";
} else {
	tableName_tPostgresqlOutput_5 = dbschema_tPostgresqlOutput_5 + "\".\"" + "plc_tbl";
}

        int updateKeyCount_tPostgresqlOutput_5 = 1;
        if(updateKeyCount_tPostgresqlOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_5 = 0;
int nb_line_update_tPostgresqlOutput_5 = 0;
int nb_line_inserted_tPostgresqlOutput_5 = 0;
int nb_line_deleted_tPostgresqlOutput_5 = 0;
int nb_line_rejected_tPostgresqlOutput_5 = 0;

int deletedCount_tPostgresqlOutput_5=0;
int updatedCount_tPostgresqlOutput_5=0;
int insertedCount_tPostgresqlOutput_5=0;
int rejectedCount_tPostgresqlOutput_5=0;

boolean whetherReject_tPostgresqlOutput_5 = false;

java.sql.Connection conn_tPostgresqlOutput_5 = null;
String dbUser_tPostgresqlOutput_5 = null;

	conn_tPostgresqlOutput_5 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	



int count_tPostgresqlOutput_5=0;
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tPostgresqlOutput_5 + "\" WHERE \"plc_id\" = ?");
	    resourceMap.put("pstmt_tPostgresqlOutput_5", pstmt_tPostgresqlOutput_5);
	    String insert_tPostgresqlOutput_5 = "INSERT INTO \"" + tableName_tPostgresqlOutput_5 + "\" (\"plc_id\",\"crt_etl_id\",\"upd_etl_id\",\"crt_utc\",\"upd_utc\",\"obslt_utc\",\"sts_cs\",\"type_mnemonic\",\"parent_id\") VALUES (?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5.prepareStatement(insert_tPostgresqlOutput_5);
	    resourceMap.put("pstmtInsert_tPostgresqlOutput_5", pstmtInsert_tPostgresqlOutput_5);
	    String update_tPostgresqlOutput_5 = "UPDATE \"" + tableName_tPostgresqlOutput_5 + "\" SET \"crt_etl_id\" = ?,\"upd_etl_id\" = ?,\"crt_utc\" = ?,\"upd_utc\" = ?,\"obslt_utc\" = ?,\"sts_cs\" = ?,\"type_mnemonic\" = ?,\"parent_id\" = ? WHERE \"plc_id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5.prepareStatement(update_tPostgresqlOutput_5);
	    resourceMap.put("pstmtUpdate_tPostgresqlOutput_5", pstmtUpdate_tPostgresqlOutput_5);
	    

 



/**
 * [tPostgresqlOutput_5 begin ] stop
 */





	
	/**
	 * [tPostgresqlOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_6", false);
		start_Hash.put("tPostgresqlOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_6 = 0;
		





String dbschema_tPostgresqlOutput_6 = null;
	dbschema_tPostgresqlOutput_6 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_6 = null;
if(dbschema_tPostgresqlOutput_6 == null || dbschema_tPostgresqlOutput_6.trim().length() == 0) {
	tableName_tPostgresqlOutput_6 = "fac_plc_ded_sdl_tbl";
} else {
	tableName_tPostgresqlOutput_6 = dbschema_tPostgresqlOutput_6 + "\".\"" + "fac_plc_ded_sdl_tbl";
}

        int updateKeyCount_tPostgresqlOutput_6 = 2;
        if(updateKeyCount_tPostgresqlOutput_6 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_6 = 0;
int nb_line_update_tPostgresqlOutput_6 = 0;
int nb_line_inserted_tPostgresqlOutput_6 = 0;
int nb_line_deleted_tPostgresqlOutput_6 = 0;
int nb_line_rejected_tPostgresqlOutput_6 = 0;

int deletedCount_tPostgresqlOutput_6=0;
int updatedCount_tPostgresqlOutput_6=0;
int insertedCount_tPostgresqlOutput_6=0;
int rejectedCount_tPostgresqlOutput_6=0;

boolean whetherReject_tPostgresqlOutput_6 = false;

java.sql.Connection conn_tPostgresqlOutput_6 = null;
String dbUser_tPostgresqlOutput_6 = null;

	conn_tPostgresqlOutput_6 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	



int count_tPostgresqlOutput_6=0;
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tPostgresqlOutput_6 + "\" WHERE \"fac_id\" = ? AND \"plc_id\" = ?");
	    resourceMap.put("pstmt_tPostgresqlOutput_6", pstmt_tPostgresqlOutput_6);
	    String insert_tPostgresqlOutput_6 = "INSERT INTO \"" + tableName_tPostgresqlOutput_6 + "\" (\"fac_id\",\"plc_id\",\"crt_etl_id\",\"upd_etl_id\",\"crt_utc\",\"upd_utc\",\"obslt_utc\") VALUES (?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6.prepareStatement(insert_tPostgresqlOutput_6);
	    resourceMap.put("pstmtInsert_tPostgresqlOutput_6", pstmtInsert_tPostgresqlOutput_6);
	    String update_tPostgresqlOutput_6 = "UPDATE \"" + tableName_tPostgresqlOutput_6 + "\" SET \"crt_etl_id\" = ?,\"upd_etl_id\" = ?,\"crt_utc\" = ?,\"upd_utc\" = ?,\"obslt_utc\" = ? WHERE \"fac_id\" = ? AND \"plc_id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6.prepareStatement(update_tPostgresqlOutput_6);
	    resourceMap.put("pstmtUpdate_tPostgresqlOutput_6", pstmtUpdate_tPostgresqlOutput_6);
	    

 



/**
 * [tPostgresqlOutput_6 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputFacilityRelations" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	
		tHash_Lookup_row7.initGet();
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputVillagesStruct outputVillages_tmp = new outputVillagesStruct();
outputFacilityRelationsStruct outputFacilityRelations_tmp = new outputFacilityRelationsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_6", false);
		start_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_6";

	
		int tos_count_tPostgresqlInput_6 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_6 = 0;
		    java.sql.Connection conn_tPostgresqlInput_6 = null;
		        conn_tPostgresqlInput_6 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_6 = conn_tPostgresqlInput_6.createStatement();

		    String dbquery_tPostgresqlInput_6 = "with parent_rel as (\n	select * from ent_rel_tbl where rel_typ_cd_id = 'bfcbb345-86db-43ba-b47e-e7411276ac7c' and obslt"
+"_vrsn_seq_id is null\n), dedsdl as (\n	select * from ent_rel_tbl where rel_typ_cd_id = '455f1772-f580-47e8-86bd-b5ce25d3"
+"51f9' and obslt_vrsn_seq_id is null\n)\nselect distinct plc_cur_vrsn_vw.*, parent.ent_id as parent_id, type.mnemonic as "
+"type_mnemonic, tel.tel_val, dedsdl.trg_ent_id as facility from plc_cur_vrsn_vw \nleft join cd_cur_vrsn_vw as type on (ty"
+"pe.cd_id = plc_cur_vrsn_vw.typ_cd_id)\nleft join parent_rel on (plc_cur_vrsn_vw.ent_id = parent_rel.src_ent_id) \nleft j"
+"oin plc_cur_vrsn_vw as parent on (parent_rel.trg_ent_id = parent.ent_id)\nleft join ent_cur_tel_vw as tel on (tel.ent_id"
+" = plc_cur_vrsn_vw.ent_id)\nleft join dedsdl on (plc_cur_vrsn_vw.ent_id = dedsdl.src_ent_id)\nwhere\nplc_cur_vrsn_vw.cls"
+"_cd_id != 'ff34dfa7-c6d3-4f8b-bc9f-14bcdc13ba6c'\norder by vrsn_seq_id";
			

            	globalMap.put("tPostgresqlInput_6_QUERY",dbquery_tPostgresqlInput_6);
		    java.sql.ResultSet rs_tPostgresqlInput_6 = null;

		    try {
		    	rs_tPostgresqlInput_6 = stmt_tPostgresqlInput_6.executeQuery(dbquery_tPostgresqlInput_6);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_6 = rs_tPostgresqlInput_6.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_6 = rsmd_tPostgresqlInput_6.getColumnCount();

		    String tmpContent_tPostgresqlInput_6 = null;
		    
		    
		    while (rs_tPostgresqlInput_6.next()) {
		        nb_line_tPostgresqlInput_6++;
		        
							if(colQtyInRs_tPostgresqlInput_6 < 1) {
								row6.ent_vrsn_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_6.getObject(1) != null) {
                row6.ent_vrsn_id = rs_tPostgresqlInput_6.getObject(1);
            } else {
                    row6.ent_vrsn_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 2) {
								row6.cls_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_6.getObject(2) != null) {
                row6.cls_cd_id = rs_tPostgresqlInput_6.getObject(2);
            } else {
                    row6.cls_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 3) {
								row6.dtr_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_6.getObject(3) != null) {
                row6.dtr_cd_id = rs_tPostgresqlInput_6.getObject(3);
            } else {
                    row6.dtr_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 4) {
								row6.tpl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_6.getObject(4) != null) {
                row6.tpl_id = rs_tPostgresqlInput_6.getObject(4);
            } else {
                    row6.tpl_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 5) {
								row6.vrsn_seq_id = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_6.getObject(5) != null) {
                row6.vrsn_seq_id = rs_tPostgresqlInput_6.getDouble(5);
            } else {
                    row6.vrsn_seq_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 6) {
								row6.ent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_6.getObject(6) != null) {
                row6.ent_id = rs_tPostgresqlInput_6.getObject(6);
            } else {
                    row6.ent_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 7) {
								row6.rplc_vrsn_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_6.getObject(7) != null) {
                row6.rplc_vrsn_id = rs_tPostgresqlInput_6.getObject(7);
            } else {
                    row6.rplc_vrsn_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 8) {
								row6.sts_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_6.getObject(8) != null) {
                row6.sts_cd_id = rs_tPostgresqlInput_6.getObject(8);
            } else {
                    row6.sts_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 9) {
								row6.typ_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_6.getObject(9) != null) {
                row6.typ_cd_id = rs_tPostgresqlInput_6.getObject(9);
            } else {
                    row6.typ_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 10) {
								row6.crt_utc = null;
							} else {
										
			row6.crt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_6, 10);
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 11) {
								row6.crt_usr_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_6.getObject(11) != null) {
                row6.crt_usr_id = rs_tPostgresqlInput_6.getObject(11);
            } else {
                    row6.crt_usr_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 12) {
								row6.obslt_utc = null;
							} else {
										
			row6.obslt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_6, 12);
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 13) {
								row6.obslt_usr_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_6.getObject(13) != null) {
                row6.obslt_usr_id = rs_tPostgresqlInput_6.getObject(13);
            } else {
                    row6.obslt_usr_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 14) {
								row6.sts_cs = null;
							} else {
	                         		
        	row6.sts_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_6, 14, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 15) {
								row6.mob_ind = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_6.getObject(15) != null) {
                row6.mob_ind = rs_tPostgresqlInput_6.getBoolean(15);
            } else {
                    row6.mob_ind = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 16) {
								row6.lat = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_6.getObject(16) != null) {
                row6.lat = rs_tPostgresqlInput_6.getDouble(16);
            } else {
                    row6.lat = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 17) {
								row6.lng = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_6.getObject(17) != null) {
                row6.lng = rs_tPostgresqlInput_6.getDouble(17);
            } else {
                    row6.lng = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 18) {
								row6.parent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_6.getObject(18) != null) {
                row6.parent_id = rs_tPostgresqlInput_6.getObject(18);
            } else {
                    row6.parent_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 19) {
								row6.type_mnemonic = null;
							} else {
	                         		
        	row6.type_mnemonic = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_6, 19, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 20) {
								row6.tel_val = null;
							} else {
	                         		
        	row6.tel_val = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_6, 20, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 21) {
								row6.facility = null;
							} else {
		                          
            if(rs_tPostgresqlInput_6.getObject(21) != null) {
                row6.facility = rs_tPostgresqlInput_6.getObject(21);
            } else {
                    row6.facility = null;
            }
		                    }
					


 



/**
 * [tPostgresqlInput_6 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_6 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 


	tos_count_tPostgresqlInput_6++;

/**
 * [tPostgresqlInput_6 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 



/**
 * [tPostgresqlInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow7 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow7 = true;
			           		  	} // G 21
                    		  	
                    		

							row7Struct row7 = null;
                    		  	 
							

								while ((tHash_Lookup_row7 != null && tHash_Lookup_row7.hasNext()) || forceLooprow7) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row7'
									
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								
								if(!forceLooprow7) { // G 46
								
							
								 
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow7 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

outputVillages = null;
outputFacilityRelations = null;


// # Output table : 'outputVillages'
outputVillages_tmp.plc_id = row6.ent_id ;
outputVillages_tmp.crt_etl_id = row7.etl_id ;
outputVillages_tmp.upd_etl_id = null;
outputVillages_tmp.crt_utc = row6.crt_utc;
outputVillages_tmp.upd_utc = null;
outputVillages_tmp.obslt_utc = row6.obslt_utc;
outputVillages_tmp.sts_cs = row6.sts_cs;
outputVillages_tmp.type_mnemonic = row6.type_mnemonic;
outputVillages_tmp.parent_id = row6.parent_id;
outputVillages = outputVillages_tmp;

// # Output table : 'outputFacilityRelations'
outputFacilityRelations_tmp.fac_id = row6.facility ;
outputFacilityRelations_tmp.plc_id = row6.ent_id ;
outputFacilityRelations_tmp.crt_etl_id = row7.etl_id ;
outputFacilityRelations_tmp.upd_etl_id = null;
outputFacilityRelations_tmp.crt_utc = row6.crt_utc;
outputFacilityRelations_tmp.upd_utc = null;
outputFacilityRelations_tmp.obslt_utc = row6.obslt_utc;
outputFacilityRelations = outputFacilityRelations_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "outputVillages"
if(outputVillages != null) { 



	
	/**
	 * [tPostgresqlOutput_5 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	

			//outputVillages
			//outputVillages


			
				if(execStat){
					runStat.updateStatOnConnection("outputVillages"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_5 = false;
                    if(outputVillages.plc_id == null) {
pstmt_tPostgresqlOutput_5.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_5.setObject(1, outputVillages.plc_id, java.sql.Types.OTHER);
}

            int checkCount_tPostgresqlOutput_5 = -1;
            try (java.sql.ResultSet rs_tPostgresqlOutput_5 = pstmt_tPostgresqlOutput_5.executeQuery()) {
                while(rs_tPostgresqlOutput_5.next()) {
                    checkCount_tPostgresqlOutput_5 = rs_tPostgresqlOutput_5.getInt(1);
                }
            }
            if(checkCount_tPostgresqlOutput_5 > 0) {
                        if(outputVillages.crt_etl_id == null) {
pstmtUpdate_tPostgresqlOutput_5.setNull(1, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_5.setObject(1, outputVillages.crt_etl_id, java.sql.Types.OTHER);
}

                        if(outputVillages.upd_etl_id == null) {
pstmtUpdate_tPostgresqlOutput_5.setNull(2, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_5.setObject(2, outputVillages.upd_etl_id, java.sql.Types.OTHER);
}

                        if(outputVillages.crt_utc != null) {
pstmtUpdate_tPostgresqlOutput_5.setTimestamp(3, new java.sql.Timestamp(outputVillages.crt_utc.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_5.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(outputVillages.upd_utc != null) {
pstmtUpdate_tPostgresqlOutput_5.setTimestamp(4, new java.sql.Timestamp(outputVillages.upd_utc.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_5.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(outputVillages.obslt_utc != null) {
pstmtUpdate_tPostgresqlOutput_5.setTimestamp(5, new java.sql.Timestamp(outputVillages.obslt_utc.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_5.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(outputVillages.sts_cs == null) {
pstmtUpdate_tPostgresqlOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_5.setString(6, outputVillages.sts_cs);
}

                        if(outputVillages.type_mnemonic == null) {
pstmtUpdate_tPostgresqlOutput_5.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_5.setString(7, outputVillages.type_mnemonic);
}

                        if(outputVillages.parent_id == null) {
pstmtUpdate_tPostgresqlOutput_5.setNull(8, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_5.setObject(8, outputVillages.parent_id, java.sql.Types.OTHER);
}

                        if(outputVillages.plc_id == null) {
pstmtUpdate_tPostgresqlOutput_5.setNull(9 + count_tPostgresqlOutput_5, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_5.setObject(9 + count_tPostgresqlOutput_5, outputVillages.plc_id);
}

                try {
					
                    updatedCount_tPostgresqlOutput_5 = updatedCount_tPostgresqlOutput_5 + pstmtUpdate_tPostgresqlOutput_5.executeUpdate();
                    nb_line_tPostgresqlOutput_5++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tPostgresqlOutput_5 = true;
                        nb_line_tPostgresqlOutput_5++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(outputVillages.plc_id == null) {
pstmtInsert_tPostgresqlOutput_5.setNull(1, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_5.setObject(1, outputVillages.plc_id, java.sql.Types.OTHER);
}

                        if(outputVillages.crt_etl_id == null) {
pstmtInsert_tPostgresqlOutput_5.setNull(2, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_5.setObject(2, outputVillages.crt_etl_id, java.sql.Types.OTHER);
}

                        if(outputVillages.upd_etl_id == null) {
pstmtInsert_tPostgresqlOutput_5.setNull(3, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_5.setObject(3, outputVillages.upd_etl_id, java.sql.Types.OTHER);
}

                        if(outputVillages.crt_utc != null) {
pstmtInsert_tPostgresqlOutput_5.setTimestamp(4, new java.sql.Timestamp(outputVillages.crt_utc.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_5.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(outputVillages.upd_utc != null) {
pstmtInsert_tPostgresqlOutput_5.setTimestamp(5, new java.sql.Timestamp(outputVillages.upd_utc.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_5.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(outputVillages.obslt_utc != null) {
pstmtInsert_tPostgresqlOutput_5.setTimestamp(6, new java.sql.Timestamp(outputVillages.obslt_utc.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_5.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(outputVillages.sts_cs == null) {
pstmtInsert_tPostgresqlOutput_5.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_5.setString(7, outputVillages.sts_cs);
}

                        if(outputVillages.type_mnemonic == null) {
pstmtInsert_tPostgresqlOutput_5.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_5.setString(8, outputVillages.type_mnemonic);
}

                        if(outputVillages.parent_id == null) {
pstmtInsert_tPostgresqlOutput_5.setNull(9, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_5.setObject(9, outputVillages.parent_id, java.sql.Types.OTHER);
}

                try {
					
                    insertedCount_tPostgresqlOutput_5 = insertedCount_tPostgresqlOutput_5 + pstmtInsert_tPostgresqlOutput_5.executeUpdate();
                    nb_line_tPostgresqlOutput_5++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tPostgresqlOutput_5 = true;
                        nb_line_tPostgresqlOutput_5++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tPostgresqlOutput_5) {
            }

 


	tos_count_tPostgresqlOutput_5++;

/**
 * [tPostgresqlOutput_5 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	

 



/**
 * [tPostgresqlOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	

 



/**
 * [tPostgresqlOutput_5 process_data_end ] stop
 */

} // End of branch "outputVillages"




// Start of branch "outputFacilityRelations"
if(outputFacilityRelations != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

			//outputFacilityRelations
			//outputFacilityRelations


			
				if(execStat){
					runStat.updateStatOnConnection("outputFacilityRelations"+iterateId,1, 1);
				} 
			

		

          row8 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
	        ope_tFilterRow_1.matches((outputFacilityRelations.fac_id != null)
	                       , "fac_id!=null failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row8 == null){ 
                row8 = new row8Struct();
              }
               row8.fac_id = outputFacilityRelations.fac_id;
               row8.plc_id = outputFacilityRelations.plc_id;
               row8.crt_etl_id = outputFacilityRelations.crt_etl_id;
               row8.upd_etl_id = outputFacilityRelations.upd_etl_id;
               row8.crt_utc = outputFacilityRelations.crt_utc;
               row8.upd_utc = outputFacilityRelations.upd_utc;
               row8.obslt_utc = outputFacilityRelations.obslt_utc;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tPostgresqlOutput_6 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_6";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_6 = false;
                    if(row8.fac_id == null) {
pstmt_tPostgresqlOutput_6.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_6.setObject(1, row8.fac_id, java.sql.Types.OTHER);
}

                    if(row8.plc_id == null) {
pstmt_tPostgresqlOutput_6.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_6.setObject(2, row8.plc_id, java.sql.Types.OTHER);
}

            int checkCount_tPostgresqlOutput_6 = -1;
            try (java.sql.ResultSet rs_tPostgresqlOutput_6 = pstmt_tPostgresqlOutput_6.executeQuery()) {
                while(rs_tPostgresqlOutput_6.next()) {
                    checkCount_tPostgresqlOutput_6 = rs_tPostgresqlOutput_6.getInt(1);
                }
            }
            if(checkCount_tPostgresqlOutput_6 > 0) {
                        if(row8.crt_etl_id == null) {
pstmtUpdate_tPostgresqlOutput_6.setNull(1, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_6.setObject(1, row8.crt_etl_id, java.sql.Types.OTHER);
}

                        if(row8.upd_etl_id == null) {
pstmtUpdate_tPostgresqlOutput_6.setNull(2, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_6.setObject(2, row8.upd_etl_id, java.sql.Types.OTHER);
}

                        if(row8.crt_utc != null) {
pstmtUpdate_tPostgresqlOutput_6.setTimestamp(3, new java.sql.Timestamp(row8.crt_utc.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_6.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(row8.upd_utc != null) {
pstmtUpdate_tPostgresqlOutput_6.setTimestamp(4, new java.sql.Timestamp(row8.upd_utc.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_6.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(row8.obslt_utc != null) {
pstmtUpdate_tPostgresqlOutput_6.setTimestamp(5, new java.sql.Timestamp(row8.obslt_utc.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_6.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(row8.fac_id == null) {
pstmtUpdate_tPostgresqlOutput_6.setNull(6 + count_tPostgresqlOutput_6, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_6.setObject(6 + count_tPostgresqlOutput_6, row8.fac_id);
}

                        if(row8.plc_id == null) {
pstmtUpdate_tPostgresqlOutput_6.setNull(7 + count_tPostgresqlOutput_6, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_6.setObject(7 + count_tPostgresqlOutput_6, row8.plc_id);
}

                try {
					
                    updatedCount_tPostgresqlOutput_6 = updatedCount_tPostgresqlOutput_6 + pstmtUpdate_tPostgresqlOutput_6.executeUpdate();
                    nb_line_tPostgresqlOutput_6++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tPostgresqlOutput_6 = true;
                        nb_line_tPostgresqlOutput_6++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(row8.fac_id == null) {
pstmtInsert_tPostgresqlOutput_6.setNull(1, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_6.setObject(1, row8.fac_id, java.sql.Types.OTHER);
}

                        if(row8.plc_id == null) {
pstmtInsert_tPostgresqlOutput_6.setNull(2, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_6.setObject(2, row8.plc_id, java.sql.Types.OTHER);
}

                        if(row8.crt_etl_id == null) {
pstmtInsert_tPostgresqlOutput_6.setNull(3, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_6.setObject(3, row8.crt_etl_id, java.sql.Types.OTHER);
}

                        if(row8.upd_etl_id == null) {
pstmtInsert_tPostgresqlOutput_6.setNull(4, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_6.setObject(4, row8.upd_etl_id, java.sql.Types.OTHER);
}

                        if(row8.crt_utc != null) {
pstmtInsert_tPostgresqlOutput_6.setTimestamp(5, new java.sql.Timestamp(row8.crt_utc.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_6.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(row8.upd_utc != null) {
pstmtInsert_tPostgresqlOutput_6.setTimestamp(6, new java.sql.Timestamp(row8.upd_utc.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_6.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(row8.obslt_utc != null) {
pstmtInsert_tPostgresqlOutput_6.setTimestamp(7, new java.sql.Timestamp(row8.obslt_utc.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_6.setNull(7, java.sql.Types.TIMESTAMP);
}

                try {
					
                    insertedCount_tPostgresqlOutput_6 = insertedCount_tPostgresqlOutput_6 + pstmtInsert_tPostgresqlOutput_6.executeUpdate();
                    nb_line_tPostgresqlOutput_6++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tPostgresqlOutput_6 = true;
                        nb_line_tPostgresqlOutput_6++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tPostgresqlOutput_6) {
            }

 


	tos_count_tPostgresqlOutput_6++;

/**
 * [tPostgresqlOutput_6 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_6";

	

 



/**
 * [tPostgresqlOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_6";

	

 



/**
 * [tPostgresqlOutput_6 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "outputFacilityRelations"



	
		} // close loop of lookup 'row7' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 



/**
 * [tPostgresqlInput_6 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_6 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

	}
}finally{
	if (rs_tPostgresqlInput_6 != null) {
		rs_tPostgresqlInput_6.close();
	}
	if (stmt_tPostgresqlInput_6 != null) {
		stmt_tPostgresqlInput_6.close();
	}
}
globalMap.put("tPostgresqlInput_6_NB_LINE",nb_line_tPostgresqlInput_6);
 

ok_Hash.put("tPostgresqlInput_6", true);
end_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());




/**
 * [tPostgresqlInput_6 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_5 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	



        if(pstmtUpdate_tPostgresqlOutput_5 != null){
            pstmtUpdate_tPostgresqlOutput_5.close();
            resourceMap.remove("pstmtUpdate_tPostgresqlOutput_5");
        }
        if(pstmtInsert_tPostgresqlOutput_5 != null){
            pstmtInsert_tPostgresqlOutput_5.close();
            resourceMap.remove("pstmtInsert_tPostgresqlOutput_5");
        }
        if(pstmt_tPostgresqlOutput_5 != null) {
            pstmt_tPostgresqlOutput_5.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_5");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_5", true);

	nb_line_deleted_tPostgresqlOutput_5=nb_line_deleted_tPostgresqlOutput_5+ deletedCount_tPostgresqlOutput_5;
	nb_line_update_tPostgresqlOutput_5=nb_line_update_tPostgresqlOutput_5 + updatedCount_tPostgresqlOutput_5;
	nb_line_inserted_tPostgresqlOutput_5=nb_line_inserted_tPostgresqlOutput_5 + insertedCount_tPostgresqlOutput_5;
	nb_line_rejected_tPostgresqlOutput_5=nb_line_rejected_tPostgresqlOutput_5 + rejectedCount_tPostgresqlOutput_5;
	
        globalMap.put("tPostgresqlOutput_5_NB_LINE",nb_line_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_5);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputVillages"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_5", true);
end_Hash.put("tPostgresqlOutput_5", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_5 end ] stop
 */




	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputFacilityRelations"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_6 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_6";

	



        if(pstmtUpdate_tPostgresqlOutput_6 != null){
            pstmtUpdate_tPostgresqlOutput_6.close();
            resourceMap.remove("pstmtUpdate_tPostgresqlOutput_6");
        }
        if(pstmtInsert_tPostgresqlOutput_6 != null){
            pstmtInsert_tPostgresqlOutput_6.close();
            resourceMap.remove("pstmtInsert_tPostgresqlOutput_6");
        }
        if(pstmt_tPostgresqlOutput_6 != null) {
            pstmt_tPostgresqlOutput_6.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_6");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_6", true);

	nb_line_deleted_tPostgresqlOutput_6=nb_line_deleted_tPostgresqlOutput_6+ deletedCount_tPostgresqlOutput_6;
	nb_line_update_tPostgresqlOutput_6=nb_line_update_tPostgresqlOutput_6 + updatedCount_tPostgresqlOutput_6;
	nb_line_inserted_tPostgresqlOutput_6=nb_line_inserted_tPostgresqlOutput_6 + insertedCount_tPostgresqlOutput_6;
	nb_line_rejected_tPostgresqlOutput_6=nb_line_rejected_tPostgresqlOutput_6 + rejectedCount_tPostgresqlOutput_6;
	
        globalMap.put("tPostgresqlOutput_6_NB_LINE",nb_line_tPostgresqlOutput_6);
        globalMap.put("tPostgresqlOutput_6_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_6);
        globalMap.put("tPostgresqlOutput_6_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_6);
        globalMap.put("tPostgresqlOutput_6_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_6);
        globalMap.put("tPostgresqlOutput_6_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_6);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_6", true);
end_Hash.put("tPostgresqlOutput_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tPostgresqlInput_13Process(globalMap);



/**
 * [tPostgresqlOutput_6 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
				try{
					
	
	/**
	 * [tPostgresqlInput_6 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 



/**
 * [tPostgresqlInput_6 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_5") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tPostgresqlOutput_5 = null;
                if ((pstmtUpdateToClose_tPostgresqlOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tPostgresqlOutput_5")) != null) {
                    pstmtUpdateToClose_tPostgresqlOutput_5.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tPostgresqlOutput_5 = null;
                if ((pstmtInsertToClose_tPostgresqlOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tPostgresqlOutput_5")) != null) {
                    pstmtInsertToClose_tPostgresqlOutput_5.close();
                }
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_5 = null;
                if ((pstmtToClose_tPostgresqlOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_5")) != null) {
                    pstmtToClose_tPostgresqlOutput_5.close();
                }
    }
 



/**
 * [tPostgresqlOutput_5 finally ] stop
 */




	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_6";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_6") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tPostgresqlOutput_6 = null;
                if ((pstmtUpdateToClose_tPostgresqlOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tPostgresqlOutput_6")) != null) {
                    pstmtUpdateToClose_tPostgresqlOutput_6.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tPostgresqlOutput_6 = null;
                if ((pstmtInsertToClose_tPostgresqlOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tPostgresqlOutput_6")) != null) {
                    pstmtInsertToClose_tPostgresqlOutput_6.close();
                }
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_6 = null;
                if ((pstmtToClose_tPostgresqlOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_6")) != null) {
                    pstmtToClose_tPostgresqlOutput_6.close();
                }
    }
 



/**
 * [tPostgresqlOutput_6 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object plc_id;

				public Object getPlc_id () {
					return this.plc_id;
				}
				
			    public Object parent_id;

				public Object getParent_id () {
					return this.parent_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.plc_id == null) ? 0 : this.plc_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.plc_id == null) {
							if (other.plc_id != null)
								return false;
						
						} else if (!this.plc_id.equals(other.plc_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.plc_id = this.plc_id;
	            other.parent_id = this.parent_id;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.plc_id = this.plc_id;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.plc_id = (Object) dis.readObject();
					
						this.parent_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.plc_id);
					
					// Object
				
       			    	dos.writeObject(this.parent_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("plc_id="+String.valueOf(plc_id));
		sb.append(",parent_id="+String.valueOf(parent_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.plc_id, other.plc_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object plc_id;

				public Object getPlc_id () {
					return this.plc_id;
				}
				
			    public Object parent_id;

				public Object getParent_id () {
					return this.parent_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.plc_id == null) ? 0 : this.plc_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.plc_id == null) {
							if (other.plc_id != null)
								return false;
						
						} else if (!this.plc_id.equals(other.plc_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.plc_id = this.plc_id;
	            other.parent_id = this.parent_id;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.plc_id = this.plc_id;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.plc_id = (Object) dis.readObject();
					
						this.parent_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.plc_id);
					
					// Object
				
       			    	dos.writeObject(this.parent_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("plc_id="+String.valueOf(plc_id));
		sb.append(",parent_id="+String.valueOf(parent_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.plc_id, other.plc_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();
row10Struct row18 = row10;





	
	/**
	 * [tPostgresqlOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_9", false);
		start_Hash.put("tPostgresqlOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row18" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_9 = 0;
		





String dbschema_tPostgresqlOutput_9 = null;
	dbschema_tPostgresqlOutput_9 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_9 = null;
if(dbschema_tPostgresqlOutput_9 == null || dbschema_tPostgresqlOutput_9.trim().length() == 0) {
	tableName_tPostgresqlOutput_9 = "plc_tbl";
} else {
	tableName_tPostgresqlOutput_9 = dbschema_tPostgresqlOutput_9 + "\".\"" + "plc_tbl";
}

        int deleteKeyCount_tPostgresqlOutput_9 = 1;
        if(deleteKeyCount_tPostgresqlOutput_9 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_9 = 0;
int nb_line_update_tPostgresqlOutput_9 = 0;
int nb_line_inserted_tPostgresqlOutput_9 = 0;
int nb_line_deleted_tPostgresqlOutput_9 = 0;
int nb_line_rejected_tPostgresqlOutput_9 = 0;

int deletedCount_tPostgresqlOutput_9=0;
int updatedCount_tPostgresqlOutput_9=0;
int insertedCount_tPostgresqlOutput_9=0;
int rejectedCount_tPostgresqlOutput_9=0;

boolean whetherReject_tPostgresqlOutput_9 = false;

java.sql.Connection conn_tPostgresqlOutput_9 = null;
String dbUser_tPostgresqlOutput_9 = null;

	conn_tPostgresqlOutput_9 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_9 = 10000;
   int batchSizeCounter_tPostgresqlOutput_9=0;

int count_tPostgresqlOutput_9=0;
	    String delete_tPostgresqlOutput_9 = "DELETE FROM \"" + tableName_tPostgresqlOutput_9 + "\" WHERE \"plc_id\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_9 = conn_tPostgresqlOutput_9.prepareStatement(delete_tPostgresqlOutput_9);
	    resourceMap.put("pstmt_tPostgresqlOutput_9", pstmt_tPostgresqlOutput_9);
	    

 



/**
 * [tPostgresqlOutput_9 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;
                    
                    
                StringBuilder sbHeader_tLogRow_2 = new StringBuilder();
				
				sbHeader_tLogRow_2.append("plc_id");
				
    			sbHeader_tLogRow_2.append("\t");
				
				sbHeader_tLogRow_2.append("parent_id");
				
                   
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(sbHeader_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_13", false);
		start_Hash.put("tPostgresqlInput_13", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_13";

	
		int tos_count_tPostgresqlInput_13 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_13 = 0;
		    java.sql.Connection conn_tPostgresqlInput_13 = null;
		        conn_tPostgresqlInput_13 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_13 = conn_tPostgresqlInput_13.createStatement();

		    String dbquery_tPostgresqlInput_13 = "select plc_id, parent_id from plc_tbl where parent_id not in (select plc_id from plc_tbl)";
			

            	globalMap.put("tPostgresqlInput_13_QUERY",dbquery_tPostgresqlInput_13);
		    java.sql.ResultSet rs_tPostgresqlInput_13 = null;

		    try {
		    	rs_tPostgresqlInput_13 = stmt_tPostgresqlInput_13.executeQuery(dbquery_tPostgresqlInput_13);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_13 = rs_tPostgresqlInput_13.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_13 = rsmd_tPostgresqlInput_13.getColumnCount();

		    String tmpContent_tPostgresqlInput_13 = null;
		    
		    
		    while (rs_tPostgresqlInput_13.next()) {
		        nb_line_tPostgresqlInput_13++;
		        
							if(colQtyInRs_tPostgresqlInput_13 < 1) {
								row10.plc_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_13.getObject(1) != null) {
                row10.plc_id = rs_tPostgresqlInput_13.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_13 < 2) {
								row10.parent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_13.getObject(2) != null) {
                row10.parent_id = rs_tPostgresqlInput_13.getObject(2);
            } else {
                    row10.parent_id = null;
            }
		                    }
					


 



/**
 * [tPostgresqlInput_13 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_13 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_13";

	

 


	tos_count_tPostgresqlInput_13++;

/**
 * [tPostgresqlInput_13 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_13";

	

 



/**
 * [tPostgresqlInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row10.plc_id != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row10.plc_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row10.parent_id != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row10.parent_id)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     row18 = row10;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tPostgresqlOutput_9 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_9";

	

			//row18
			//row18


			
				if(execStat){
					runStat.updateStatOnConnection("row18"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_9 = false;
					
                    if(row18.plc_id == null) {
pstmt_tPostgresqlOutput_9.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_9.setObject(1, row18.plc_id);
}

    		pstmt_tPostgresqlOutput_9.addBatch();
			nb_line_tPostgresqlOutput_9++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_9++;
    		
            if(!whetherReject_tPostgresqlOutput_9) {
            }
    			if ((batchSize_tPostgresqlOutput_9 > 0) && (batchSize_tPostgresqlOutput_9 <= batchSizeCounter_tPostgresqlOutput_9)) {
                try {
						int countSum_tPostgresqlOutput_9 = 0;
						    
						for(int countEach_tPostgresqlOutput_9: pstmt_tPostgresqlOutput_9.executeBatch()) {
							countSum_tPostgresqlOutput_9 += (countEach_tPostgresqlOutput_9 < 0 ? 0 : countEach_tPostgresqlOutput_9);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_9 += countSum_tPostgresqlOutput_9;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_9 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_9){
				    	java.sql.SQLException ne_tPostgresqlOutput_9 = e_tPostgresqlOutput_9.getNextException(),sqle_tPostgresqlOutput_9=null;
				    	String errormessage_tPostgresqlOutput_9;
						if (ne_tPostgresqlOutput_9 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_9 = new java.sql.SQLException(e_tPostgresqlOutput_9.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_9.getMessage(), ne_tPostgresqlOutput_9.getSQLState(), ne_tPostgresqlOutput_9.getErrorCode(), ne_tPostgresqlOutput_9);
							errormessage_tPostgresqlOutput_9 = sqle_tPostgresqlOutput_9.getMessage();
						}else{
							errormessage_tPostgresqlOutput_9 = e_tPostgresqlOutput_9.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_9 = 0;
						for(int countEach_tPostgresqlOutput_9: e_tPostgresqlOutput_9.getUpdateCounts()) {
							countSum_tPostgresqlOutput_9 += (countEach_tPostgresqlOutput_9 < 0 ? 0 : countEach_tPostgresqlOutput_9);
						}
						
				    	    deletedCount_tPostgresqlOutput_9 += countSum_tPostgresqlOutput_9;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_9);
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_9++;

/**
 * [tPostgresqlOutput_9 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_9";

	

 



/**
 * [tPostgresqlOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_9";

	

 



/**
 * [tPostgresqlOutput_9 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_13";

	

 



/**
 * [tPostgresqlInput_13 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_13 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_13";

	

	}
}finally{
	if (rs_tPostgresqlInput_13 != null) {
		rs_tPostgresqlInput_13.close();
	}
	if (stmt_tPostgresqlInput_13 != null) {
		stmt_tPostgresqlInput_13.close();
	}
}
globalMap.put("tPostgresqlInput_13_NB_LINE",nb_line_tPostgresqlInput_13);
 

ok_Hash.put("tPostgresqlInput_13", true);
end_Hash.put("tPostgresqlInput_13", System.currentTimeMillis());




/**
 * [tPostgresqlInput_13 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_9 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_9";

	



	    try {
				int countSum_tPostgresqlOutput_9 = 0;
				if (pstmt_tPostgresqlOutput_9 != null && batchSizeCounter_tPostgresqlOutput_9 > 0) {
						
					for(int countEach_tPostgresqlOutput_9: pstmt_tPostgresqlOutput_9.executeBatch()) {
						countSum_tPostgresqlOutput_9 += (countEach_tPostgresqlOutput_9 < 0 ? 0 : countEach_tPostgresqlOutput_9);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_9 += countSum_tPostgresqlOutput_9;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_9){
	    	java.sql.SQLException ne_tPostgresqlOutput_9 = e_tPostgresqlOutput_9.getNextException(),sqle_tPostgresqlOutput_9=null;
	    	String errormessage_tPostgresqlOutput_9;
			if (ne_tPostgresqlOutput_9 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_9 = new java.sql.SQLException(e_tPostgresqlOutput_9.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_9.getMessage(), ne_tPostgresqlOutput_9.getSQLState(), ne_tPostgresqlOutput_9.getErrorCode(), ne_tPostgresqlOutput_9);
				errormessage_tPostgresqlOutput_9 = sqle_tPostgresqlOutput_9.getMessage();
			}else{
				errormessage_tPostgresqlOutput_9 = e_tPostgresqlOutput_9.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_9 = 0;
			for(int countEach_tPostgresqlOutput_9: e_tPostgresqlOutput_9.getUpdateCounts()) {
				countSum_tPostgresqlOutput_9 += (countEach_tPostgresqlOutput_9 < 0 ? 0 : countEach_tPostgresqlOutput_9);
			}
			
	    	    deletedCount_tPostgresqlOutput_9 += countSum_tPostgresqlOutput_9;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_9);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_9 != null) {
        		
            pstmt_tPostgresqlOutput_9.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_9");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_9", true);

	nb_line_deleted_tPostgresqlOutput_9=nb_line_deleted_tPostgresqlOutput_9+ deletedCount_tPostgresqlOutput_9;
	nb_line_update_tPostgresqlOutput_9=nb_line_update_tPostgresqlOutput_9 + updatedCount_tPostgresqlOutput_9;
	nb_line_inserted_tPostgresqlOutput_9=nb_line_inserted_tPostgresqlOutput_9 + insertedCount_tPostgresqlOutput_9;
	nb_line_rejected_tPostgresqlOutput_9=nb_line_rejected_tPostgresqlOutput_9 + rejectedCount_tPostgresqlOutput_9;
	
        globalMap.put("tPostgresqlOutput_9_NB_LINE",nb_line_tPostgresqlOutput_9);
        globalMap.put("tPostgresqlOutput_9_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_9);
        globalMap.put("tPostgresqlOutput_9_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_9);
        globalMap.put("tPostgresqlOutput_9_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_9);
        globalMap.put("tPostgresqlOutput_9_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_9);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row18"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_9", true);
end_Hash.put("tPostgresqlOutput_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tWarn_5Process(globalMap);



/**
 * [tPostgresqlOutput_9 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_13 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_13";

	

 



/**
 * [tPostgresqlInput_13 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_9";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_9 = null;
                if ((pstmtToClose_tPostgresqlOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_9")) != null) {
                    pstmtToClose_tPostgresqlOutput_9.close();
                }
    }
 



/**
 * [tPostgresqlOutput_9 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_13_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_5", false);
		start_Hash.put("tWarn_5", System.currentTimeMillis());
		
	
	currentComponent="tWarn_5";

	
		int tos_count_tWarn_5 = 0;
		

 



/**
 * [tWarn_5 begin ] stop
 */
	
	/**
	 * [tWarn_5 main ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_5", "", Thread.currentThread().getId() + "", "INFO","","Refreshing facility and patient views","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_5", 3, "Refreshing facility and patient views", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_5_WARN_MESSAGES", "Refreshing facility and patient views"); 
	globalMap.put("tWarn_5_WARN_PRIORITY", 3);
	globalMap.put("tWarn_5_WARN_CODE", 42);
	
} catch (Exception e_tWarn_5) {
	logIgnoredError(String.format("tWarn_5 - tWarn failed to log message due to internal error: %s", e_tWarn_5), e_tWarn_5);
}


 


	tos_count_tWarn_5++;

/**
 * [tWarn_5 main ] stop
 */
	
	/**
	 * [tWarn_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 process_data_end ] stop
 */
	
	/**
	 * [tWarn_5 end ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 

ok_Hash.put("tWarn_5", true);
end_Hash.put("tWarn_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk18", 0, "ok");
				}
				tPostgresqlRow_2Process(globalMap);



/**
 * [tWarn_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_5 finally ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_5_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_2", false);
		start_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_2";

	
		int tos_count_tPostgresqlRow_2 = 0;
		

	java.sql.Connection conn_tPostgresqlRow_2 = null;
	String query_tPostgresqlRow_2 = "";
	boolean whetherReject_tPostgresqlRow_2 = false;
				conn_tPostgresqlRow_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
			
    resourceMap.put("conn_tPostgresqlRow_2", conn_tPostgresqlRow_2);
        java.sql.Statement stmt_tPostgresqlRow_2 = conn_tPostgresqlRow_2.createStatement();
        resourceMap.put("stmt_tPostgresqlRow_2", stmt_tPostgresqlRow_2);


 



/**
 * [tPostgresqlRow_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

query_tPostgresqlRow_2 = "REFRESH MATERIALIZED VIEW fac_vw;\nREFRESH MATERIALIZED VIEW psn_vw;\nREFRESH MATERIALIZED VIEW pat_vw;\nREFRESH MATERI"
+"ALIZED VIEW plc_vw;\n";
whetherReject_tPostgresqlRow_2 = false;
globalMap.put("tPostgresqlRow_2_QUERY",query_tPostgresqlRow_2);
try {
		stmt_tPostgresqlRow_2.execute(query_tPostgresqlRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_2) {
		
	}
	

 


	tos_count_tPostgresqlRow_2++;

/**
 * [tPostgresqlRow_2 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

 



/**
 * [tPostgresqlRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

 



/**
 * [tPostgresqlRow_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlRow_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

	
        stmt_tPostgresqlRow_2.close();
        resourceMap.remove("stmt_tPostgresqlRow_2");
    resourceMap.put("statementClosed_tPostgresqlRow_2", true);
    resourceMap.put("finish_tPostgresqlRow_2", true);
 

ok_Hash.put("tPostgresqlRow_2", true);
end_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());




/**
 * [tPostgresqlRow_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlRow_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tPostgresqlCommit_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

    if (resourceMap.get("statementClosed_tPostgresqlRow_2") == null) {
            java.sql.Statement stmtToClose_tPostgresqlRow_2 = null;
            if ((stmtToClose_tPostgresqlRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tPostgresqlRow_2")) != null) {
                stmtToClose_tPostgresqlRow_2.close();
            }
    }
 



/**
 * [tPostgresqlRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostgresqlCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlCommit_1", false);
		start_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlCommit_1";

	
		int tos_count_tPostgresqlCommit_1 = 0;
		

 



/**
 * [tPostgresqlCommit_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

	java.sql.Connection conn_tPostgresqlCommit_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	if(conn_tPostgresqlCommit_1 != null && !conn_tPostgresqlCommit_1.isClosed())
	{
	
			
			conn_tPostgresqlCommit_1.commit();
			
	
	}

 


	tos_count_tPostgresqlCommit_1++;

/**
 * [tPostgresqlCommit_1 main ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 

ok_Hash.put("tPostgresqlCommit_1", true);
end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());




/**
 * [tPostgresqlCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tPostgresqlInput_7 - inputs:(after_tPostgresqlInput_6) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_4 - inputs:(row6,row7) outputs:(outputVillages,outputFacilityRelations)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_7", false);
		start_Hash.put("tPostgresqlInput_7", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_7";

	
		int tos_count_tPostgresqlInput_7 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_7 = 0;
		    java.sql.Connection conn_tPostgresqlInput_7 = null;
		        conn_tPostgresqlInput_7 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_7 = conn_tPostgresqlInput_7.createStatement();

		    String dbquery_tPostgresqlInput_7 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tPostgresqlInput_7_QUERY",dbquery_tPostgresqlInput_7);
		    java.sql.ResultSet rs_tPostgresqlInput_7 = null;

		    try {
		    	rs_tPostgresqlInput_7 = stmt_tPostgresqlInput_7.executeQuery(dbquery_tPostgresqlInput_7);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_7 = rs_tPostgresqlInput_7.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_7 = rsmd_tPostgresqlInput_7.getColumnCount();

		    String tmpContent_tPostgresqlInput_7 = null;
		    
		    
		    while (rs_tPostgresqlInput_7.next()) {
		        nb_line_tPostgresqlInput_7++;
		        
							if(colQtyInRs_tPostgresqlInput_7 < 1) {
								row7.etl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_7.getObject(1) != null) {
                row7.etl_id = rs_tPostgresqlInput_7.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_7 < 2) {
								row7.start_utc = null;
							} else {
										
			row7.start_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_7, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_7 < 3) {
								row7.stop_utc = null;
							} else {
										
			row7.stop_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_7, 3);
		                    }
					


 



/**
 * [tPostgresqlInput_7 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_7 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_7";

	

 


	tos_count_tPostgresqlInput_7++;

/**
 * [tPostgresqlInput_7 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_7";

	

 



/**
 * [tPostgresqlInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.etl_id = row7.etl_id;
				
				row7_HashRow.start_utc = row7.start_utc;
				
				row7_HashRow.stop_utc = row7.stop_utc;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_7";

	

 



/**
 * [tPostgresqlInput_7 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_7 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_7";

	

	}
}finally{
	if (rs_tPostgresqlInput_7 != null) {
		rs_tPostgresqlInput_7.close();
	}
	if (stmt_tPostgresqlInput_7 != null) {
		stmt_tPostgresqlInput_7.close();
	}
}
globalMap.put("tPostgresqlInput_7_NB_LINE",nb_line_tPostgresqlInput_7);
 

ok_Hash.put("tPostgresqlInput_7", true);
end_Hash.put("tPostgresqlInput_7", System.currentTimeMillis());




/**
 * [tPostgresqlInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

tHash_Lookup_row7.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_7 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_7";

	

 



/**
 * [tPostgresqlInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableComparableLookupRow<row11Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public Integer trg_pop;

				public Integer getTrg_pop () {
					return this.trg_pop;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ent_id == null) ? 0 : this.ent_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row11Struct other = (row11Struct) obj;
		
						if (this.ent_id == null) {
							if (other.ent_id != null)
								return false;
						
						} else if (!this.ent_id.equals(other.ent_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row11Struct other) {

		other.ent_id = this.ent_id;
	            other.trg_pop = this.trg_pop;
	            
	}

	public void copyKeysDataTo(row11Struct other) {

		other.ent_id = this.ent_id;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.ent_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.trg_pop = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.trg_pop, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_id="+String.valueOf(ent_id));
		sb.append(",trg_pop="+String.valueOf(trg_pop));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ent_id, other.ent_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tAdvancedHash_row11 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row11", false);
		start_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row11 = 0;
		

			   		// connection name:row11
			   		// source node:tPostgresqlInput_2 - inputs:(after_tPostgresqlInput_3) outputs:(row11,row11) | target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
			   		// linked node: tMap_2 - inputs:(row12,row11,row17) outputs:(outputFacilities)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row11Struct>getLookup(matchingModeEnum_row11);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row11 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
		        conn_tPostgresqlInput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "select ent_id, (ext_disp::json)->'value' as trg_pop from ent_ext_tbl where ext_typ_id = 'f9552ed8-66aa-4644-b6a8-108ad5"
+"4f2476';";
			

            	globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);
		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;

		    try {
		    	rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								row11.ent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(1) != null) {
                row11.ent_id = rs_tPostgresqlInput_2.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 2) {
								row11.trg_pop = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(2) != null) {
                row11.trg_pop = rs_tPostgresqlInput_2.getInt(2);
            } else {
                    row11.trg_pop = null;
            }
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		


			   
			   

					row11Struct row11_HashRow = new row11Struct();
		   	   	   
				
				row11_HashRow.ent_id = row11.ent_id;
				
				row11_HashRow.trg_pop = row11.trg_pop;
				
			tHash_Lookup_row11.put(row11_HashRow);
			
            




 


	tos_count_tAdvancedHash_row11++;

/**
 * [tAdvancedHash_row11 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	if (rs_tPostgresqlInput_2 != null) {
		rs_tPostgresqlInput_2.close();
	}
	if (stmt_tPostgresqlInput_2 != null) {
		stmt_tPostgresqlInput_2.close();
	}
}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

tHash_Lookup_row11.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row11", true);
end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());




/**
 * [tAdvancedHash_row11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tAdvancedHash_row17 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row17", false);
		start_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row17";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row17" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row17 = 0;
		

			   		// connection name:row17
			   		// source node:tPostgresqlInput_4 - inputs:(after_tPostgresqlInput_3) outputs:(row17,row17) | target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
			   		// linked node: tMap_2 - inputs:(row12,row11,row17) outputs:(outputFacilities)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row17Struct>getLookup(matchingModeEnum_row17);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row17 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_4", false);
		start_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_4";

	
		int tos_count_tPostgresqlInput_4 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_4 = 0;
		    java.sql.Connection conn_tPostgresqlInput_4 = null;
		        conn_tPostgresqlInput_4 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4.createStatement();

		    String dbquery_tPostgresqlInput_4 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tPostgresqlInput_4_QUERY",dbquery_tPostgresqlInput_4);
		    java.sql.ResultSet rs_tPostgresqlInput_4 = null;

		    try {
		    	rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4.executeQuery(dbquery_tPostgresqlInput_4);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4.getColumnCount();

		    String tmpContent_tPostgresqlInput_4 = null;
		    
		    
		    while (rs_tPostgresqlInput_4.next()) {
		        nb_line_tPostgresqlInput_4++;
		        
							if(colQtyInRs_tPostgresqlInput_4 < 1) {
								row17.etl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_4.getObject(1) != null) {
                row17.etl_id = rs_tPostgresqlInput_4.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 2) {
								row17.start_utc = null;
							} else {
										
			row17.start_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_4, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 3) {
								row17.stop_utc = null;
							} else {
										
			row17.stop_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_4, 3);
		                    }
					


 



/**
 * [tPostgresqlInput_4 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 


	tos_count_tPostgresqlInput_4++;

/**
 * [tPostgresqlInput_4 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

			//row17
			//row17


			
				if(execStat){
					runStat.updateStatOnConnection("row17"+iterateId,1, 1);
				} 
			

		


			   
			   

					row17Struct row17_HashRow = new row17Struct();
		   	   	   
				
				row17_HashRow.etl_id = row17.etl_id;
				
				row17_HashRow.start_utc = row17.start_utc;
				
				row17_HashRow.stop_utc = row17.stop_utc;
				
			tHash_Lookup_row17.put(row17_HashRow);
			
            




 


	tos_count_tAdvancedHash_row17++;

/**
 * [tAdvancedHash_row17 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

 



/**
 * [tAdvancedHash_row17 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

 



/**
 * [tAdvancedHash_row17 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

	}
}finally{
	if (rs_tPostgresqlInput_4 != null) {
		rs_tPostgresqlInput_4.close();
	}
	if (stmt_tPostgresqlInput_4 != null) {
		stmt_tPostgresqlInput_4.close();
	}
}
globalMap.put("tPostgresqlInput_4_NB_LINE",nb_line_tPostgresqlInput_4);
 

ok_Hash.put("tPostgresqlInput_4", true);
end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());




/**
 * [tPostgresqlInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

tHash_Lookup_row17.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row17"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row17", true);
end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());




/**
 * [tAdvancedHash_row17 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

 



/**
 * [tAdvancedHash_row17 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tPostgresqlInput_11 - inputs:(after_tPostgresqlInput_9) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_6 - inputs:(row2,row3,row16) outputs:(outputPersons)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_11", false);
		start_Hash.put("tPostgresqlInput_11", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_11";

	
		int tos_count_tPostgresqlInput_11 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_11 = 0;
		    java.sql.Connection conn_tPostgresqlInput_11 = null;
		        conn_tPostgresqlInput_11 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_11 = conn_tPostgresqlInput_11.createStatement();

		    String dbquery_tPostgresqlInput_11 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tPostgresqlInput_11_QUERY",dbquery_tPostgresqlInput_11);
		    java.sql.ResultSet rs_tPostgresqlInput_11 = null;

		    try {
		    	rs_tPostgresqlInput_11 = stmt_tPostgresqlInput_11.executeQuery(dbquery_tPostgresqlInput_11);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_11 = rs_tPostgresqlInput_11.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_11 = rsmd_tPostgresqlInput_11.getColumnCount();

		    String tmpContent_tPostgresqlInput_11 = null;
		    
		    
		    while (rs_tPostgresqlInput_11.next()) {
		        nb_line_tPostgresqlInput_11++;
		        
							if(colQtyInRs_tPostgresqlInput_11 < 1) {
								row3.etl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_11.getObject(1) != null) {
                row3.etl_id = rs_tPostgresqlInput_11.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_11 < 2) {
								row3.start_utc = null;
							} else {
										
			row3.start_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_11, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_11 < 3) {
								row3.stop_utc = null;
							} else {
										
			row3.stop_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_11, 3);
		                    }
					


 



/**
 * [tPostgresqlInput_11 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_11 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

 


	tos_count_tPostgresqlInput_11++;

/**
 * [tPostgresqlInput_11 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

 



/**
 * [tPostgresqlInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.etl_id = row3.etl_id;
				
				row3_HashRow.start_utc = row3.start_utc;
				
				row3_HashRow.stop_utc = row3.stop_utc;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

 



/**
 * [tPostgresqlInput_11 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_11 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

	}
}finally{
	if (rs_tPostgresqlInput_11 != null) {
		rs_tPostgresqlInput_11.close();
	}
	if (stmt_tPostgresqlInput_11 != null) {
		stmt_tPostgresqlInput_11.close();
	}
}
globalMap.put("tPostgresqlInput_11_NB_LINE",nb_line_tPostgresqlInput_11);
 

ok_Hash.put("tPostgresqlInput_11", true);
end_Hash.put("tPostgresqlInput_11", System.currentTimeMillis());




/**
 * [tPostgresqlInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

tHash_Lookup_row3.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_11 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

 



/**
 * [tPostgresqlInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object src_ent_id;

				public Object getSrc_ent_id () {
					return this.src_ent_id;
				}
				
			    public Object trg_ent_id;

				public Object getTrg_ent_id () {
					return this.trg_ent_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.src_ent_id == null) ? 0 : this.src_ent_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row16Struct other = (row16Struct) obj;
		
						if (this.src_ent_id == null) {
							if (other.src_ent_id != null)
								return false;
						
						} else if (!this.src_ent_id.equals(other.src_ent_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row16Struct other) {

		other.src_ent_id = this.src_ent_id;
	            other.trg_ent_id = this.trg_ent_id;
	            
	}

	public void copyKeysDataTo(row16Struct other) {

		other.src_ent_id = this.src_ent_id;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
						this.src_ent_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.src_ent_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.trg_ent_id = (Object) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.trg_ent_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("src_ent_id="+String.valueOf(src_ent_id));
		sb.append(",trg_ent_id="+String.valueOf(trg_ent_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.src_ent_id, other.src_ent_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tAdvancedHash_row16 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row16", false);
		start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row16";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row16" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row16 = 0;
		

			   		// connection name:row16
			   		// source node:tDBInput_3 - inputs:(after_tPostgresqlInput_9) outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
			   		// linked node: tMap_6 - inputs:(row2,row3,row16) outputs:(outputPersons)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row16Struct>getLookup(matchingModeEnum_row16);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row16 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
		        conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT SRC_ENT_ID, TRG_ENT_ID FROM ENT_REL_TBL WHERE REL_TYP_CD_ID = 'f3ef7e48-d8b7-4030-b431-aff7e0e1cb76' AND OBSLT_V"
+"RSN_SEQ_ID IS NULL";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row16.src_ent_id = null;
							} else {
		                          
            if(rs_tDBInput_3.getObject(1) != null) {
                row16.src_ent_id = rs_tDBInput_3.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row16.trg_ent_id = null;
							} else {
		                          
            if(rs_tDBInput_3.getObject(2) != null) {
                row16.trg_ent_id = rs_tDBInput_3.getObject(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

			//row16
			//row16


			
				if(execStat){
					runStat.updateStatOnConnection("row16"+iterateId,1, 1);
				} 
			

		


			   
			   

					row16Struct row16_HashRow = new row16Struct();
		   	   	   
				
				row16_HashRow.src_ent_id = row16.src_ent_id;
				
				row16_HashRow.trg_ent_id = row16.trg_ent_id;
				
			tHash_Lookup_row16.put(row16_HashRow);
			
            




 


	tos_count_tAdvancedHash_row16++;

/**
 * [tAdvancedHash_row16 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

tHash_Lookup_row16.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row16"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row16", true);
end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());




/**
 * [tAdvancedHash_row16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Patients = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Patients = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Patients.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Patients.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Patients = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Patients, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Patients, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Patients) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row15" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
		java.io.PrintStream consoleOut_tLogRow_3 = null;
                    
                    
                StringBuilder sbHeader_tLogRow_3 = new StringBuilder();
				
				sbHeader_tLogRow_3.append("moment");
				
    			sbHeader_tLogRow_3.append("\t");
				
				sbHeader_tLogRow_3.append("pid");
				
    			sbHeader_tLogRow_3.append("\t");
				
				sbHeader_tLogRow_3.append("root_pid");
				
    			sbHeader_tLogRow_3.append("\t");
				
				sbHeader_tLogRow_3.append("father_pid");
				
    			sbHeader_tLogRow_3.append("\t");
				
				sbHeader_tLogRow_3.append("project");
				
    			sbHeader_tLogRow_3.append("\t");
				
				sbHeader_tLogRow_3.append("job");
				
    			sbHeader_tLogRow_3.append("\t");
				
				sbHeader_tLogRow_3.append("context");
				
    			sbHeader_tLogRow_3.append("\t");
				
				sbHeader_tLogRow_3.append("priority");
				
    			sbHeader_tLogRow_3.append("\t");
				
				sbHeader_tLogRow_3.append("type");
				
    			sbHeader_tLogRow_3.append("\t");
				
				sbHeader_tLogRow_3.append("origin");
				
    			sbHeader_tLogRow_3.append("\t");
				
				sbHeader_tLogRow_3.append("message");
				
    			sbHeader_tLogRow_3.append("\t");
				
				sbHeader_tLogRow_3.append("code");
				
                   
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    consoleOut_tLogRow_3.println(sbHeader_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    	

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row15.type = lcm.getType();
		row15.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row15.priority = lcm.getPriority();
		row15.message = lcm.getMessage();
		row15.code = lcm.getCode();
		
		row15.moment = java.util.Calendar.getInstance().getTime();
	
    	row15.pid = pid;
		row15.root_pid = rootPid;
		row15.father_pid = fatherPid;
	
    	row15.project = projectName;
    	row15.job = jobName;
    	row15.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

			//row15
			//row15


			
				if(execStat){
					runStat.updateStatOnConnection("row15"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(row15.moment != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
								FormatterUtils.format_Date(row15.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row15.pid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row15.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row15.root_pid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row15.root_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row15.father_pid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row15.father_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row15.project != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row15.project)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row15.job != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row15.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row15.context != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row15.context)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row15.priority != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row15.priority)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row15.type != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row15.type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row15.origin != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row15.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row15.message != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row15.message)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row15.code != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row15.code)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row15"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Production";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Warehouse_Patients Warehouse_PatientsClass = new Warehouse_Patients();

        int exitCode = Warehouse_PatientsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Warehouse_Patients.class.getClassLoader().getResourceAsStream("openiz/warehouse_patients_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Warehouse_Patients.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("dbName", "id_String");
				
                context.dbName=(String) context.getProperty("dbName");
				    context.setContextType("dbPassword", "id_String");
				
                context.dbPassword=(String) context.getProperty("dbPassword");
				    context.setContextType("dbPort", "id_String");
				
                context.dbPort=(String) context.getProperty("dbPort");
				    context.setContextType("dbServer", "id_String");
				
                context.dbServer=(String) context.getProperty("dbServer");
				    context.setContextType("dbUser", "id_String");
				
                context.dbUser=(String) context.getProperty("dbUser");
				    context.setContextType("dwName", "id_String");
				
                context.dwName=(String) context.getProperty("dwName");
				    context.setContextType("dwPassword", "id_String");
				
                context.dwPassword=(String) context.getProperty("dwPassword");
				    context.setContextType("dwPort", "id_String");
				
                context.dwPort=(String) context.getProperty("dwPort");
				    context.setContextType("dwServer", "id_String");
				
                context.dwServer=(String) context.getProperty("dwServer");
				    context.setContextType("dwUser", "id_String");
				
                context.dwUser=(String) context.getProperty("dwUser");
				    context.setContextType("dwTemplate", "id_String");
				
                context.dwTemplate=(String) context.getProperty("dwTemplate");
				    context.setContextType("dwWorking", "id_String");
				
                context.dwWorking=(String) context.getProperty("dwWorking");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("dbName")) {
                context.dbName = (String) parentContextMap.get("dbName");
            }if (parentContextMap.containsKey("dbPassword")) {
                context.dbPassword = (String) parentContextMap.get("dbPassword");
            }if (parentContextMap.containsKey("dbPort")) {
                context.dbPort = (String) parentContextMap.get("dbPort");
            }if (parentContextMap.containsKey("dbServer")) {
                context.dbServer = (String) parentContextMap.get("dbServer");
            }if (parentContextMap.containsKey("dbUser")) {
                context.dbUser = (String) parentContextMap.get("dbUser");
            }if (parentContextMap.containsKey("dwName")) {
                context.dwName = (String) parentContextMap.get("dwName");
            }if (parentContextMap.containsKey("dwPassword")) {
                context.dwPassword = (String) parentContextMap.get("dwPassword");
            }if (parentContextMap.containsKey("dwPort")) {
                context.dwPort = (String) parentContextMap.get("dwPort");
            }if (parentContextMap.containsKey("dwServer")) {
                context.dwServer = (String) parentContextMap.get("dwServer");
            }if (parentContextMap.containsKey("dwUser")) {
                context.dwUser = (String) parentContextMap.get("dwUser");
            }if (parentContextMap.containsKey("dwTemplate")) {
                context.dwTemplate = (String) parentContextMap.get("dwTemplate");
            }if (parentContextMap.containsKey("dwWorking")) {
                context.dwWorking = (String) parentContextMap.get("dwWorking");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tPostgresqlConnection_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostgresqlConnection_2) {
globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", -1);

e_tPostgresqlConnection_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Warehouse_Patients");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tPostgresqlConnection_2", globalMap.get("conn_tPostgresqlConnection_2"));
            connections.put("conn_tPostgresqlConnection_1", globalMap.get("conn_tPostgresqlConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     655903 characters generated by Talend Open Studio for Data Integration 
 *     on the September 25, 2020 9:15:02 EDT AM
 ************************************************************************************************/