// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package openiz.warehouse_acts_1_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Warehouse_Acts Purpose: Warehouses Acts<br>
 * Description: Warehouses substance administrations, observations, and other data <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class Warehouse_Acts implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(dbName != null){
				
					this.setProperty("dbName", dbName.toString());
				
			}
			
			if(dbPassword != null){
				
					this.setProperty("dbPassword", dbPassword.toString());
				
			}
			
			if(dbPort != null){
				
					this.setProperty("dbPort", dbPort.toString());
				
			}
			
			if(dbServer != null){
				
					this.setProperty("dbServer", dbServer.toString());
				
			}
			
			if(dbUser != null){
				
					this.setProperty("dbUser", dbUser.toString());
				
			}
			
			if(dwName != null){
				
					this.setProperty("dwName", dwName.toString());
				
			}
			
			if(dwPassword != null){
				
					this.setProperty("dwPassword", dwPassword.toString());
				
			}
			
			if(dwPort != null){
				
					this.setProperty("dwPort", dwPort.toString());
				
			}
			
			if(dwServer != null){
				
					this.setProperty("dwServer", dwServer.toString());
				
			}
			
			if(dwUser != null){
				
					this.setProperty("dwUser", dwUser.toString());
				
			}
			
			if(dwTemplate != null){
				
					this.setProperty("dwTemplate", dwTemplate.toString());
				
			}
			
			if(dwWorking != null){
				
					this.setProperty("dwWorking", dwWorking.toString());
				
			}
			
		}

public String dbName;
public String getDbName(){
	return this.dbName;
}
public String dbPassword;
public String getDbPassword(){
	return this.dbPassword;
}
public String dbPort;
public String getDbPort(){
	return this.dbPort;
}
public String dbServer;
public String getDbServer(){
	return this.dbServer;
}
public String dbUser;
public String getDbUser(){
	return this.dbUser;
}
public String dwName;
public String getDwName(){
	return this.dwName;
}
public String dwPassword;
public String getDwPassword(){
	return this.dwPassword;
}
public String dwPort;
public String getDwPort(){
	return this.dwPort;
}
public String dwServer;
public String getDwServer(){
	return this.dwServer;
}
public String dwUser;
public String getDwUser(){
	return this.dwUser;
}
public String dwTemplate;
public String getDwTemplate(){
	return this.dwTemplate;
}
public String dwWorking;
public String getDwWorking(){
	return this.dwWorking;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "1.0";
	private final String jobName = "Warehouse_Acts";
	private final String projectName = "OPENIZ";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Warehouse_Acts.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Warehouse_Acts.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostgresqlConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError17", 0, "error");
								}
							
							
								errorCode = null;
								tPostgresqlRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRollback_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRollback_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJoin_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJoin_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError15", 0, "error");
								}
							
							
								errorCode = null;
								tPostgresqlRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJoin_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError16", 0, "error");
								}
							
							
								errorCode = null;
								tPostgresqlRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError6", 0, "error");
								}
							
							
								errorCode = null;
								tPostgresqlRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError7", 0, "error");
								}
							
							
								errorCode = null;
								tPostgresqlRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError8", 0, "error");
								}
							
							
								errorCode = null;
								tPostgresqlRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tPostgresqlRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError2", 0, "error");
								}
							
							
								errorCode = null;
								tPostgresqlRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError4", 0, "error");
								}
							
							
								errorCode = null;
								tPostgresqlRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError3", 0, "error");
								}
							
							
								errorCode = null;
								tPostgresqlRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError10", 0, "error");
								}
							
							
								errorCode = null;
								tPostgresqlRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError11", 0, "error");
								}
							
							
								errorCode = null;
								tPostgresqlRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRollback_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPostgresqlConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_1", false);
		start_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_1";

	
		int tos_count_tPostgresqlConnection_1 = 0;
		


	
		String url_tPostgresqlConnection_1 = "jdbc:postgresql://"+context.dbServer+":"+context.dbPort+"/"+context.dbName; 
		String dbUser_tPostgresqlConnection_1 = context.dbUser;
		
		
			
	final String decryptedPassword_tPostgresqlConnection_1 = context.dbPassword; 
			String dbPwd_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;
		
	java.sql.Connection conn_tPostgresqlConnection_1 = null;
	
		java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_1 =  java.sql.DriverManager.getDrivers();
    while (drivers_tPostgresqlConnection_1.hasMoreElements()) {
        java.sql.Driver d_tPostgresqlConnection_1 = drivers_tPostgresqlConnection_1.nextElement();
        java.util.List<String> driverList_tPostgresqlConnection_1 = java.util.Arrays.<String>asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver");
        if (driverList_tPostgresqlConnection_1.contains(d_tPostgresqlConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tPostgresqlConnection_1);
                java.sql.DriverManager.registerDriver(d_tPostgresqlConnection_1);
            } catch (java.lang.Exception e_tPostgresqlConnection_1) {
            		//do nothing
            }
        }
    }
					String driverClass_tPostgresqlConnection_1 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tPostgresqlConnection_1);
		
				conn_tPostgresqlConnection_1 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_1,dbUser_tPostgresqlConnection_1,dbPwd_tPostgresqlConnection_1);

		globalMap.put("conn_tPostgresqlConnection_1", conn_tPostgresqlConnection_1);
	if (null != conn_tPostgresqlConnection_1) {
		
			conn_tPostgresqlConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_1","public");

	globalMap.put("conn_" + "tPostgresqlConnection_1",conn_tPostgresqlConnection_1);

 



/**
 * [tPostgresqlConnection_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 


	tos_count_tPostgresqlConnection_1++;

/**
 * [tPostgresqlConnection_1 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 

ok_Hash.put("tPostgresqlConnection_1", true);
end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());




/**
 * [tPostgresqlConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tPostgresqlConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_2", false);
		start_Hash.put("tPostgresqlConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_2";

	
		int tos_count_tPostgresqlConnection_2 = 0;
		


	
		String url_tPostgresqlConnection_2 = "jdbc:postgresql://"+context.dwServer+":"+context.dwPort+"/"+context.dwWorking; 
		String dbUser_tPostgresqlConnection_2 = context.dwUser;
		
		
			
	final String decryptedPassword_tPostgresqlConnection_2 = context.dwPassword; 
			String dbPwd_tPostgresqlConnection_2 = decryptedPassword_tPostgresqlConnection_2;
		
	java.sql.Connection conn_tPostgresqlConnection_2 = null;
	
		java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_2 =  java.sql.DriverManager.getDrivers();
    while (drivers_tPostgresqlConnection_2.hasMoreElements()) {
        java.sql.Driver d_tPostgresqlConnection_2 = drivers_tPostgresqlConnection_2.nextElement();
        java.util.List<String> driverList_tPostgresqlConnection_2 = java.util.Arrays.<String>asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver");
        if (driverList_tPostgresqlConnection_2.contains(d_tPostgresqlConnection_2.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tPostgresqlConnection_2);
                java.sql.DriverManager.registerDriver(d_tPostgresqlConnection_2);
            } catch (java.lang.Exception e_tPostgresqlConnection_2) {
            		//do nothing
            }
        }
    }
					String driverClass_tPostgresqlConnection_2 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tPostgresqlConnection_2);
		
				conn_tPostgresqlConnection_2 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_2,dbUser_tPostgresqlConnection_2,dbPwd_tPostgresqlConnection_2);

		globalMap.put("conn_tPostgresqlConnection_2", conn_tPostgresqlConnection_2);
	if (null != conn_tPostgresqlConnection_2) {
		
			conn_tPostgresqlConnection_2.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_2","public");

	globalMap.put("conn_" + "tPostgresqlConnection_2",conn_tPostgresqlConnection_2);

 



/**
 * [tPostgresqlConnection_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 


	tos_count_tPostgresqlConnection_2++;

/**
 * [tPostgresqlConnection_2 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 



/**
 * [tPostgresqlConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 



/**
 * [tPostgresqlConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 

ok_Hash.put("tPostgresqlConnection_2", true);
end_Hash.put("tPostgresqlConnection_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tWarn_6Process(globalMap);



/**
 * [tPostgresqlConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 



/**
 * [tPostgresqlConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_6", false);
		start_Hash.put("tWarn_6", System.currentTimeMillis());
		
	
	currentComponent="tWarn_6";

	
		int tos_count_tWarn_6 = 0;
		

 



/**
 * [tWarn_6 begin ] stop
 */
	
	/**
	 * [tWarn_6 main ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_6", "", Thread.currentThread().getId() + "", "INFO","","Cleaning warehouse act tables","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_6", 3, "Cleaning warehouse act tables", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_6_WARN_MESSAGES", "Cleaning warehouse act tables"); 
	globalMap.put("tWarn_6_WARN_PRIORITY", 3);
	globalMap.put("tWarn_6_WARN_CODE", 42);
	
} catch (Exception e_tWarn_6) {
	logIgnoredError(String.format("tWarn_6 - tWarn failed to log message due to internal error: %s", e_tWarn_6), e_tWarn_6);
}


 


	tos_count_tWarn_6++;

/**
 * [tWarn_6 main ] stop
 */
	
	/**
	 * [tWarn_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 



/**
 * [tWarn_6 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 



/**
 * [tWarn_6 process_data_end ] stop
 */
	
	/**
	 * [tWarn_6 end ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 

ok_Hash.put("tWarn_6", true);
end_Hash.put("tWarn_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tPostgresqlRow_6Process(globalMap);



/**
 * [tWarn_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_6 finally ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 



/**
 * [tWarn_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_6_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_6", false);
		start_Hash.put("tPostgresqlRow_6", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_6";

	
		int tos_count_tPostgresqlRow_6 = 0;
		

	java.sql.Connection conn_tPostgresqlRow_6 = null;
	String query_tPostgresqlRow_6 = "";
	boolean whetherReject_tPostgresqlRow_6 = false;
				conn_tPostgresqlRow_6 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
			
    resourceMap.put("conn_tPostgresqlRow_6", conn_tPostgresqlRow_6);
        java.sql.Statement stmt_tPostgresqlRow_6 = conn_tPostgresqlRow_6.createStatement();
        resourceMap.put("stmt_tPostgresqlRow_6", stmt_tPostgresqlRow_6);


 



/**
 * [tPostgresqlRow_6 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_6 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_6";

	

query_tPostgresqlRow_6 = "TRUNCATE enc_tbl CASCADE;\nTRUNCATE sbadm_tbl CASCADE;\nTRUNCATE act_tag_tbl CASCADE;\nTRUNCATE act_list_tbl CASCADE;\n"
+"TRUNCATE act_list_loc_tbl CASCADE;\nTRUNCATE act_list_act_rel_tbl CASCADE;\nTRUNCATE TABLE act_ext_tbl CASCADE;\nTRUNCAT"
+"E qty_obs_tbl CASCADE;\nTRUNCATE cond_tbl CASCADE;\nTRUNCATE sply_tbl CASCADE;\nTRUNCATE sply_mat_tbl CASCADE;";
whetherReject_tPostgresqlRow_6 = false;
globalMap.put("tPostgresqlRow_6_QUERY",query_tPostgresqlRow_6);
try {
		stmt_tPostgresqlRow_6.execute(query_tPostgresqlRow_6);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_6 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_6) {
		
	}
	

 


	tos_count_tPostgresqlRow_6++;

/**
 * [tPostgresqlRow_6 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_6";

	

 



/**
 * [tPostgresqlRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_6";

	

 



/**
 * [tPostgresqlRow_6 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlRow_6 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_6";

	

	
        stmt_tPostgresqlRow_6.close();
        resourceMap.remove("stmt_tPostgresqlRow_6");
    resourceMap.put("statementClosed_tPostgresqlRow_6", true);
    resourceMap.put("finish_tPostgresqlRow_6", true);
 

ok_Hash.put("tPostgresqlRow_6", true);
end_Hash.put("tPostgresqlRow_6", System.currentTimeMillis());




/**
 * [tPostgresqlRow_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlRow_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tWarn_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_6 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_6";

	

    if (resourceMap.get("statementClosed_tPostgresqlRow_6") == null) {
            java.sql.Statement stmtToClose_tPostgresqlRow_6 = null;
            if ((stmtToClose_tPostgresqlRow_6 = (java.sql.Statement) resourceMap.remove("stmt_tPostgresqlRow_6")) != null) {
                stmtToClose_tPostgresqlRow_6.close();
            }
    }
 



/**
 * [tPostgresqlRow_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_6_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Starting Supply","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 3, "Starting Supply", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_1_WARN_MESSAGES", "Starting Supply"); 
	globalMap.put("tWarn_1_WARN_PRIORITY", 3);
	globalMap.put("tWarn_1_WARN_CODE", 42);
	
} catch (Exception e_tWarn_1) {
	logIgnoredError(String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1), e_tWarn_1);
}


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_end ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tDBInput_8Process(globalMap);



/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	


public static class outpuEventsStruct implements routines.system.IPersistableRow<outpuEventsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object sply_id;

				public Object getSply_id () {
					return this.sply_id;
				}
				
			    public boolean is_rqo;

				public boolean getIs_rqo () {
					return this.is_rqo;
				}
				
			    public String typ_mnemonic;

				public String getTyp_mnemonic () {
					return this.typ_mnemonic;
				}
				
			    public Object src_ent_id;

				public Object getSrc_ent_id () {
					return this.src_ent_id;
				}
				
			    public Object trg_ent_id;

				public Object getTrg_ent_id () {
					return this.trg_ent_id;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public Object fulfill_id;

				public Object getFulfill_id () {
					return this.fulfill_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object accept_id;

				public Object getAccept_id () {
					return this.accept_id;
				}
				
			    public Object enc_id;

				public Object getEnc_id () {
					return this.enc_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.sply_id == null) ? 0 : this.sply_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outpuEventsStruct other = (outpuEventsStruct) obj;
		
						if (this.sply_id == null) {
							if (other.sply_id != null)
								return false;
						
						} else if (!this.sply_id.equals(other.sply_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outpuEventsStruct other) {

		other.sply_id = this.sply_id;
	            other.is_rqo = this.is_rqo;
	            other.typ_mnemonic = this.typ_mnemonic;
	            other.src_ent_id = this.src_ent_id;
	            other.trg_ent_id = this.trg_ent_id;
	            other.usr_id = this.usr_id;
	            other.act_utc = this.act_utc;
	            other.fulfill_id = this.fulfill_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.accept_id = this.accept_id;
	            other.enc_id = this.enc_id;
	            
	}

	public void copyKeysDataTo(outpuEventsStruct other) {

		other.sply_id = this.sply_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.sply_id = (Object) dis.readObject();
					
			        this.is_rqo = dis.readBoolean();
					
					this.typ_mnemonic = readString(dis);
					
						this.src_ent_id = (Object) dis.readObject();
					
						this.trg_ent_id = (Object) dis.readObject();
					
						this.usr_id = (Object) dis.readObject();
					
					this.act_utc = readDate(dis);
					
						this.fulfill_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.accept_id = (Object) dis.readObject();
					
						this.enc_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.sply_id);
					
					// boolean
				
		            	dos.writeBoolean(this.is_rqo);
					
					// String
				
						writeString(this.typ_mnemonic,dos);
					
					// Object
				
       			    	dos.writeObject(this.src_ent_id);
					
					// Object
				
       			    	dos.writeObject(this.trg_ent_id);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.fulfill_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.accept_id);
					
					// Object
				
       			    	dos.writeObject(this.enc_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sply_id="+String.valueOf(sply_id));
		sb.append(",is_rqo="+String.valueOf(is_rqo));
		sb.append(",typ_mnemonic="+typ_mnemonic);
		sb.append(",src_ent_id="+String.valueOf(src_ent_id));
		sb.append(",trg_ent_id="+String.valueOf(trg_ent_id));
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",fulfill_id="+String.valueOf(fulfill_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",accept_id="+String.valueOf(accept_id));
		sb.append(",enc_id="+String.valueOf(enc_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outpuEventsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.sply_id, other.sply_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public String type_cs;

				public String getType_cs () {
					return this.type_cs;
				}
				
			    public Boolean is_rqo;

				public Boolean getIs_rqo () {
					return this.is_rqo;
				}
				
			    public Object author_id;

				public Object getAuthor_id () {
					return this.author_id;
				}
				
			    public Object source_id;

				public Object getSource_id () {
					return this.source_id;
				}
				
			    public Object dest_id;

				public Object getDest_id () {
					return this.dest_id;
				}
				
			    public Object fulfills_id;

				public Object getFulfills_id () {
					return this.fulfills_id;
				}
				
			    public Object encounter_id;

				public Object getEncounter_id () {
					return this.encounter_id;
				}
				
			    public Object arrivalof_id;

				public Object getArrivalof_id () {
					return this.arrivalof_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.act_utc = readDate(dis);
					
					this.crt_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.type_cs = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_rqo = null;
           				} else {
           			    	this.is_rqo = dis.readBoolean();
           				}
					
						this.author_id = (Object) dis.readObject();
					
						this.source_id = (Object) dis.readObject();
					
						this.dest_id = (Object) dis.readObject();
					
						this.fulfills_id = (Object) dis.readObject();
					
						this.encounter_id = (Object) dis.readObject();
					
						this.arrivalof_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// String
				
						writeString(this.type_cs,dos);
					
					// Boolean
				
						if(this.is_rqo == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_rqo);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.author_id);
					
					// Object
				
       			    	dos.writeObject(this.source_id);
					
					// Object
				
       			    	dos.writeObject(this.dest_id);
					
					// Object
				
       			    	dos.writeObject(this.fulfills_id);
					
					// Object
				
       			    	dos.writeObject(this.encounter_id);
					
					// Object
				
       			    	dos.writeObject(this.arrivalof_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",type_cs="+type_cs);
		sb.append(",is_rqo="+String.valueOf(is_rqo));
		sb.append(",author_id="+String.valueOf(author_id));
		sb.append(",source_id="+String.valueOf(source_id));
		sb.append(",dest_id="+String.valueOf(dest_id));
		sb.append(",fulfills_id="+String.valueOf(fulfills_id));
		sb.append(",encounter_id="+String.valueOf(encounter_id));
		sb.append(",arrivalof_id="+String.valueOf(arrivalof_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_8Struct implements routines.system.IPersistableRow<after_tDBInput_8Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public String type_cs;

				public String getType_cs () {
					return this.type_cs;
				}
				
			    public Boolean is_rqo;

				public Boolean getIs_rqo () {
					return this.is_rqo;
				}
				
			    public Object author_id;

				public Object getAuthor_id () {
					return this.author_id;
				}
				
			    public Object source_id;

				public Object getSource_id () {
					return this.source_id;
				}
				
			    public Object dest_id;

				public Object getDest_id () {
					return this.dest_id;
				}
				
			    public Object fulfills_id;

				public Object getFulfills_id () {
					return this.fulfills_id;
				}
				
			    public Object encounter_id;

				public Object getEncounter_id () {
					return this.encounter_id;
				}
				
			    public Object arrivalof_id;

				public Object getArrivalof_id () {
					return this.arrivalof_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.act_utc = readDate(dis);
					
					this.crt_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.type_cs = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_rqo = null;
           				} else {
           			    	this.is_rqo = dis.readBoolean();
           				}
					
						this.author_id = (Object) dis.readObject();
					
						this.source_id = (Object) dis.readObject();
					
						this.dest_id = (Object) dis.readObject();
					
						this.fulfills_id = (Object) dis.readObject();
					
						this.encounter_id = (Object) dis.readObject();
					
						this.arrivalof_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// String
				
						writeString(this.type_cs,dos);
					
					// Boolean
				
						if(this.is_rqo == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_rqo);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.author_id);
					
					// Object
				
       			    	dos.writeObject(this.source_id);
					
					// Object
				
       			    	dos.writeObject(this.dest_id);
					
					// Object
				
       			    	dos.writeObject(this.fulfills_id);
					
					// Object
				
       			    	dos.writeObject(this.encounter_id);
					
					// Object
				
       			    	dos.writeObject(this.arrivalof_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",type_cs="+type_cs);
		sb.append(",is_rqo="+String.valueOf(is_rqo));
		sb.append(",author_id="+String.valueOf(author_id));
		sb.append(",source_id="+String.valueOf(source_id));
		sb.append(",dest_id="+String.valueOf(dest_id));
		sb.append(",fulfills_id="+String.valueOf(fulfills_id));
		sb.append(",encounter_id="+String.valueOf(encounter_id));
		sb.append(",arrivalof_id="+String.valueOf(arrivalof_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_9Process(globalMap);

		row22Struct row22 = new row22Struct();
outpuEventsStruct outpuEvents = new outpuEventsStruct();





	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outpuEvents" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_6 = 0;
		





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = "sply_tbl";
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + "sply_tbl";
}

int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	conn_tDBOutput_6 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tDBOutput_6 = 10000;
   int batchSizeCounter_tDBOutput_6=0;

int count_tDBOutput_6=0;
	    String insert_tDBOutput_6 = "INSERT INTO \"" + tableName_tDBOutput_6 + "\" (\"sply_id\",\"is_rqo\",\"typ_mnemonic\",\"src_ent_id\",\"trg_ent_id\",\"usr_id\",\"act_utc\",\"fulfill_id\",\"crt_etl_id\",\"accept_id\",\"enc_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row22" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
					globalMap.get( "tHash_Lookup_row23" ))
					;					
					
	
		tHash_Lookup_row23.initGet();
	

row23Struct row23HashKey = new row23Struct();
row23Struct row23Default = new row23Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
outpuEventsStruct outpuEvents_tmp = new outpuEventsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
		        conn_tDBInput_8 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "SELECT * FROM (SELECT \n  act_tbl.act_id, \n  FIRST(act_vrsn_tbl.act_utc) as act_utc, \n  FIRST(act_vrsn_tbl.crt_utc) a"
+"s crt_utc, \n  FIRST(act_vrsn_tbl.obslt_utc) as obslt_utc, \n  CASE WHEN FIRST(Fulfill.trg_act_id) IS NOT NULL THEN \n	F"
+"IRST(typ_cs.mnemonic) || '-Fulfillment'\n  WHEN FIRST(Arrival.trg_act_id) IS NOT NULL  THEN\n	FIRST(typ_cs.mnemonic) || "
+"'-Accept'\n  ELSE \n	FIRST(typ_cs.mnemonic) \n  END as type_cs, \n  FIRST(mod_cs.mnemonic) = 'Request' as is_rqo,\n  FIR"
+"ST(Author.ent_id) AS Author_Id, \n  FIRST(Source.ent_id) AS Source_Id,\n  FIRST(Destination.ent_id) AS Dest_Id,\n  FIRST"
+"(Fulfill.trg_act_id) AS Fulfills_Id,\n  FIRST(Encounter.src_act_id) AS Encounter_Id ,\n  FIRST(Arrival.trg_act_id) AS Ar"
+"rivalOf_id\n  FROM \n  act_vrsn_tbl \n  INNER JOIN act_tbl ON (act_tbl.act_id = act_vrsn_tbl.act_id AND act_tbl.cls_cd_i"
+"d = 'a064984f-9847-4480-8bea-dddf64b3c77c')\n  LEFT JOIN act_ptcpt_tbl as Author ON (Author.act_id = act_tbl.act_id AND "
+"Author.rol_cd_id = 'f0cb3faf-435d-4704-9217-b884f757bc14' AND Author.obslt_vrsn_seq_id IS NULL)\n  LEFT JOIN act_ptcpt_t"
+"bl as Source ON (Source.act_id = act_tbl.act_id AND Source.rol_cd_id = '61848557-d78d-40e5-954f-0b9c97307a04' AND Source"
+".obslt_vrsn_seq_id IS NULL)\n  LEFT JOIN act_ptcpt_tbl as Destination ON (Destination.act_id = act_tbl.act_id AND Destin"
+"ation.rol_cd_id in ('727b3624-ea62-46bb-a68b-b9e49e302eca', '3f92dbee-a65e-434f-98ce-841feeb02e3f') AND Destination.obsl"
+"t_vrsn_seq_id IS NULL)\n  LEFT JOIN act_rel_tbl Encounter ON (Encounter.trg_act_id = act_tbl.act_id AND Encounter.rel_ty"
+"p_cd_id = '78b9540f-438b-4b6f-8d83-aaf4979dbc64' AND Encounter.obslt_vrsn_seq_id IS NULL)\n  LEFT JOIN act_rel_tbl Fulfi"
+"ll ON (Fulfill.src_act_id = act_tbl.act_id AND Fulfill.rel_typ_cd_id = '646542bc-72e4-488b-bbf4-865d452e62ec' AND Fulfil"
+"l.obslt_vrsn_seq_id IS NULL)\n  LEFT JOIN act_rel_tbl Arrival ON (Arrival.src_act_id = act_tbl.act_id AND Arrival.rel_ty"
+"p_cd_id = '26fe590c-3684-4574-9359-057fdd06ba61' AND Arrival.obslt_vrsn_seq_id IS NULL)\n  LEFT JOIN cd_vrsn_tbl AS mod_"
+"cs ON (act_tbl.mod_cd_id = mod_cs .cd_id and mod_cs .obslt_utc is null)\n  LEFT JOIN cd_vrsn_tbl AS typ_cs ON (act_vrsn_"
+"tbl.typ_cd_id = typ_cs.cd_id and typ_cs.obslt_utc is null)\n  WHERE  \n  act_vrsn_tbl.STS_CD_ID = 'afc33800-8225-4061-b1"
+"68-bacc09cdbae3'\n  AND act_vrsn_tbl.obslt_utc IS NULL\n GROUP BY act_tbl.act_id) i \nwhere Source_Id IS NOT NULL"
;
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row22.act_id = null;
							} else {
		                          
            if(rs_tDBInput_8.getObject(1) != null) {
                row22.act_id = rs_tDBInput_8.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								row22.act_utc = null;
							} else {
										
			row22.act_utc = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 2);
		                    }
							if(colQtyInRs_tDBInput_8 < 3) {
								row22.crt_utc = null;
							} else {
										
			row22.crt_utc = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 3);
		                    }
							if(colQtyInRs_tDBInput_8 < 4) {
								row22.obslt_utc = null;
							} else {
										
			row22.obslt_utc = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 4);
		                    }
							if(colQtyInRs_tDBInput_8 < 5) {
								row22.type_cs = null;
							} else {
	                         		
        	row22.type_cs = routines.system.JDBCUtil.getString(rs_tDBInput_8, 5, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 6) {
								row22.is_rqo = null;
							} else {
	                         		
            if(rs_tDBInput_8.getObject(6) != null) {
                row22.is_rqo = rs_tDBInput_8.getBoolean(6);
            } else {
                    row22.is_rqo = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 7) {
								row22.author_id = null;
							} else {
		                          
            if(rs_tDBInput_8.getObject(7) != null) {
                row22.author_id = rs_tDBInput_8.getObject(7);
            } else {
                    row22.author_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 8) {
								row22.source_id = null;
							} else {
		                          
            if(rs_tDBInput_8.getObject(8) != null) {
                row22.source_id = rs_tDBInput_8.getObject(8);
            } else {
                    row22.source_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 9) {
								row22.dest_id = null;
							} else {
		                          
            if(rs_tDBInput_8.getObject(9) != null) {
                row22.dest_id = rs_tDBInput_8.getObject(9);
            } else {
                    row22.dest_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 10) {
								row22.fulfills_id = null;
							} else {
		                          
            if(rs_tDBInput_8.getObject(10) != null) {
                row22.fulfills_id = rs_tDBInput_8.getObject(10);
            } else {
                    row22.fulfills_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 11) {
								row22.encounter_id = null;
							} else {
		                          
            if(rs_tDBInput_8.getObject(11) != null) {
                row22.encounter_id = rs_tDBInput_8.getObject(11);
            } else {
                    row22.encounter_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 12) {
								row22.arrivalof_id = null;
							} else {
		                          
            if(rs_tDBInput_8.getObject(12) != null) {
                row22.arrivalof_id = rs_tDBInput_8.getObject(12);
            } else {
                    row22.arrivalof_id = null;
            }
		                    }
					


 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

			//row22
			//row22


			
				if(execStat){
					runStat.updateStatOnConnection("row22"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row23" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow23 = false;
       		  	    	
       		  	    	
 							row23Struct row23ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row23.lookup( row23HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row23.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow23 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow23 = true;
			           		  	} // G 21
                    		  	
                    		

							row23Struct row23 = null;
                    		  	 
							

								while ((tHash_Lookup_row23 != null && tHash_Lookup_row23.hasNext()) || forceLooprow23) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row23'
									
                    		  	 
							   
                    		  	 
	       		  	    	row23Struct fromLookup_row23 = null;
							row23 = row23Default;
										 
							
								
								if(!forceLooprow23) { // G 46
								
							
								 
							
								
								fromLookup_row23 = tHash_Lookup_row23.next();

							

							if(fromLookup_row23 != null) {
								row23 = fromLookup_row23;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow23 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

outpuEvents = null;


// # Output table : 'outpuEvents'
outpuEvents_tmp.sply_id = row22.act_id ;
outpuEvents_tmp.is_rqo = row22.is_rqo;
outpuEvents_tmp.typ_mnemonic = row22.type_cs ;
outpuEvents_tmp.src_ent_id = row22.source_id ;
outpuEvents_tmp.trg_ent_id = row22.dest_id ;
outpuEvents_tmp.usr_id = row22.author_id ;
outpuEvents_tmp.act_utc = row22.act_utc;
outpuEvents_tmp.fulfill_id = row22.fulfills_id ;
outpuEvents_tmp.crt_etl_id = row23.etl_id ;
outpuEvents_tmp.accept_id = row22.arrivalof_id ;
outpuEvents_tmp.enc_id = row22.encounter_id ;
outpuEvents = outpuEvents_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "outpuEvents"
if(outpuEvents != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

			//outpuEvents
			//outpuEvents


			
				if(execStat){
					runStat.updateStatOnConnection("outpuEvents"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_6 = false;
                    if(outpuEvents.sply_id == null) {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_6.setObject(1, outpuEvents.sply_id, java.sql.Types.OTHER);
}

                    pstmt_tDBOutput_6.setBoolean(2, outpuEvents.is_rqo);

                    if(outpuEvents.typ_mnemonic == null) {
pstmt_tDBOutput_6.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(3, outpuEvents.typ_mnemonic);
}

                    if(outpuEvents.src_ent_id == null) {
pstmt_tDBOutput_6.setNull(4, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_6.setObject(4, outpuEvents.src_ent_id, java.sql.Types.OTHER);
}

                    if(outpuEvents.trg_ent_id == null) {
pstmt_tDBOutput_6.setNull(5, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_6.setObject(5, outpuEvents.trg_ent_id, java.sql.Types.OTHER);
}

                    if(outpuEvents.usr_id == null) {
pstmt_tDBOutput_6.setNull(6, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_6.setObject(6, outpuEvents.usr_id, java.sql.Types.OTHER);
}

                    if(outpuEvents.act_utc != null) {
pstmt_tDBOutput_6.setTimestamp(7, new java.sql.Timestamp(outpuEvents.act_utc.getTime()));
} else {
pstmt_tDBOutput_6.setNull(7, java.sql.Types.TIMESTAMP);
}

                    if(outpuEvents.fulfill_id == null) {
pstmt_tDBOutput_6.setNull(8, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_6.setObject(8, outpuEvents.fulfill_id, java.sql.Types.OTHER);
}

                    if(outpuEvents.crt_etl_id == null) {
pstmt_tDBOutput_6.setNull(9, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_6.setObject(9, outpuEvents.crt_etl_id, java.sql.Types.OTHER);
}

                    if(outpuEvents.accept_id == null) {
pstmt_tDBOutput_6.setNull(10, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_6.setObject(10, outpuEvents.accept_id, java.sql.Types.OTHER);
}

                    if(outpuEvents.enc_id == null) {
pstmt_tDBOutput_6.setNull(11, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_6.setObject(11, outpuEvents.enc_id, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_6.addBatch();
    		nb_line_tDBOutput_6++;
    		  
    		  batchSizeCounter_tDBOutput_6++;
    		  
            if(!whetherReject_tDBOutput_6) {
            }
    			if ((batchSize_tDBOutput_6 > 0) && (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
                try {
						int countSum_tDBOutput_6 = 0;
						    
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
				    	
				    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
            	    	batchSizeCounter_tDBOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_6){
				    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
				    	String errormessage_tDBOutput_6;
						if (ne_tDBOutput_6 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
							errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
						}else{
							errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
						}
				    	
				    	int countSum_tDBOutput_6 = 0;
						for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
						
				    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
				    	System.err.println(errormessage_tDBOutput_6);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "outpuEvents"



	
		} // close loop of lookup 'row23' // G_TM_M_043
	
	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);
 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row23 != null) {
						tHash_Lookup_row23.endGet();
					}
					globalMap.remove( "tHash_Lookup_row23" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row22"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



	    try {
				int countSum_tDBOutput_6 = 0;
				if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {
						
					for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_6){
	    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
	    	String errormessage_tDBOutput_6;
			if (ne_tDBOutput_6 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
				errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
			}else{
				errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
			}
	    	
	    	int countSum_tDBOutput_6 = 0;
			for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
				countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
			}
			
	    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
	    	
	    	System.err.println(errormessage_tDBOutput_6);
	    	
		}
	    
        if(pstmt_tDBOutput_6 != null) {
        		
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outpuEvents"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tDBCommit_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_9"
					     			globalMap.remove("tHash_Lookup_row23"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRollback_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRollback_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRollback_1", false);
		start_Hash.put("tPostgresqlRollback_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRollback_1";

	
		int tos_count_tPostgresqlRollback_1 = 0;
		

 



/**
 * [tPostgresqlRollback_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlRollback_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRollback_1";

	

	java.sql.Connection conn_tPostgresqlRollback_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	if(conn_tPostgresqlRollback_1 != null && !conn_tPostgresqlRollback_1.isClosed()) {
		
			try{
				
			conn_tPostgresqlRollback_1.rollback();
			
			}finally{
		    	
			conn_tPostgresqlRollback_1.close();
			
		    }
		
	}

 


	tos_count_tPostgresqlRollback_1++;

/**
 * [tPostgresqlRollback_1 main ] stop
 */
	
	/**
	 * [tPostgresqlRollback_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlRollback_1";

	

 



/**
 * [tPostgresqlRollback_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlRollback_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRollback_1";

	

 



/**
 * [tPostgresqlRollback_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlRollback_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRollback_1";

	

 

ok_Hash.put("tPostgresqlRollback_1", true);
end_Hash.put("tPostgresqlRollback_1", System.currentTimeMillis());




/**
 * [tPostgresqlRollback_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlRollback_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDie_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRollback_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRollback_1";

	

 



/**
 * [tPostgresqlRollback_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRollback_1_SUBPROCESS_STATE", 1);
	}
	

public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

	try {
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_1_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_1) {
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	
	System.exit(4);

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_1", false);
		start_Hash.put("tDBCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_1";

	
		int tos_count_tDBCommit_1 = 0;
		

 



/**
 * [tDBCommit_1 begin ] stop
 */
	
	/**
	 * [tDBCommit_1 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

	java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	if(conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed())
	{
	
			
			conn_tDBCommit_1.commit();
			
	
	}

 


	tos_count_tDBCommit_1++;

/**
 * [tDBCommit_1 main ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_1 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 

ok_Hash.put("tDBCommit_1", true);
end_Hash.put("tDBCommit_1", System.currentTimeMillis());




/**
 * [tDBCommit_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBCommit_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
								} 
							
							tDBInput_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}
	


public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object sply_mat_id;

				public Object getSply_mat_id () {
					return this.sply_mat_id;
				}
				
			    public Object sply_id;

				public Object getSply_id () {
					return this.sply_id;
				}
				
			    public Object mat_id;

				public Object getMat_id () {
					return this.mat_id;
				}
				
			    public Object mmat_id;

				public Object getMmat_id () {
					return this.mmat_id;
				}
				
			    public int qty;

				public int getQty () {
					return this.qty;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.sply_mat_id == null) ? 0 : this.sply_mat_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row24Struct other = (row24Struct) obj;
		
						if (this.sply_mat_id == null) {
							if (other.sply_mat_id != null)
								return false;
						
						} else if (!this.sply_mat_id.equals(other.sply_mat_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row24Struct other) {

		other.sply_mat_id = this.sply_mat_id;
	            other.sply_id = this.sply_id;
	            other.mat_id = this.mat_id;
	            other.mmat_id = this.mmat_id;
	            other.qty = this.qty;
	            
	}

	public void copyKeysDataTo(row24Struct other) {

		other.sply_mat_id = this.sply_mat_id;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.sply_mat_id = (Object) dis.readObject();
					
						this.sply_id = (Object) dis.readObject();
					
						this.mat_id = (Object) dis.readObject();
					
						this.mmat_id = (Object) dis.readObject();
					
			        this.qty = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.sply_mat_id);
					
					// Object
				
       			    	dos.writeObject(this.sply_id);
					
					// Object
				
       			    	dos.writeObject(this.mat_id);
					
					// Object
				
       			    	dos.writeObject(this.mmat_id);
					
					// int
				
		            	dos.writeInt(this.qty);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sply_mat_id="+String.valueOf(sply_mat_id));
		sb.append(",sply_id="+String.valueOf(sply_id));
		sb.append(",mat_id="+String.valueOf(mat_id));
		sb.append(",mmat_id="+String.valueOf(mmat_id));
		sb.append(",qty="+String.valueOf(qty));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.sply_mat_id, other.sply_mat_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outputSupplyStruct implements routines.system.IPersistableRow<outputSupplyStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String sply_mat_id;

				public String getSply_mat_id () {
					return this.sply_mat_id;
				}
				
			    public String sply_id;

				public String getSply_id () {
					return this.sply_id;
				}
				
			    public String mat_id;

				public String getMat_id () {
					return this.mat_id;
				}
				
			    public String mmat_id;

				public String getMmat_id () {
					return this.mmat_id;
				}
				
			    public int qty;

				public int getQty () {
					return this.qty;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.sply_mat_id == null) ? 0 : this.sply_mat_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputSupplyStruct other = (outputSupplyStruct) obj;
		
						if (this.sply_mat_id == null) {
							if (other.sply_mat_id != null)
								return false;
						
						} else if (!this.sply_mat_id.equals(other.sply_mat_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputSupplyStruct other) {

		other.sply_mat_id = this.sply_mat_id;
	            other.sply_id = this.sply_id;
	            other.mat_id = this.mat_id;
	            other.mmat_id = this.mmat_id;
	            other.qty = this.qty;
	            
	}

	public void copyKeysDataTo(outputSupplyStruct other) {

		other.sply_mat_id = this.sply_mat_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
					this.sply_mat_id = readString(dis);
					
					this.sply_id = readString(dis);
					
					this.mat_id = readString(dis);
					
					this.mmat_id = readString(dis);
					
			        this.qty = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.sply_mat_id,dos);
					
					// String
				
						writeString(this.sply_id,dos);
					
					// String
				
						writeString(this.mat_id,dos);
					
					// String
				
						writeString(this.mmat_id,dos);
					
					// int
				
		            	dos.writeInt(this.qty);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sply_mat_id="+sply_mat_id);
		sb.append(",sply_id="+sply_id);
		sb.append(",mat_id="+mat_id);
		sb.append(",mmat_id="+mmat_id);
		sb.append(",qty="+String.valueOf(qty));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputSupplyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.sply_mat_id, other.sply_mat_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object sply_mat_id;

				public Object getSply_mat_id () {
					return this.sply_mat_id;
				}
				
			    public Object sply_id;

				public Object getSply_id () {
					return this.sply_id;
				}
				
			    public Object mat_id;

				public Object getMat_id () {
					return this.mat_id;
				}
				
			    public Object mmat_id;

				public Object getMmat_id () {
					return this.mmat_id;
				}
				
			    public int qty;

				public int getQty () {
					return this.qty;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.sply_mat_id == null) ? 0 : this.sply_mat_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row32Struct other = (row32Struct) obj;
		
						if (this.sply_mat_id == null) {
							if (other.sply_mat_id != null)
								return false;
						
						} else if (!this.sply_mat_id.equals(other.sply_mat_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row32Struct other) {

		other.sply_mat_id = this.sply_mat_id;
	            other.sply_id = this.sply_id;
	            other.mat_id = this.mat_id;
	            other.mmat_id = this.mmat_id;
	            other.qty = this.qty;
	            
	}

	public void copyKeysDataTo(row32Struct other) {

		other.sply_mat_id = this.sply_mat_id;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.sply_mat_id = (Object) dis.readObject();
					
						this.sply_id = (Object) dis.readObject();
					
						this.mat_id = (Object) dis.readObject();
					
						this.mmat_id = (Object) dis.readObject();
					
			        this.qty = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.sply_mat_id);
					
					// Object
				
       			    	dos.writeObject(this.sply_id);
					
					// Object
				
       			    	dos.writeObject(this.mat_id);
					
					// Object
				
       			    	dos.writeObject(this.mmat_id);
					
					// int
				
		            	dos.writeInt(this.qty);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sply_mat_id="+String.valueOf(sply_mat_id));
		sb.append(",sply_id="+String.valueOf(sply_id));
		sb.append(",mat_id="+String.valueOf(mat_id));
		sb.append(",mmat_id="+String.valueOf(mmat_id));
		sb.append(",qty="+String.valueOf(qty));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.sply_mat_id, other.sply_mat_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outputMaterialsStruct implements routines.system.IPersistableRow<outputMaterialsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String sply_mat_id;

				public String getSply_mat_id () {
					return this.sply_mat_id;
				}
				
			    public String sply_id;

				public String getSply_id () {
					return this.sply_id;
				}
				
			    public String mat_id;

				public String getMat_id () {
					return this.mat_id;
				}
				
			    public String mmat_id;

				public String getMmat_id () {
					return this.mmat_id;
				}
				
			    public int qty;

				public int getQty () {
					return this.qty;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.sply_mat_id == null) ? 0 : this.sply_mat_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputMaterialsStruct other = (outputMaterialsStruct) obj;
		
						if (this.sply_mat_id == null) {
							if (other.sply_mat_id != null)
								return false;
						
						} else if (!this.sply_mat_id.equals(other.sply_mat_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputMaterialsStruct other) {

		other.sply_mat_id = this.sply_mat_id;
	            other.sply_id = this.sply_id;
	            other.mat_id = this.mat_id;
	            other.mmat_id = this.mmat_id;
	            other.qty = this.qty;
	            
	}

	public void copyKeysDataTo(outputMaterialsStruct other) {

		other.sply_mat_id = this.sply_mat_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
					this.sply_mat_id = readString(dis);
					
					this.sply_id = readString(dis);
					
					this.mat_id = readString(dis);
					
					this.mmat_id = readString(dis);
					
			        this.qty = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.sply_mat_id,dos);
					
					// String
				
						writeString(this.sply_id,dos);
					
					// String
				
						writeString(this.mat_id,dos);
					
					// String
				
						writeString(this.mmat_id,dos);
					
					// int
				
		            	dos.writeInt(this.qty);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sply_mat_id="+sply_mat_id);
		sb.append(",sply_id="+sply_id);
		sb.append(",mat_id="+mat_id);
		sb.append(",mmat_id="+mmat_id);
		sb.append(",qty="+String.valueOf(qty));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputMaterialsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.sply_mat_id, other.sply_mat_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public String act_ptcpt_id;

				public String getAct_ptcpt_id () {
					return this.act_ptcpt_id;
				}
				
			    public String act_id;

				public String getAct_id () {
					return this.act_id;
				}
				
			    public String ent_id;

				public String getEnt_id () {
					return this.ent_id;
				}
				
			    public Integer qty;

				public Integer getQty () {
					return this.qty;
				}
				
			    public String mat_id;

				public String getMat_id () {
					return this.mat_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
					this.act_ptcpt_id = readString(dis);
					
					this.act_id = readString(dis);
					
					this.ent_id = readString(dis);
					
						this.qty = readInteger(dis);
					
					this.mat_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.act_ptcpt_id,dos);
					
					// String
				
						writeString(this.act_id,dos);
					
					// String
				
						writeString(this.ent_id,dos);
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// String
				
						writeString(this.mat_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_ptcpt_id="+act_ptcpt_id);
		sb.append(",act_id="+act_id);
		sb.append(",ent_id="+ent_id);
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",mat_id="+mat_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public String act_ptcpt_id;

				public String getAct_ptcpt_id () {
					return this.act_ptcpt_id;
				}
				
			    public String act_id;

				public String getAct_id () {
					return this.act_id;
				}
				
			    public String ent_id;

				public String getEnt_id () {
					return this.ent_id;
				}
				
			    public Integer qty;

				public Integer getQty () {
					return this.qty;
				}
				
			    public String mat_id;

				public String getMat_id () {
					return this.mat_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
					this.act_ptcpt_id = readString(dis);
					
					this.act_id = readString(dis);
					
					this.ent_id = readString(dis);
					
						this.qty = readInteger(dis);
					
					this.mat_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.act_ptcpt_id,dos);
					
					// String
				
						writeString(this.act_id,dos);
					
					// String
				
						writeString(this.ent_id,dos);
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// String
				
						writeString(this.mat_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_ptcpt_id="+act_ptcpt_id);
		sb.append(",act_id="+act_id);
		sb.append(",ent_id="+ent_id);
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",mat_id="+mat_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public String act_ptcpt_id;

				public String getAct_ptcpt_id () {
					return this.act_ptcpt_id;
				}
				
			    public String act_id;

				public String getAct_id () {
					return this.act_id;
				}
				
			    public String ent_id;

				public String getEnt_id () {
					return this.ent_id;
				}
				
			    public Integer qty;

				public Integer getQty () {
					return this.qty;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
					this.act_ptcpt_id = readString(dis);
					
					this.act_id = readString(dis);
					
					this.ent_id = readString(dis);
					
						this.qty = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.act_ptcpt_id,dos);
					
					// String
				
						writeString(this.act_id,dos);
					
					// String
				
						writeString(this.ent_id,dos);
					
					// Integer
				
						writeInteger(this.qty,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_ptcpt_id="+act_ptcpt_id);
		sb.append(",act_id="+act_id);
		sb.append(",ent_id="+ent_id);
		sb.append(",qty="+String.valueOf(qty));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_11Struct implements routines.system.IPersistableRow<after_tDBInput_11Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public String act_ptcpt_id;

				public String getAct_ptcpt_id () {
					return this.act_ptcpt_id;
				}
				
			    public String act_id;

				public String getAct_id () {
					return this.act_id;
				}
				
			    public String ent_id;

				public String getEnt_id () {
					return this.ent_id;
				}
				
			    public Integer qty;

				public Integer getQty () {
					return this.qty;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
					this.act_ptcpt_id = readString(dis);
					
					this.act_id = readString(dis);
					
					this.ent_id = readString(dis);
					
						this.qty = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.act_ptcpt_id,dos);
					
					// String
				
						writeString(this.act_id,dos);
					
					// String
				
						writeString(this.ent_id,dos);
					
					// Integer
				
						writeInteger(this.qty,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_ptcpt_id="+act_ptcpt_id);
		sb.append(",act_id="+act_id);
		sb.append(",ent_id="+ent_id);
		sb.append(",qty="+String.valueOf(qty));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_10Process(globalMap);
		tDBInput_12Process(globalMap);
		tDBInput_15Process(globalMap);

		row26Struct row26 = new row26Struct();
row28Struct row28 = new row28Struct();
outputSupplyStruct outputSupply = new outputSupplyStruct();
row24Struct row24 = new row24Struct();
row31Struct row31 = new row31Struct();
outputMaterialsStruct outputMaterials = new outputMaterialsStruct();
row32Struct row32 = new row32Struct();







	
	/**
	 * [tDBOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_7", false);
		start_Hash.put("tDBOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row24" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_7 = 0;
		





String dbschema_tDBOutput_7 = null;
	dbschema_tDBOutput_7 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tDBOutput_7 = null;
if(dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
	tableName_tDBOutput_7 = "sply_mat_tbl";
} else {
	tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\"" + "sply_mat_tbl";
}

int nb_line_tDBOutput_7 = 0;
int nb_line_update_tDBOutput_7 = 0;
int nb_line_inserted_tDBOutput_7 = 0;
int nb_line_deleted_tDBOutput_7 = 0;
int nb_line_rejected_tDBOutput_7 = 0;

int deletedCount_tDBOutput_7=0;
int updatedCount_tDBOutput_7=0;
int insertedCount_tDBOutput_7=0;
int rejectedCount_tDBOutput_7=0;

boolean whetherReject_tDBOutput_7 = false;

java.sql.Connection conn_tDBOutput_7 = null;
String dbUser_tDBOutput_7 = null;

	conn_tDBOutput_7 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tDBOutput_7 = 10000;
   int batchSizeCounter_tDBOutput_7=0;

int count_tDBOutput_7=0;
	    String insert_tDBOutput_7 = "INSERT INTO \"" + tableName_tDBOutput_7 + "\" (\"sply_mat_id\",\"sply_id\",\"mat_id\",\"mmat_id\",\"qty\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
	    resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);
	    

 



/**
 * [tDBOutput_7 begin ] stop
 */



	
	/**
	 * [tJoin_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJoin_3", false);
		start_Hash.put("tJoin_3", System.currentTimeMillis());
		
	
	currentComponent="tJoin_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputSupply" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJoin_3 = 0;
		
    final java.util.Map<row25Struct, row25Struct> tHash_tJoin_3 = (java.util.Map<row25Struct, row25Struct>) globalMap.get("tHash_row25");
    
    class Util_tJoin_3
    {
        row25Struct lookupValue = null;
        row25Struct row25HashKey = new row25Struct(); 
        
        public boolean isJoined(outputSupplyStruct mainRow) {                        
           row25HashKey.sply_id = mainRow.sply_id;

			row25HashKey.hashCodeDirty = true;			             
            lookupValue = tHash_tJoin_3.get(row25HashKey);            
            if(lookupValue != null){
            	return true;
            }else{
            }  
            return false;
        }
    }
        
	Util_tJoin_3 util_tJoin_3 = new Util_tJoin_3();
        
    int nb_line_tJoin_3 = 0; 
 



/**
 * [tJoin_3 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row28" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputSupplyStruct outputSupply_tmp = new outputSupplyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */






	
	/**
	 * [tDBOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_9", false);
		start_Hash.put("tDBOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row32" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_9 = 0;
		





String dbschema_tDBOutput_9 = null;
	dbschema_tDBOutput_9 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tDBOutput_9 = null;
if(dbschema_tDBOutput_9 == null || dbschema_tDBOutput_9.trim().length() == 0) {
	tableName_tDBOutput_9 = "sply_mat_tbl";
} else {
	tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "\".\"" + "sply_mat_tbl";
}

int nb_line_tDBOutput_9 = 0;
int nb_line_update_tDBOutput_9 = 0;
int nb_line_inserted_tDBOutput_9 = 0;
int nb_line_deleted_tDBOutput_9 = 0;
int nb_line_rejected_tDBOutput_9 = 0;

int deletedCount_tDBOutput_9=0;
int updatedCount_tDBOutput_9=0;
int insertedCount_tDBOutput_9=0;
int rejectedCount_tDBOutput_9=0;

boolean whetherReject_tDBOutput_9 = false;

java.sql.Connection conn_tDBOutput_9 = null;
String dbUser_tDBOutput_9 = null;

	conn_tDBOutput_9 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tDBOutput_9 = 10000;
   int batchSizeCounter_tDBOutput_9=0;

int count_tDBOutput_9=0;
	    String insert_tDBOutput_9 = "INSERT INTO \"" + tableName_tDBOutput_9 + "\" (\"sply_mat_id\",\"sply_id\",\"mat_id\",\"mmat_id\",\"qty\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9.prepareStatement(insert_tDBOutput_9);
	    resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);
	    

 



/**
 * [tDBOutput_9 begin ] stop
 */



	
	/**
	 * [tJoin_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJoin_5", false);
		start_Hash.put("tJoin_5", System.currentTimeMillis());
		
	
	currentComponent="tJoin_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputMaterials" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJoin_5 = 0;
		
    final java.util.Map<row33Struct, row33Struct> tHash_tJoin_5 = (java.util.Map<row33Struct, row33Struct>) globalMap.get("tHash_row33");
    
    class Util_tJoin_5
    {
        row33Struct lookupValue = null;
        row33Struct row33HashKey = new row33Struct(); 
        
        public boolean isJoined(outputMaterialsStruct mainRow) {                        
           row33HashKey.sply_id = mainRow.sply_id;

			row33HashKey.hashCodeDirty = true;			             
            lookupValue = tHash_tJoin_5.get(row33HashKey);            
            if(lookupValue != null){
            	return true;
            }else{
            }  
            return false;
        }
    }
        
	Util_tJoin_5 util_tJoin_5 = new Util_tJoin_5();
        
    int nb_line_tJoin_5 = 0; 
 



/**
 * [tJoin_5 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row31" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputMaterialsStruct outputMaterials_tmp = new outputMaterialsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tJoin_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJoin_4", false);
		start_Hash.put("tJoin_4", System.currentTimeMillis());
		
	
	currentComponent="tJoin_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row26" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJoin_4 = 0;
		
    final java.util.Map<row27Struct, row27Struct> tHash_tJoin_4 = (java.util.Map<row27Struct, row27Struct>) globalMap.get("tHash_row27");
    
    class Util_tJoin_4
    {
        row27Struct lookupValue = null;
        row27Struct row27HashKey = new row27Struct(); 
        
        public boolean isJoined(row26Struct mainRow) {                        
           row27HashKey.mmat_id = mainRow.ent_id;

			row27HashKey.hashCodeDirty = true;			             
            lookupValue = tHash_tJoin_4.get(row27HashKey);            
            if(lookupValue != null){
            	return true;
            }else{
            }  
            return false;
        }
    }
        
	Util_tJoin_4 util_tJoin_4 = new Util_tJoin_4();
        
    int nb_line_tJoin_4 = 0; 
 



/**
 * [tJoin_4 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
		        conn_tDBInput_11 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "select act_ptcpt_id, act_id, ent_id, qty\nfrom \n	act_ptcpt_tbl \nwhere \n	rol_cd_id in ('a5cac7f7-e3b7-4dd8-872c-db0e7"
+"fcc2d84','99e77288-cb09-4050-a8cf-385513f32f0a')\n	and act_id in (select act_id from act_tbl where cls_cd_id = 'a064984f"
+"-9847-4480-8bea-dddf64b3c77c')";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								row26.act_ptcpt_id = null;
							} else {
	                         		
        	row26.act_ptcpt_id = routines.system.JDBCUtil.getString(rs_tDBInput_11, 1, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								row26.act_id = null;
							} else {
	                         		
        	row26.act_id = routines.system.JDBCUtil.getString(rs_tDBInput_11, 2, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 3) {
								row26.ent_id = null;
							} else {
	                         		
        	row26.ent_id = routines.system.JDBCUtil.getString(rs_tDBInput_11, 3, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 4) {
								row26.qty = null;
							} else {
		                          
            if(rs_tDBInput_11.getObject(4) != null) {
                row26.qty = rs_tDBInput_11.getInt(4);
            } else {
                    row26.qty = null;
            }
		                    }
					


 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tJoin_4 main ] start
	 */

	

	
	
	currentComponent="tJoin_4";

	

			//row26
			//row26


			
				if(execStat){
					runStat.updateStatOnConnection("row26"+iterateId,1, 1);
				} 
			

		

			row28 = null;	
			row31 = null;	
	
				row28 = new row28Struct();						
						row28.act_ptcpt_id = row26.act_ptcpt_id;					
						row28.act_id = row26.act_id;					
						row28.ent_id = row26.ent_id;					
						row28.qty = row26.qty;
	
				row31 = new row31Struct();						
						row31.act_ptcpt_id = row26.act_ptcpt_id;					
						row31.act_id = row26.act_id;					
						row31.ent_id = row26.ent_id;					
						row31.qty = row26.qty;

			if(util_tJoin_4.isJoined(row26)){ 			
								row28.mat_id = util_tJoin_4.lookupValue.mat_id; 
					row31 = null; 
			} 
		
				else{ 
						row28 = null; 
				}		
///////////////////////    			

 


	tos_count_tJoin_4++;

/**
 * [tJoin_4 main ] stop
 */
	
	/**
	 * [tJoin_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJoin_4";

	

 



/**
 * [tJoin_4 process_data_begin ] stop
 */
// Start of branch "row28"
if(row28 != null) { 



	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

			//row28
			//row28


			
				if(execStat){
					runStat.updateStatOnConnection("row28"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

outputSupply = null;


// # Output table : 'outputSupply'
outputSupply_tmp.sply_mat_id = row28.act_ptcpt_id ;
outputSupply_tmp.sply_id = row28.act_id ;
outputSupply_tmp.mat_id = row28.mat_id;
outputSupply_tmp.mmat_id = row28.ent_id ;
outputSupply_tmp.qty = row28.qty;
outputSupply = outputSupply_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "outputSupply"
if(outputSupply != null) { 



	
	/**
	 * [tJoin_3 main ] start
	 */

	

	
	
	currentComponent="tJoin_3";

	

			//outputSupply
			//outputSupply


			
				if(execStat){
					runStat.updateStatOnConnection("outputSupply"+iterateId,1, 1);
				} 
			

		

			row24 = null;	
	
				row24 = new row24Struct();						
						row24.sply_mat_id = outputSupply.sply_mat_id;					
						row24.sply_id = outputSupply.sply_id;					
						row24.mat_id = outputSupply.mat_id;					
						row24.mmat_id = outputSupply.mmat_id;					
						row24.qty = outputSupply.qty;

			if(util_tJoin_3.isJoined(outputSupply)){ 
			} 
		
				else{ 
						row24 = null; 
				}		
///////////////////////    			

 


	tos_count_tJoin_3++;

/**
 * [tJoin_3 main ] stop
 */
	
	/**
	 * [tJoin_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJoin_3";

	

 



/**
 * [tJoin_3 process_data_begin ] stop
 */
// Start of branch "row24"
if(row24 != null) { 



	
	/**
	 * [tDBOutput_7 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

			//row24
			//row24


			
				if(execStat){
					runStat.updateStatOnConnection("row24"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_7 = false;
                    if(row24.sply_mat_id == null) {
pstmt_tDBOutput_7.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_7.setObject(1, row24.sply_mat_id, java.sql.Types.OTHER);
}

                    if(row24.sply_id == null) {
pstmt_tDBOutput_7.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_7.setObject(2, row24.sply_id, java.sql.Types.OTHER);
}

                    if(row24.mat_id == null) {
pstmt_tDBOutput_7.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_7.setObject(3, row24.mat_id, java.sql.Types.OTHER);
}

                    if(row24.mmat_id == null) {
pstmt_tDBOutput_7.setNull(4, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_7.setObject(4, row24.mmat_id, java.sql.Types.OTHER);
}

                    pstmt_tDBOutput_7.setInt(5, row24.qty);

			
    		pstmt_tDBOutput_7.addBatch();
    		nb_line_tDBOutput_7++;
    		  
    		  batchSizeCounter_tDBOutput_7++;
    		  
            if(!whetherReject_tDBOutput_7) {
            }
    			if ((batchSize_tDBOutput_7 > 0) && (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
                try {
						int countSum_tDBOutput_7 = 0;
						    
						for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
						}
				    	
				    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
				    	
            	    	batchSizeCounter_tDBOutput_7 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_7){
				    	java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),sqle_tDBOutput_7=null;
				    	String errormessage_tDBOutput_7;
						if (ne_tDBOutput_7 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_7 = new java.sql.SQLException(e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(), ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
							errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
						}else{
							errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
						}
				    	
				    	int countSum_tDBOutput_7 = 0;
						for(int countEach_tDBOutput_7: e_tDBOutput_7.getUpdateCounts()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
						}
						
				    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
				    	
				    	System.err.println(errormessage_tDBOutput_7);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_7++;

/**
 * [tDBOutput_7 main ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_end ] stop
 */

} // End of branch "row24"




	
	/**
	 * [tJoin_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJoin_3";

	

 



/**
 * [tJoin_3 process_data_end ] stop
 */

} // End of branch "outputSupply"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */

} // End of branch "row28"




// Start of branch "row31"
if(row31 != null) { 



	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

			//row31
			//row31


			
				if(execStat){
					runStat.updateStatOnConnection("row31"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_13 = false;
		  boolean mainRowRejected_tMap_13 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

outputMaterials = null;


// # Output table : 'outputMaterials'
outputMaterials_tmp.sply_mat_id = row31.act_ptcpt_id ;
outputMaterials_tmp.sply_id = row31.act_id ;
outputMaterials_tmp.mat_id = row31.ent_id ;
outputMaterials_tmp.mmat_id = null;
outputMaterials_tmp.qty = 0;
outputMaterials = outputMaterials_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "outputMaterials"
if(outputMaterials != null) { 



	
	/**
	 * [tJoin_5 main ] start
	 */

	

	
	
	currentComponent="tJoin_5";

	

			//outputMaterials
			//outputMaterials


			
				if(execStat){
					runStat.updateStatOnConnection("outputMaterials"+iterateId,1, 1);
				} 
			

		

			row32 = null;	
	
				row32 = new row32Struct();						
						row32.sply_mat_id = outputMaterials.sply_mat_id;					
						row32.sply_id = outputMaterials.sply_id;					
						row32.mat_id = outputMaterials.mat_id;					
						row32.mmat_id = outputMaterials.mmat_id;					
						row32.qty = outputMaterials.qty;

			if(util_tJoin_5.isJoined(outputMaterials)){ 
			} 
		
				else{ 
						row32 = null; 
				}		
///////////////////////    			

 


	tos_count_tJoin_5++;

/**
 * [tJoin_5 main ] stop
 */
	
	/**
	 * [tJoin_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJoin_5";

	

 



/**
 * [tJoin_5 process_data_begin ] stop
 */
// Start of branch "row32"
if(row32 != null) { 



	
	/**
	 * [tDBOutput_9 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

			//row32
			//row32


			
				if(execStat){
					runStat.updateStatOnConnection("row32"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_9 = false;
                    if(row32.sply_mat_id == null) {
pstmt_tDBOutput_9.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_9.setObject(1, row32.sply_mat_id, java.sql.Types.OTHER);
}

                    if(row32.sply_id == null) {
pstmt_tDBOutput_9.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_9.setObject(2, row32.sply_id, java.sql.Types.OTHER);
}

                    if(row32.mat_id == null) {
pstmt_tDBOutput_9.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_9.setObject(3, row32.mat_id, java.sql.Types.OTHER);
}

                    if(row32.mmat_id == null) {
pstmt_tDBOutput_9.setNull(4, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_9.setObject(4, row32.mmat_id, java.sql.Types.OTHER);
}

                    pstmt_tDBOutput_9.setInt(5, row32.qty);

			
    		pstmt_tDBOutput_9.addBatch();
    		nb_line_tDBOutput_9++;
    		  
    		  batchSizeCounter_tDBOutput_9++;
    		  
            if(!whetherReject_tDBOutput_9) {
            }
    			if ((batchSize_tDBOutput_9 > 0) && (batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9)) {
                try {
						int countSum_tDBOutput_9 = 0;
						    
						for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
						}
				    	
				    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
				    	
            	    	batchSizeCounter_tDBOutput_9 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_9){
				    	java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),sqle_tDBOutput_9=null;
				    	String errormessage_tDBOutput_9;
						if (ne_tDBOutput_9 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_9 = new java.sql.SQLException(e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(), ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
							errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
						}else{
							errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
						}
				    	
				    	int countSum_tDBOutput_9 = 0;
						for(int countEach_tDBOutput_9: e_tDBOutput_9.getUpdateCounts()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
						}
						
				    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
				    	
				    	System.err.println(errormessage_tDBOutput_9);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_9++;

/**
 * [tDBOutput_9 main ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_end ] stop
 */

} // End of branch "row32"




	
	/**
	 * [tJoin_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJoin_5";

	

 



/**
 * [tJoin_5 process_data_end ] stop
 */

} // End of branch "outputMaterials"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_end ] stop
 */

} // End of branch "row31"




	
	/**
	 * [tJoin_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJoin_4";

	

 



/**
 * [tJoin_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);
 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tJoin_4 end ] start
	 */

	

	
	
	currentComponent="tJoin_4";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row26"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJoin_4", true);
end_Hash.put("tJoin_4", System.currentTimeMillis());




/**
 * [tJoin_4 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row28"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tJoin_3 end ] start
	 */

	

	
	
	currentComponent="tJoin_3";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputSupply"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJoin_3", true);
end_Hash.put("tJoin_3", System.currentTimeMillis());




/**
 * [tJoin_3 end ] stop
 */

	
	/**
	 * [tDBOutput_7 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



	    try {
				int countSum_tDBOutput_7 = 0;
				if (pstmt_tDBOutput_7 != null && batchSizeCounter_tDBOutput_7 > 0) {
						
					for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_7){
	    	java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),sqle_tDBOutput_7=null;
	    	String errormessage_tDBOutput_7;
			if (ne_tDBOutput_7 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_7 = new java.sql.SQLException(e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(), ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
				errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
			}else{
				errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
			}
	    	
	    	int countSum_tDBOutput_7 = 0;
			for(int countEach_tDBOutput_7: e_tDBOutput_7.getUpdateCounts()) {
				countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
			}
			
	    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
	    	
	    	System.err.println(errormessage_tDBOutput_7);
	    	
		}
	    
        if(pstmt_tDBOutput_7 != null) {
        		
            pstmt_tDBOutput_7.close();
            resourceMap.remove("pstmt_tDBOutput_7");
        }
    resourceMap.put("statementClosed_tDBOutput_7", true);

	nb_line_deleted_tDBOutput_7=nb_line_deleted_tDBOutput_7+ deletedCount_tDBOutput_7;
	nb_line_update_tDBOutput_7=nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
	nb_line_inserted_tDBOutput_7=nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
	nb_line_rejected_tDBOutput_7=nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;
	
        globalMap.put("tDBOutput_7_NB_LINE",nb_line_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_UPDATED",nb_line_update_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_DELETED",nb_line_deleted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row24"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_7", true);
end_Hash.put("tDBOutput_7", System.currentTimeMillis());




/**
 * [tDBOutput_7 end ] stop
 */










	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row31"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tJoin_5 end ] start
	 */

	

	
	
	currentComponent="tJoin_5";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputMaterials"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJoin_5", true);
end_Hash.put("tJoin_5", System.currentTimeMillis());




/**
 * [tJoin_5 end ] stop
 */

	
	/**
	 * [tDBOutput_9 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



	    try {
				int countSum_tDBOutput_9 = 0;
				if (pstmt_tDBOutput_9 != null && batchSizeCounter_tDBOutput_9 > 0) {
						
					for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
						countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_9){
	    	java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),sqle_tDBOutput_9=null;
	    	String errormessage_tDBOutput_9;
			if (ne_tDBOutput_9 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_9 = new java.sql.SQLException(e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(), ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
				errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
			}else{
				errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
			}
	    	
	    	int countSum_tDBOutput_9 = 0;
			for(int countEach_tDBOutput_9: e_tDBOutput_9.getUpdateCounts()) {
				countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
			}
			
	    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
	    	
	    	System.err.println(errormessage_tDBOutput_9);
	    	
		}
	    
        if(pstmt_tDBOutput_9 != null) {
        		
            pstmt_tDBOutput_9.close();
            resourceMap.remove("pstmt_tDBOutput_9");
        }
    resourceMap.put("statementClosed_tDBOutput_9", true);

	nb_line_deleted_tDBOutput_9=nb_line_deleted_tDBOutput_9+ deletedCount_tDBOutput_9;
	nb_line_update_tDBOutput_9=nb_line_update_tDBOutput_9 + updatedCount_tDBOutput_9;
	nb_line_inserted_tDBOutput_9=nb_line_inserted_tDBOutput_9 + insertedCount_tDBOutput_9;
	nb_line_rejected_tDBOutput_9=nb_line_rejected_tDBOutput_9 + rejectedCount_tDBOutput_9;
	
        globalMap.put("tDBOutput_9_NB_LINE",nb_line_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_UPDATED",nb_line_update_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_DELETED",nb_line_deleted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_9);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row32"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_9", true);
end_Hash.put("tDBOutput_9", System.currentTimeMillis());




/**
 * [tDBOutput_9 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk24", 0, "ok");
								} 
							
							tDBCommit_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				      	
					      			//free memory for "tJoin_3"
									globalMap.remove("tHash_row25");
				      			      	
					      			//free memory for "tJoin_5"
									globalMap.remove("tHash_row33");
				      			      	
					      			//free memory for "tJoin_4"
									globalMap.remove("tHash_row27");
				      			
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tJoin_4 finally ] start
	 */

	

	
	
	currentComponent="tJoin_4";

	

 



/**
 * [tJoin_4 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tJoin_3 finally ] start
	 */

	

	
	
	currentComponent="tJoin_3";

	

 



/**
 * [tJoin_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



    if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
                if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_7")) != null) {
                    pstmtToClose_tDBOutput_7.close();
                }
    }
 



/**
 * [tDBOutput_7 finally ] stop
 */










	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tJoin_5 finally ] start
	 */

	

	
	
	currentComponent="tJoin_5";

	

 



/**
 * [tJoin_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



    if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
                if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_9")) != null) {
                    pstmtToClose_tDBOutput_9.close();
                }
    }
 



/**
 * [tDBOutput_9 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBCommit_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_2", false);
		start_Hash.put("tDBCommit_2", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_2";

	
		int tos_count_tDBCommit_2 = 0;
		

 



/**
 * [tDBCommit_2 begin ] stop
 */
	
	/**
	 * [tDBCommit_2 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

	java.sql.Connection conn_tDBCommit_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	if(conn_tDBCommit_2 != null && !conn_tDBCommit_2.isClosed())
	{
	
			
			conn_tDBCommit_2.commit();
			
	
	}

 


	tos_count_tDBCommit_2++;

/**
 * [tDBCommit_2 main ] stop
 */
	
	/**
	 * [tDBCommit_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_2 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 

ok_Hash.put("tDBCommit_2", true);
end_Hash.put("tDBCommit_2", System.currentTimeMillis());




/**
 * [tDBCommit_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBCommit_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk25", 0, "ok");
								} 
							
							tDBInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_2 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 1);
	}
	


public static class outputActListsStruct implements routines.system.IPersistableRow<outputActListsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public Object loc_id;

				public Object getLoc_id () {
					return this.loc_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				
			    public Object aut_id;

				public Object getAut_id () {
					return this.aut_id;
				}
				
			    public String typ_mnemonic;

				public String getTyp_mnemonic () {
					return this.typ_mnemonic;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.act_id == null) ? 0 : this.act_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputActListsStruct other = (outputActListsStruct) obj;
		
						if (this.act_id == null) {
							if (other.act_id != null)
								return false;
						
						} else if (!this.act_id.equals(other.act_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputActListsStruct other) {

		other.act_id = this.act_id;
	            other.loc_id = this.loc_id;
	            other.start_utc = this.start_utc;
	            other.stop_utc = this.stop_utc;
	            other.aut_id = this.aut_id;
	            other.typ_mnemonic = this.typ_mnemonic;
	            other.crt_etl_id = this.crt_etl_id;
	            
	}

	public void copyKeysDataTo(outputActListsStruct other) {

		other.act_id = this.act_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
						this.loc_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
						this.aut_id = (Object) dis.readObject();
					
					this.typ_mnemonic = readString(dis);
					
						this.crt_etl_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// Object
				
       			    	dos.writeObject(this.loc_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.aut_id);
					
					// String
				
						writeString(this.typ_mnemonic,dos);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",loc_id="+String.valueOf(loc_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
		sb.append(",aut_id="+String.valueOf(aut_id));
		sb.append(",typ_mnemonic="+typ_mnemonic);
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputActListsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.act_id, other.act_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				
			    public Object author_id;

				public Object getAuthor_id () {
					return this.author_id;
				}
				
			    public Object location_id;

				public Object getLocation_id () {
					return this.location_id;
				}
				
			    public String type_mnemonic;

				public String getType_mnemonic () {
					return this.type_mnemonic;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
						this.author_id = (Object) dis.readObject();
					
						this.location_id = (Object) dis.readObject();
					
					this.type_mnemonic = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.author_id);
					
					// Object
				
       			    	dos.writeObject(this.location_id);
					
					// String
				
						writeString(this.type_mnemonic,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
		sb.append(",author_id="+String.valueOf(author_id));
		sb.append(",location_id="+String.valueOf(location_id));
		sb.append(",type_mnemonic="+type_mnemonic);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				
			    public Object author_id;

				public Object getAuthor_id () {
					return this.author_id;
				}
				
			    public Object location_id;

				public Object getLocation_id () {
					return this.location_id;
				}
				
			    public String type_mnemonic;

				public String getType_mnemonic () {
					return this.type_mnemonic;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
						this.author_id = (Object) dis.readObject();
					
						this.location_id = (Object) dis.readObject();
					
					this.type_mnemonic = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.author_id);
					
					// Object
				
       			    	dos.writeObject(this.location_id);
					
					// String
				
						writeString(this.type_mnemonic,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
		sb.append(",author_id="+String.valueOf(author_id));
		sb.append(",location_id="+String.valueOf(location_id));
		sb.append(",type_mnemonic="+type_mnemonic);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_5Process(globalMap);

		row18Struct row18 = new row18Struct();
outputActListsStruct outputActLists = new outputActListsStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputActLists" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = "act_list_tbl";
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + "act_list_tbl";
}

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tDBOutput_3 = 10000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"act_id\",\"loc_id\",\"start_utc\",\"stop_utc\",\"aut_id\",\"typ_mnemonic\",\"crt_etl_id\") VALUES (?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row18" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
					globalMap.get( "tHash_Lookup_row19" ))
					;					
					
	
		tHash_Lookup_row19.initGet();
	

row19Struct row19HashKey = new row19Struct();
row19Struct row19Default = new row19Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputActListsStruct outputActLists_tmp = new outputActListsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
		        conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  act_tbl.act_id, \n  FIRST(act_vrsn_tbl.act_start_utc) as start_utc, \n  FIRST(act_vrsn_tbl.act_stop_utc) as "
+"stop_utc, \n  FIRST(Author.ent_id) AS Author_Id, \n  FIRST(Location.ent_id) AS Location_Id,\n  FIRST(typ_cs.mnemonic) AS"
+" type_mnemonic\n  FROM \n  act_vrsn_tbl \n  INNER JOIN act_tbl ON (act_tbl.act_id = act_vrsn_tbl.act_id AND act_tbl.cls_"
+"cd_id = 'b0323489-9a09-411a-bb55-ff283830ea1a')\n  INNER JOIN act_ptcpt_tbl as Author ON (Author.act_id = act_tbl.act_id"
+" AND Author.rol_cd_id = 'f0cb3faf-435d-4704-9217-b884f757bc14' AND Author.obslt_vrsn_seq_id IS NULL)\n  INNER JOIN act_p"
+"tcpt_tbl as Location ON (Location.act_id = act_tbl.act_id AND Location.rol_cd_id = '61848557-d78d-40e5-954f-0b9c97307a04"
+"' AND Location.obslt_vrsn_seq_id IS NULL)\n  INNER JOIN cd_vrsn_tbl AS typ_cs ON (act_vrsn_tbl.typ_cd_id = typ_cs.cd_id "
+"and typ_cs.obslt_utc is null)\n  WHERE  \n  act_vrsn_tbl.STS_CD_ID = 'afc33800-8225-4061-b168-bacc09cdbae3'\n  \n  AND a"
+"ct_vrsn_tbl.obslt_utc IS NULL\n GROUP BY act_tbl.act_id";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row18.act_id = null;
							} else {
		                          
            if(rs_tDBInput_4.getObject(1) != null) {
                row18.act_id = rs_tDBInput_4.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row18.start_utc = null;
							} else {
										
			row18.start_utc = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 2);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row18.stop_utc = null;
							} else {
										
			row18.stop_utc = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 3);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row18.author_id = null;
							} else {
		                          
            if(rs_tDBInput_4.getObject(4) != null) {
                row18.author_id = rs_tDBInput_4.getObject(4);
            } else {
                    row18.author_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row18.location_id = null;
							} else {
		                          
            if(rs_tDBInput_4.getObject(5) != null) {
                row18.location_id = rs_tDBInput_4.getObject(5);
            } else {
                    row18.location_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row18.type_mnemonic = null;
							} else {
	                         		
        	row18.type_mnemonic = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, false);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

			//row18
			//row18


			
				if(execStat){
					runStat.updateStatOnConnection("row18"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row19" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow19 = false;
       		  	    	
       		  	    	
 							row19Struct row19ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row19.lookup( row19HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row19.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow19 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow19 = true;
			           		  	} // G 21
                    		  	
                    		

							row19Struct row19 = null;
                    		  	 
							

								while ((tHash_Lookup_row19 != null && tHash_Lookup_row19.hasNext()) || forceLooprow19) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row19'
									
                    		  	 
							   
                    		  	 
	       		  	    	row19Struct fromLookup_row19 = null;
							row19 = row19Default;
										 
							
								
								if(!forceLooprow19) { // G 46
								
							
								 
							
								
								fromLookup_row19 = tHash_Lookup_row19.next();

							

							if(fromLookup_row19 != null) {
								row19 = fromLookup_row19;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow19 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

outputActLists = null;


// # Output table : 'outputActLists'
outputActLists_tmp.act_id = row18.act_id;
outputActLists_tmp.loc_id = row18.location_id ;
outputActLists_tmp.start_utc = row18.start_utc;
outputActLists_tmp.stop_utc = row18.stop_utc;
outputActLists_tmp.aut_id = row18.author_id ;
outputActLists_tmp.typ_mnemonic = row18.type_mnemonic ;
outputActLists_tmp.crt_etl_id = row19.etl_id ;
outputActLists = outputActLists_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "outputActLists"
if(outputActLists != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

			//outputActLists
			//outputActLists


			
				if(execStat){
					runStat.updateStatOnConnection("outputActLists"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_3 = false;
                    if(outputActLists.act_id == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_3.setObject(1, outputActLists.act_id, java.sql.Types.OTHER);
}

                    if(outputActLists.loc_id == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_3.setObject(2, outputActLists.loc_id, java.sql.Types.OTHER);
}

                    if(outputActLists.start_utc != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(outputActLists.start_utc.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(outputActLists.stop_utc != null) {
pstmt_tDBOutput_3.setTimestamp(4, new java.sql.Timestamp(outputActLists.stop_utc.getTime()));
} else {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(outputActLists.aut_id == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_3.setObject(5, outputActLists.aut_id, java.sql.Types.OTHER);
}

                    if(outputActLists.typ_mnemonic == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, outputActLists.typ_mnemonic);
}

                    if(outputActLists.crt_etl_id == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_3.setObject(7, outputActLists.crt_etl_id, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
            if(!whetherReject_tDBOutput_3) {
            }
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "outputActLists"



	
		} // close loop of lookup 'row19' // G_TM_M_043
	
	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row19 != null) {
						tHash_Lookup_row19.endGet();
					}
					globalMap.remove( "tHash_Lookup_row19" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row18"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    	int countSum_tDBOutput_3 = 0;
			for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
				countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
			}
			
	    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	
	    	System.err.println(errormessage_tDBOutput_3);
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputActLists"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_4:OnSubjobOk1", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tDBInput_6Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_4:OnSubjobOk2", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tDBInput_7Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_4:OnSubjobOk3", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk27", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_4:OnSubjobOk4", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tWarn_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row19"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class outputLocationRegistrationStruct implements routines.system.IPersistableRow<outputLocationRegistrationStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public Object loc_id;

				public Object getLoc_id () {
					return this.loc_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.act_id == null) ? 0 : this.act_id.hashCode());
					
						result = prime * result + ((this.loc_id == null) ? 0 : this.loc_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputLocationRegistrationStruct other = (outputLocationRegistrationStruct) obj;
		
						if (this.act_id == null) {
							if (other.act_id != null)
								return false;
						
						} else if (!this.act_id.equals(other.act_id))
						
							return false;
					
						if (this.loc_id == null) {
							if (other.loc_id != null)
								return false;
						
						} else if (!this.loc_id.equals(other.loc_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputLocationRegistrationStruct other) {

		other.act_id = this.act_id;
	            other.loc_id = this.loc_id;
	            
	}

	public void copyKeysDataTo(outputLocationRegistrationStruct other) {

		other.act_id = this.act_id;
	            	other.loc_id = this.loc_id;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
						this.loc_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// Object
				
       			    	dos.writeObject(this.loc_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",loc_id="+String.valueOf(loc_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputLocationRegistrationStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.act_id, other.act_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.loc_id, other.loc_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
						this.ent_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();
outputLocationRegistrationStruct outputLocationRegistration = new outputLocationRegistrationStruct();





	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputLocationRegistration" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = "act_list_loc_tbl";
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + "act_list_loc_tbl";
}

int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tDBOutput_4 = 10000;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
	    String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4 + "\" (\"act_id\",\"loc_id\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row20" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputLocationRegistrationStruct outputLocationRegistration_tmp = new outputLocationRegistrationStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
		        conn_tDBInput_6 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT act_tbl.act_id, ent_id\nFROM act_ptcpt_tbl \nINNER JOIN act_tbl ON (act_tbl.act_id = act_ptcpt_tbl.act_id AND ac"
+"t_tbl.cls_cd_id = 'b0323489-9a09-411a-bb55-ff283830ea1a')\nINNER JOIN act_vrsn_tbl ON (act_tbl.act_id = act_vrsn_tbl.act"
+"_id AND obslt_utc IS NULL)\nWHERE \n	obslt_vrsn_seq_id IS NULL\n	AND act_vrsn_tbl.STS_CD_ID = 'afc33800-8225-4061-b168-b"
+"acc09cdbae3'\n	AND rol_cd_id = '727b3624-ea62-46bb-a68b-b9e49e302eca';";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row20.act_id = null;
							} else {
		                          
            if(rs_tDBInput_6.getObject(1) != null) {
                row20.act_id = rs_tDBInput_6.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row20.ent_id = null;
							} else {
		                          
            if(rs_tDBInput_6.getObject(2) != null) {
                row20.ent_id = rs_tDBInput_6.getObject(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

			//row20
			//row20


			
				if(execStat){
					runStat.updateStatOnConnection("row20"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

outputLocationRegistration = null;


// # Output table : 'outputLocationRegistration'
outputLocationRegistration_tmp.act_id = row20.act_id;
outputLocationRegistration_tmp.loc_id = row20.ent_id ;
outputLocationRegistration = outputLocationRegistration_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "outputLocationRegistration"
if(outputLocationRegistration != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

			//outputLocationRegistration
			//outputLocationRegistration


			
				if(execStat){
					runStat.updateStatOnConnection("outputLocationRegistration"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_4 = false;
                    if(outputLocationRegistration.act_id == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_4.setObject(1, outputLocationRegistration.act_id, java.sql.Types.OTHER);
}

                    if(outputLocationRegistration.loc_id == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_4.setObject(2, outputLocationRegistration.loc_id, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_4.addBatch();
    		nb_line_tDBOutput_4++;
    		  
    		  batchSizeCounter_tDBOutput_4++;
    		  
            if(!whetherReject_tDBOutput_4) {
            }
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
				    	
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    	int countSum_tDBOutput_4 = 0;
						for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
						
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    	System.err.println(errormessage_tDBOutput_4);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "outputLocationRegistration"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row20"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    	int countSum_tDBOutput_4 = 0;
			for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
				countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
			}
			
	    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
	    	
	    	System.err.println(errormessage_tDBOutput_4);
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputLocationRegistration"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class outputRelationshipsStruct implements routines.system.IPersistableRow<outputRelationshipsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public Object sbadm_act_id;

				public Object getSbadm_act_id () {
					return this.sbadm_act_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.act_id == null) ? 0 : this.act_id.hashCode());
					
						result = prime * result + ((this.sbadm_act_id == null) ? 0 : this.sbadm_act_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputRelationshipsStruct other = (outputRelationshipsStruct) obj;
		
						if (this.act_id == null) {
							if (other.act_id != null)
								return false;
						
						} else if (!this.act_id.equals(other.act_id))
						
							return false;
					
						if (this.sbadm_act_id == null) {
							if (other.sbadm_act_id != null)
								return false;
						
						} else if (!this.sbadm_act_id.equals(other.sbadm_act_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputRelationshipsStruct other) {

		other.act_id = this.act_id;
	            other.sbadm_act_id = this.sbadm_act_id;
	            
	}

	public void copyKeysDataTo(outputRelationshipsStruct other) {

		other.act_id = this.act_id;
	            	other.sbadm_act_id = this.sbadm_act_id;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
						this.sbadm_act_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// Object
				
       			    	dos.writeObject(this.sbadm_act_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",sbadm_act_id="+String.valueOf(sbadm_act_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputRelationshipsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.act_id, other.act_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.sbadm_act_id, other.sbadm_act_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object src_act_id;

				public Object getSrc_act_id () {
					return this.src_act_id;
				}
				
			    public Object trg_act_id;

				public Object getTrg_act_id () {
					return this.trg_act_id;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.src_act_id = (Object) dis.readObject();
					
						this.trg_act_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.src_act_id);
					
					// Object
				
       			    	dos.writeObject(this.trg_act_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("src_act_id="+String.valueOf(src_act_id));
		sb.append(",trg_act_id="+String.valueOf(trg_act_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();
outputRelationshipsStruct outputRelationships = new outputRelationshipsStruct();





	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputRelationships" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = "act_list_act_rel_tbl";
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + "act_list_act_rel_tbl";
}

int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tDBOutput_5 = 10000;
   int batchSizeCounter_tDBOutput_5=0;

int count_tDBOutput_5=0;
	    String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5 + "\" (\"act_id\",\"sbadm_act_id\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row21" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputRelationshipsStruct outputRelationships_tmp = new outputRelationshipsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
		        conn_tDBInput_7 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT DISTINCT src_act_id, trg_act_id\nFROM act_rel_tbl \nINNER JOIN act_tbl ON (act_id = src_act_id AND act_tbl.cls_c"
+"d_id = 'b0323489-9a09-411a-bb55-ff283830ea1a')\nINNER JOIN act_vrsn_tbl ON (act_tbl.act_id = act_vrsn_tbl.act_id AND obs"
+"lt_utc IS NULL)\nWHERE \n	act_vrsn_tbl.STS_CD_ID = 'afc33800-8225-4061-b168-bacc09cdbae3'\n	AND rel_typ_cd_id = '78B9540"
+"F-438B-4B6F-8D83-AAF4979DBC64';";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row21.src_act_id = null;
							} else {
		                          
            if(rs_tDBInput_7.getObject(1) != null) {
                row21.src_act_id = rs_tDBInput_7.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								row21.trg_act_id = null;
							} else {
		                          
            if(rs_tDBInput_7.getObject(2) != null) {
                row21.trg_act_id = rs_tDBInput_7.getObject(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

			//row21
			//row21


			
				if(execStat){
					runStat.updateStatOnConnection("row21"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

outputRelationships = null;


// # Output table : 'outputRelationships'
outputRelationships_tmp.act_id = row21.src_act_id ;
outputRelationships_tmp.sbadm_act_id = row21.trg_act_id ;
outputRelationships = outputRelationships_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "outputRelationships"
if(outputRelationships != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

			//outputRelationships
			//outputRelationships


			
				if(execStat){
					runStat.updateStatOnConnection("outputRelationships"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_5 = false;
                    if(outputRelationships.act_id == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_5.setObject(1, outputRelationships.act_id, java.sql.Types.OTHER);
}

                    if(outputRelationships.sbadm_act_id == null) {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_5.setObject(2, outputRelationships.sbadm_act_id, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_5.addBatch();
    		nb_line_tDBOutput_5++;
    		  
    		  batchSizeCounter_tDBOutput_5++;
    		  
            if(!whetherReject_tDBOutput_5) {
            }
    			if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
						int countSum_tDBOutput_5 = 0;
						    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
				    	
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            	    	batchSizeCounter_tDBOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_5){
				    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
				    	String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						}else{
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}
				    	
				    	int countSum_tDBOutput_5 = 0;
						for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
						
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    	System.err.println(errormessage_tDBOutput_5);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "outputRelationships"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);
 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row21"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



	    try {
				int countSum_tDBOutput_5 = 0;
				if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
						
					for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_5){
	    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
	    	String errormessage_tDBOutput_5;
			if (ne_tDBOutput_5 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
				errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
			}else{
				errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
			}
	    	
	    	int countSum_tDBOutput_5 = 0;
			for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
				countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
			}
			
	    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
	    	
	    	System.err.println(errormessage_tDBOutput_5);
	    	
		}
	    
        if(pstmt_tDBOutput_5 != null) {
        		
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputRelationships"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class outputVvmStruct implements routines.system.IPersistableRow<outputVvmStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public Object mmat_id;

				public Object getMmat_id () {
					return this.mmat_id;
				}
				
			    public int qty;

				public int getQty () {
					return this.qty;
				}
				
			    public String vvm_cs;

				public String getVvm_cs () {
					return this.vvm_cs;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.act_id == null) ? 0 : this.act_id.hashCode());
					
						result = prime * result + ((this.mmat_id == null) ? 0 : this.mmat_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputVvmStruct other = (outputVvmStruct) obj;
		
						if (this.act_id == null) {
							if (other.act_id != null)
								return false;
						
						} else if (!this.act_id.equals(other.act_id))
						
							return false;
					
						if (this.mmat_id == null) {
							if (other.mmat_id != null)
								return false;
						
						} else if (!this.mmat_id.equals(other.mmat_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputVvmStruct other) {

		other.act_id = this.act_id;
	            other.mmat_id = this.mmat_id;
	            other.qty = this.qty;
	            other.vvm_cs = this.vvm_cs;
	            
	}

	public void copyKeysDataTo(outputVvmStruct other) {

		other.act_id = this.act_id;
	            	other.mmat_id = this.mmat_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
						this.mmat_id = (Object) dis.readObject();
					
			        this.qty = dis.readInt();
					
					this.vvm_cs = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// Object
				
       			    	dos.writeObject(this.mmat_id);
					
					// int
				
		            	dos.writeInt(this.qty);
					
					// String
				
						writeString(this.vvm_cs,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",mmat_id="+String.valueOf(mmat_id));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",vvm_cs="+vvm_cs);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputVvmStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.act_id, other.act_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.mmat_id, other.mmat_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public Integer qty;

				public Integer getQty () {
					return this.qty;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
						this.ent_id = (Object) dis.readObject();
					
						this.qty = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// Integer
				
						writeInteger(this.qty,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",qty="+String.valueOf(qty));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public Integer qty;

				public Integer getQty () {
					return this.qty;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
						this.ent_id = (Object) dis.readObject();
					
						this.qty = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// Integer
				
						writeInteger(this.qty,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",qty="+String.valueOf(qty));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_3Process(globalMap);
		tDBInput_16Process(globalMap);

		row13Struct row13 = new row13Struct();
outputVvmStruct outputVvm = new outputVvmStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputVvm" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = "act_list_mat_tbl";
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + "act_list_mat_tbl";
}

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"act_id\",\"mmat_id\",\"qty\",\"vvm_cs\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row13" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
					globalMap.get( "tHash_Lookup_row14" ))
					;					
					
	

row14Struct row14HashKey = new row14Struct();
row14Struct row14Default = new row14Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
					globalMap.get( "tHash_Lookup_row16" ))
					;					
					
	

row16Struct row16HashKey = new row16Struct();
row16Struct row16Default = new row16Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputVvmStruct outputVvm_tmp = new outputVvmStruct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
		        conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT  ACT_ID, ENT_ID, ABS(QTY) AS QTY\nFROM\n	ACT_PTCPT_PART_CONS_TBL\n	INNER JOIN ACT_TBL USING (ACT_ID)\nWHERE\n	AC"
+"T_TBL.CLS_CD_ID = 'b0323489-9a09-411a-bb55-ff283830ea1a'\n	AND ROL_CD_ID = 'a5cac7f7-e3b7-4dd8-872c-db0e7fcc2d84'\n	AND "
+"OBSLT_VRSN_SEQ_ID IS NULL";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row13.act_id = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(1) != null) {
                row13.act_id = rs_tDBInput_1.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row13.ent_id = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(2) != null) {
                row13.ent_id = rs_tDBInput_1.getObject(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row13.qty = null;
							} else {
		                          
            if(rs_tDBInput_1.getObject(3) != null) {
                row13.qty = rs_tDBInput_1.getInt(3);
            } else {
                    row13.qty = null;
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

			//row13
			//row13


			
				if(execStat){
					runStat.updateStatOnConnection("row13"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_14 = false;
		  boolean mainRowRejected_tMap_14 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row14" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow14 = false;
       		  	    	
       		  	    	
 							row14Struct row14ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_14) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_14 = false;
								
                        		    		row14HashKey.act_id = row13.act_id ;
                        		    		
                        		    		row14HashKey.matl = row13.ent_id ;
                        		    		

								
		                        	row14HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row14.lookup( row14HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							row14Struct row14 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row14Struct fromLookup_row14 = null;
							row14 = row14Default;
										 
							
								 
							
							
								if (tHash_Lookup_row14 !=null && tHash_Lookup_row14.hasNext()) { // G 099
								
							
								
								fromLookup_row14 = tHash_Lookup_row14.next();

							
							
								} // G 099
							
							

							if(fromLookup_row14 != null) {
								row14 = fromLookup_row14;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_14) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_14 = false;
								
                        		    		row16HashKey.act_id = row13.act_id ;
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row16.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_14 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row16 != null && tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.act_id = '" + row16HashKey.act_id + "'");
								} // G 071
							

							row16Struct row16 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								 
							
							
								if (tHash_Lookup_row16 !=null && tHash_Lookup_row16.hasNext()) { // G 099
								
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							
							
								} // G 099
							
							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
        // ###############################
        // # Output tables

outputVvm = null;

if(!rejectedInnerJoin_tMap_14 ) {

// # Output table : 'outputVvm'
outputVvm_tmp.act_id = row13.act_id ;
outputVvm_tmp.mmat_id = row13.ent_id ;
outputVvm_tmp.qty = row13.qty ;
outputVvm_tmp.vvm_cs = row14.vvm ;
outputVvm = outputVvm_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "outputVvm"
if(outputVvm != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//outputVvm
			//outputVvm


			
				if(execStat){
					runStat.updateStatOnConnection("outputVvm"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_1 = false;
                    if(outputVvm.act_id == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_1.setObject(1, outputVvm.act_id, java.sql.Types.OTHER);
}

                    if(outputVvm.mmat_id == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_1.setObject(2, outputVvm.mmat_id, java.sql.Types.OTHER);
}

                    pstmt_tDBOutput_1.setInt(3, outputVvm.qty);

                    if(outputVvm.vvm_cs == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, outputVvm.vvm_cs);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "outputVvm"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row14 != null) {
						tHash_Lookup_row14.endGet();
					}
					globalMap.remove( "tHash_Lookup_row14" );

					
					
				
					if(tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove( "tHash_Lookup_row16" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row13"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputVvm"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_14"
					     			globalMap.remove("tHash_Lookup_row14"); 
				     			
					     			//free memory for "tMap_14"
					     			globalMap.remove("tHash_Lookup_row16"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_2", false);
		start_Hash.put("tWarn_2", System.currentTimeMillis());
		
	
	currentComponent="tWarn_2";

	
		int tos_count_tWarn_2 = 0;
		

 



/**
 * [tWarn_2 begin ] stop
 */
	
	/**
	 * [tWarn_2 main ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread.currentThread().getId() + "", "INFO","","Starting Encounters","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_2", 3, "Starting Encounters", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_2_WARN_MESSAGES", "Starting Encounters"); 
	globalMap.put("tWarn_2_WARN_PRIORITY", 3);
	globalMap.put("tWarn_2_WARN_CODE", 42);
	
} catch (Exception e_tWarn_2) {
	logIgnoredError(String.format("tWarn_2 - tWarn failed to log message due to internal error: %s", e_tWarn_2), e_tWarn_2);
}


 


	tos_count_tWarn_2++;

/**
 * [tWarn_2 main ] stop
 */
	
	/**
	 * [tWarn_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 process_data_end ] stop
 */
	
	/**
	 * [tWarn_2 end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 

ok_Hash.put("tWarn_2", true);
end_Hash.put("tWarn_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tPostgresqlInput_3Process(globalMap);



/**
 * [tWarn_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_2 finally ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_2_SUBPROCESS_STATE", 1);
	}
	


public static class outputEncounterStruct implements routines.system.IPersistableRow<outputEncounterStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object enc_id;

				public Object getEnc_id () {
					return this.enc_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public Object pat_id;

				public Object getPat_id () {
					return this.pat_id;
				}
				
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public String discharge_cs;

				public String getDischarge_cs () {
					return this.discharge_cs;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.enc_id == null) ? 0 : this.enc_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputEncounterStruct other = (outputEncounterStruct) obj;
		
						if (this.enc_id == null) {
							if (other.enc_id != null)
								return false;
						
						} else if (!this.enc_id.equals(other.enc_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputEncounterStruct other) {

		other.enc_id = this.enc_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            other.start_utc = this.start_utc;
	            other.stop_utc = this.stop_utc;
	            other.act_utc = this.act_utc;
	            other.usr_id = this.usr_id;
	            other.pat_id = this.pat_id;
	            other.fac_id = this.fac_id;
	            other.discharge_cs = this.discharge_cs;
	            
	}

	public void copyKeysDataTo(outputEncounterStruct other) {

		other.enc_id = this.enc_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.enc_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
					this.act_utc = readDate(dis);
					
						this.usr_id = (Object) dis.readObject();
					
						this.pat_id = (Object) dis.readObject();
					
						this.fac_id = (Object) dis.readObject();
					
					this.discharge_cs = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.enc_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// Object
				
       			    	dos.writeObject(this.pat_id);
					
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// String
				
						writeString(this.discharge_cs,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("enc_id="+String.valueOf(enc_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",pat_id="+String.valueOf(pat_id));
		sb.append(",fac_id="+String.valueOf(fac_id));
		sb.append(",discharge_cs="+discharge_cs);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputEncounterStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.enc_id, other.enc_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public java.util.Date act_start_utc;

				public java.util.Date getAct_start_utc () {
					return this.act_start_utc;
				}
				
			    public java.util.Date act_stop_utc;

				public java.util.Date getAct_stop_utc () {
					return this.act_stop_utc;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public Object recordtarget_id;

				public Object getRecordtarget_id () {
					return this.recordtarget_id;
				}
				
			    public Object author_id;

				public Object getAuthor_id () {
					return this.author_id;
				}
				
			    public Object location_id;

				public Object getLocation_id () {
					return this.location_id;
				}
				
			    public String dsch_mnemonic;

				public String getDsch_mnemonic () {
					return this.dsch_mnemonic;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.act_start_utc = readDate(dis);
					
					this.act_stop_utc = readDate(dis);
					
					this.act_utc = readDate(dis);
					
						this.recordtarget_id = (Object) dis.readObject();
					
						this.author_id = (Object) dis.readObject();
					
						this.location_id = (Object) dis.readObject();
					
					this.dsch_mnemonic = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_stop_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.recordtarget_id);
					
					// Object
				
       			    	dos.writeObject(this.author_id);
					
					// Object
				
       			    	dos.writeObject(this.location_id);
					
					// String
				
						writeString(this.dsch_mnemonic,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",act_start_utc="+String.valueOf(act_start_utc));
		sb.append(",act_stop_utc="+String.valueOf(act_stop_utc));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",recordtarget_id="+String.valueOf(recordtarget_id));
		sb.append(",author_id="+String.valueOf(author_id));
		sb.append(",location_id="+String.valueOf(location_id));
		sb.append(",dsch_mnemonic="+dsch_mnemonic);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_3Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_3Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public java.util.Date act_start_utc;

				public java.util.Date getAct_start_utc () {
					return this.act_start_utc;
				}
				
			    public java.util.Date act_stop_utc;

				public java.util.Date getAct_stop_utc () {
					return this.act_stop_utc;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public Object recordtarget_id;

				public Object getRecordtarget_id () {
					return this.recordtarget_id;
				}
				
			    public Object author_id;

				public Object getAuthor_id () {
					return this.author_id;
				}
				
			    public Object location_id;

				public Object getLocation_id () {
					return this.location_id;
				}
				
			    public String dsch_mnemonic;

				public String getDsch_mnemonic () {
					return this.dsch_mnemonic;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.act_start_utc = readDate(dis);
					
					this.act_stop_utc = readDate(dis);
					
					this.act_utc = readDate(dis);
					
						this.recordtarget_id = (Object) dis.readObject();
					
						this.author_id = (Object) dis.readObject();
					
						this.location_id = (Object) dis.readObject();
					
					this.dsch_mnemonic = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_stop_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.recordtarget_id);
					
					// Object
				
       			    	dos.writeObject(this.author_id);
					
					// Object
				
       			    	dos.writeObject(this.location_id);
					
					// String
				
						writeString(this.dsch_mnemonic,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",act_start_utc="+String.valueOf(act_start_utc));
		sb.append(",act_stop_utc="+String.valueOf(act_stop_utc));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",recordtarget_id="+String.valueOf(recordtarget_id));
		sb.append(",author_id="+String.valueOf(author_id));
		sb.append(",location_id="+String.valueOf(location_id));
		sb.append(",dsch_mnemonic="+dsch_mnemonic);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_4Process(globalMap);

		row3Struct row3 = new row3Struct();
outputEncounterStruct outputEncounter = new outputEncounterStruct();





	
	/**
	 * [tPostgresqlOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_2", false);
		start_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputEncounter" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_2 = 0;
		





String dbschema_tPostgresqlOutput_2 = null;
	dbschema_tPostgresqlOutput_2 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_2 = null;
if(dbschema_tPostgresqlOutput_2 == null || dbschema_tPostgresqlOutput_2.trim().length() == 0) {
	tableName_tPostgresqlOutput_2 = "enc_tbl";
} else {
	tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2 + "\".\"" + "enc_tbl";
}

int nb_line_tPostgresqlOutput_2 = 0;
int nb_line_update_tPostgresqlOutput_2 = 0;
int nb_line_inserted_tPostgresqlOutput_2 = 0;
int nb_line_deleted_tPostgresqlOutput_2 = 0;
int nb_line_rejected_tPostgresqlOutput_2 = 0;

int deletedCount_tPostgresqlOutput_2=0;
int updatedCount_tPostgresqlOutput_2=0;
int insertedCount_tPostgresqlOutput_2=0;
int rejectedCount_tPostgresqlOutput_2=0;

boolean whetherReject_tPostgresqlOutput_2 = false;

java.sql.Connection conn_tPostgresqlOutput_2 = null;
String dbUser_tPostgresqlOutput_2 = null;

	conn_tPostgresqlOutput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_2 = 10000;
   int batchSizeCounter_tPostgresqlOutput_2=0;

int count_tPostgresqlOutput_2=0;
	    String insert_tPostgresqlOutput_2 = "INSERT INTO \"" + tableName_tPostgresqlOutput_2 + "\" (\"enc_id\",\"crt_etl_id\",\"upd_etl_id\",\"crt_utc\",\"upd_utc\",\"obslt_utc\",\"start_utc\",\"stop_utc\",\"act_utc\",\"usr_id\",\"pat_id\",\"fac_id\",\"discharge_cs\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.prepareStatement(insert_tPostgresqlOutput_2);
	    resourceMap.put("pstmt_tPostgresqlOutput_2", pstmt_tPostgresqlOutput_2);
	    

 



/**
 * [tPostgresqlOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	
		tHash_Lookup_row4.initGet();
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputEncounterStruct outputEncounter_tmp = new outputEncounterStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_3", false);
		start_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_3";

	
		int tos_count_tPostgresqlInput_3 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_3 = 0;
		    java.sql.Connection conn_tPostgresqlInput_3 = null;
		        conn_tPostgresqlInput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3.createStatement();
                stmt_tPostgresqlInput_3.setFetchSize(1000);

		    String dbquery_tPostgresqlInput_3 = "SELECT act_tbl.act_id,\n	act_vrsn_tbl.crt_utc,\n	act_vrsn_tbl.obslt_utc,\n	act_vrsn_tbl.act_start_utc,\n	act_vrsn_tbl.a"
+"ct_stop_utc,\n	act_vrsn_tbl.act_utc,\n	RecordTarget.ent_id AS RecordTarget_Id, \n	Author.ent_id AS Author_Id, \n	Locatio"
+"n.ent_id AS Location_Id,\n	cd_vrsn_tbl.mnemonic as dsch_mnemonic\n	FROM \n	pat_enc_tbl \n	NATURAL INNER JOIN act_vrsn_tb"
+"l\n	INNER JOIN act_tbl ON (act_tbl.act_id = act_vrsn_tbl.act_id AND act_tbl.cls_cd_id = '54b52119-1709-4098-8911-5df6d6c"
+"84140')\n	INNER JOIN act_ptcpt_tbl AS RecordTarget ON (RecordTarget.act_id = act_tbl.act_id AND RecordTarget.rol_cd_id ="
+" '3f92dbee-a65e-434f-98ce-841feeb02e3f' AND RecordTarget.obslt_vrsn_seq_id IS NULL)\n	LEFT JOIN act_ptcpt_tbl AS Author "
+"ON (Author.act_id = act_tbl.act_id AND Author.rol_cd_id = 'f0cb3faf-435d-4704-9217-b884f757bc14' AND Author.obslt_vrsn_s"
+"eq_id IS NULL)\n	LEFT JOIN act_ptcpt_tbl AS Location ON (Location.act_id = act_tbl.act_id AND Location.rol_cd_id = '6184"
+"8557-d78d-40e5-954f-0b9c97307a04' AND Location.obslt_vrsn_seq_id IS NULL)\n	LEFT JOIN cd_vrsn_tbl ON (pat_enc_tbl.dsch_d"
+"sp_cd_id = cd_vrsn_tbl.cd_id and cd_vrsn_tbl.obslt_utc is null)\n	WHERE act_vrsn_tbl.STS_CD_ID = 'afc33800-8225-4061-b16"
+"8-bacc09cdbae3'\n	AND act_vrsn_tbl.obslt_utc is null ";
			

            	globalMap.put("tPostgresqlInput_3_QUERY",dbquery_tPostgresqlInput_3);
		    java.sql.ResultSet rs_tPostgresqlInput_3 = null;

		    try {
		    	rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3.executeQuery(dbquery_tPostgresqlInput_3);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3.getColumnCount();

		    String tmpContent_tPostgresqlInput_3 = null;
		    
		    
		    while (rs_tPostgresqlInput_3.next()) {
		        nb_line_tPostgresqlInput_3++;
		        
							if(colQtyInRs_tPostgresqlInput_3 < 1) {
								row3.act_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(1) != null) {
                row3.act_id = rs_tPostgresqlInput_3.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 2) {
								row3.crt_utc = null;
							} else {
										
			row3.crt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_3, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 3) {
								row3.obslt_utc = null;
							} else {
										
			row3.obslt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_3, 3);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 4) {
								row3.act_start_utc = null;
							} else {
										
			row3.act_start_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_3, 4);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 5) {
								row3.act_stop_utc = null;
							} else {
										
			row3.act_stop_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_3, 5);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 6) {
								row3.act_utc = null;
							} else {
										
			row3.act_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_3, 6);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 7) {
								row3.recordtarget_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(7) != null) {
                row3.recordtarget_id = rs_tPostgresqlInput_3.getObject(7);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 8) {
								row3.author_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(8) != null) {
                row3.author_id = rs_tPostgresqlInput_3.getObject(8);
            } else {
                    row3.author_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 9) {
								row3.location_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(9) != null) {
                row3.location_id = rs_tPostgresqlInput_3.getObject(9);
            } else {
                    row3.location_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 10) {
								row3.dsch_mnemonic = null;
							} else {
	                         		
        	row3.dsch_mnemonic = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 10, false);
		                    }
					


 



/**
 * [tPostgresqlInput_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 


	tos_count_tPostgresqlInput_3++;

/**
 * [tPostgresqlInput_3 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow4 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow4 = true;
			           		  	} // G 21
                    		  	
                    		

							row4Struct row4 = null;
                    		  	 
							

								while ((tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) || forceLooprow4) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row4'
									
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								
								if(!forceLooprow4) { // G 46
								
							
								 
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow4 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

outputEncounter = null;


// # Output table : 'outputEncounter'
outputEncounter_tmp.enc_id = row3.act_id ;
outputEncounter_tmp.crt_etl_id = row4.etl_id ;
outputEncounter_tmp.upd_etl_id = null;
outputEncounter_tmp.crt_utc = row3.crt_utc;
outputEncounter_tmp.upd_utc = null;
outputEncounter_tmp.obslt_utc = row3.obslt_utc;
outputEncounter_tmp.start_utc = row3.act_start_utc ;
outputEncounter_tmp.stop_utc = row3.act_stop_utc ;
outputEncounter_tmp.act_utc = row3.act_utc;
outputEncounter_tmp.usr_id = row3.author_id ;
outputEncounter_tmp.pat_id = row3.recordtarget_id ;
outputEncounter_tmp.fac_id = row3.location_id ;
outputEncounter_tmp.discharge_cs = row3.dsch_mnemonic ;
outputEncounter = outputEncounter_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "outputEncounter"
if(outputEncounter != null) { 



	
	/**
	 * [tPostgresqlOutput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

			//outputEncounter
			//outputEncounter


			
				if(execStat){
					runStat.updateStatOnConnection("outputEncounter"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_2 = false;
                    if(outputEncounter.enc_id == null) {
pstmt_tPostgresqlOutput_2.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_2.setObject(1, outputEncounter.enc_id, java.sql.Types.OTHER);
}

                    if(outputEncounter.crt_etl_id == null) {
pstmt_tPostgresqlOutput_2.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_2.setObject(2, outputEncounter.crt_etl_id, java.sql.Types.OTHER);
}

                    if(outputEncounter.upd_etl_id == null) {
pstmt_tPostgresqlOutput_2.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_2.setObject(3, outputEncounter.upd_etl_id, java.sql.Types.OTHER);
}

                    if(outputEncounter.crt_utc != null) {
pstmt_tPostgresqlOutput_2.setTimestamp(4, new java.sql.Timestamp(outputEncounter.crt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_2.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(outputEncounter.upd_utc != null) {
pstmt_tPostgresqlOutput_2.setTimestamp(5, new java.sql.Timestamp(outputEncounter.upd_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_2.setNull(5, java.sql.Types.TIMESTAMP);
}

                    if(outputEncounter.obslt_utc != null) {
pstmt_tPostgresqlOutput_2.setTimestamp(6, new java.sql.Timestamp(outputEncounter.obslt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_2.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(outputEncounter.start_utc != null) {
pstmt_tPostgresqlOutput_2.setTimestamp(7, new java.sql.Timestamp(outputEncounter.start_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_2.setNull(7, java.sql.Types.TIMESTAMP);
}

                    if(outputEncounter.stop_utc != null) {
pstmt_tPostgresqlOutput_2.setTimestamp(8, new java.sql.Timestamp(outputEncounter.stop_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_2.setNull(8, java.sql.Types.TIMESTAMP);
}

                    if(outputEncounter.act_utc != null) {
pstmt_tPostgresqlOutput_2.setTimestamp(9, new java.sql.Timestamp(outputEncounter.act_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_2.setNull(9, java.sql.Types.TIMESTAMP);
}

                    if(outputEncounter.usr_id == null) {
pstmt_tPostgresqlOutput_2.setNull(10, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_2.setObject(10, outputEncounter.usr_id, java.sql.Types.OTHER);
}

                    if(outputEncounter.pat_id == null) {
pstmt_tPostgresqlOutput_2.setNull(11, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_2.setObject(11, outputEncounter.pat_id, java.sql.Types.OTHER);
}

                    if(outputEncounter.fac_id == null) {
pstmt_tPostgresqlOutput_2.setNull(12, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_2.setObject(12, outputEncounter.fac_id, java.sql.Types.OTHER);
}

                    if(outputEncounter.discharge_cs == null) {
pstmt_tPostgresqlOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_2.setString(13, outputEncounter.discharge_cs);
}

			
    		pstmt_tPostgresqlOutput_2.addBatch();
    		nb_line_tPostgresqlOutput_2++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_2++;
    		  
            if(!whetherReject_tPostgresqlOutput_2) {
            }
    			if ((batchSize_tPostgresqlOutput_2 > 0) && (batchSize_tPostgresqlOutput_2 <= batchSizeCounter_tPostgresqlOutput_2)) {
                try {
						int countSum_tPostgresqlOutput_2 = 0;
						    
						for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
				    	
				    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_2){
				    	java.sql.SQLException ne_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getNextException(),sqle_tPostgresqlOutput_2=null;
				    	String errormessage_tPostgresqlOutput_2;
						if (ne_tPostgresqlOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_2 = new java.sql.SQLException(e_tPostgresqlOutput_2.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_2.getMessage(), ne_tPostgresqlOutput_2.getSQLState(), ne_tPostgresqlOutput_2.getErrorCode(), ne_tPostgresqlOutput_2);
							errormessage_tPostgresqlOutput_2 = sqle_tPostgresqlOutput_2.getMessage();
						}else{
							errormessage_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_2 = 0;
						for(int countEach_tPostgresqlOutput_2: e_tPostgresqlOutput_2.getUpdateCounts()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
						
				    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_2);
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_2++;

/**
 * [tPostgresqlOutput_2 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

 



/**
 * [tPostgresqlOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

 



/**
 * [tPostgresqlOutput_2 process_data_end ] stop
 */

} // End of branch "outputEncounter"



	
		} // close loop of lookup 'row4' // G_TM_M_043
	
	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

	}
}finally{
	if (rs_tPostgresqlInput_3 != null) {
		rs_tPostgresqlInput_3.close();
	}
	if (stmt_tPostgresqlInput_3 != null) {
		stmt_tPostgresqlInput_3.close();
	}
}
globalMap.put("tPostgresqlInput_3_NB_LINE",nb_line_tPostgresqlInput_3);
 

ok_Hash.put("tPostgresqlInput_3", true);
end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());




/**
 * [tPostgresqlInput_3 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



	    try {
				int countSum_tPostgresqlOutput_2 = 0;
				if (pstmt_tPostgresqlOutput_2 != null && batchSizeCounter_tPostgresqlOutput_2 > 0) {
						
					for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
						countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_2){
	    	java.sql.SQLException ne_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getNextException(),sqle_tPostgresqlOutput_2=null;
	    	String errormessage_tPostgresqlOutput_2;
			if (ne_tPostgresqlOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_2 = new java.sql.SQLException(e_tPostgresqlOutput_2.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_2.getMessage(), ne_tPostgresqlOutput_2.getSQLState(), ne_tPostgresqlOutput_2.getErrorCode(), ne_tPostgresqlOutput_2);
				errormessage_tPostgresqlOutput_2 = sqle_tPostgresqlOutput_2.getMessage();
			}else{
				errormessage_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_2 = 0;
			for(int countEach_tPostgresqlOutput_2: e_tPostgresqlOutput_2.getUpdateCounts()) {
				countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
			}
			
	    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_2);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_2 != null) {
        		
            pstmt_tPostgresqlOutput_2.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_2");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_2", true);

	nb_line_deleted_tPostgresqlOutput_2=nb_line_deleted_tPostgresqlOutput_2+ deletedCount_tPostgresqlOutput_2;
	nb_line_update_tPostgresqlOutput_2=nb_line_update_tPostgresqlOutput_2 + updatedCount_tPostgresqlOutput_2;
	nb_line_inserted_tPostgresqlOutput_2=nb_line_inserted_tPostgresqlOutput_2 + insertedCount_tPostgresqlOutput_2;
	nb_line_rejected_tPostgresqlOutput_2=nb_line_rejected_tPostgresqlOutput_2 + rejectedCount_tPostgresqlOutput_2;
	
        globalMap.put("tPostgresqlOutput_2_NB_LINE",nb_line_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_2);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputEncounter"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_2", true);
end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tWarn_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
				try{
					
	
	/**
	 * [tPostgresqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_2 = null;
                if ((pstmtToClose_tPostgresqlOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_2")) != null) {
                    pstmtToClose_tPostgresqlOutput_2.close();
                }
    }
 



/**
 * [tPostgresqlOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_4", false);
		start_Hash.put("tWarn_4", System.currentTimeMillis());
		
	
	currentComponent="tWarn_4";

	
		int tos_count_tWarn_4 = 0;
		

 



/**
 * [tWarn_4 begin ] stop
 */
	
	/**
	 * [tWarn_4 main ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_4", "", Thread.currentThread().getId() + "", "INFO","","Starting Substance Administrations","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_4", 3, "Starting Substance Administrations", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_4_WARN_MESSAGES", "Starting Substance Administrations"); 
	globalMap.put("tWarn_4_WARN_PRIORITY", 3);
	globalMap.put("tWarn_4_WARN_CODE", 42);
	
} catch (Exception e_tWarn_4) {
	logIgnoredError(String.format("tWarn_4 - tWarn failed to log message due to internal error: %s", e_tWarn_4), e_tWarn_4);
}


 


	tos_count_tWarn_4++;

/**
 * [tWarn_4 main ] stop
 */
	
	/**
	 * [tWarn_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 process_data_end ] stop
 */
	
	/**
	 * [tWarn_4 end ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 

ok_Hash.put("tWarn_4", true);
end_Hash.put("tWarn_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tPostgresqlInput_1Process(globalMap);



/**
 * [tWarn_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_4 finally ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_4_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public Object enc_id;

				public Object getEnc_id () {
					return this.enc_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public java.util.Date prop_utc;

				public java.util.Date getProp_utc () {
					return this.prop_utc;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public boolean neg_ind;

				public boolean getNeg_ind () {
					return this.neg_ind;
				}
				
			    public String rsn_mnemonic;

				public String getRsn_mnemonic () {
					return this.rsn_mnemonic;
				}
				
			    public Integer seq_id;

				public Integer getSeq_id () {
					return this.seq_id;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public Object mat_id;

				public Object getMat_id () {
					return this.mat_id;
				}
				
			    public Object mmat_id;

				public Object getMmat_id () {
					return this.mmat_id;
				}
				
			    public String site_mnemonic;

				public String getSite_mnemonic () {
					return this.site_mnemonic;
				}
				
			    public String type_mnemonic;

				public String getType_mnemonic () {
					return this.type_mnemonic;
				}
				
			    public String rout_mnemonic;

				public String getRout_mnemonic () {
					return this.rout_mnemonic;
				}
				
			    public Object pat_id;

				public Object getPat_id () {
					return this.pat_id;
				}
				
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.act_id == null) ? 0 : this.act_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.act_id == null) {
							if (other.act_id != null)
								return false;
						
						} else if (!this.act_id.equals(other.act_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.act_id = this.act_id;
	            other.enc_id = this.enc_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            other.prop_utc = this.prop_utc;
	            other.act_utc = this.act_utc;
	            other.neg_ind = this.neg_ind;
	            other.rsn_mnemonic = this.rsn_mnemonic;
	            other.seq_id = this.seq_id;
	            other.usr_id = this.usr_id;
	            other.mat_id = this.mat_id;
	            other.mmat_id = this.mmat_id;
	            other.site_mnemonic = this.site_mnemonic;
	            other.type_mnemonic = this.type_mnemonic;
	            other.rout_mnemonic = this.rout_mnemonic;
	            other.pat_id = this.pat_id;
	            other.fac_id = this.fac_id;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.act_id = this.act_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
						this.enc_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.prop_utc = readDate(dis);
					
					this.act_utc = readDate(dis);
					
			        this.neg_ind = dis.readBoolean();
					
					this.rsn_mnemonic = readString(dis);
					
						this.seq_id = readInteger(dis);
					
						this.usr_id = (Object) dis.readObject();
					
						this.mat_id = (Object) dis.readObject();
					
						this.mmat_id = (Object) dis.readObject();
					
					this.site_mnemonic = readString(dis);
					
					this.type_mnemonic = readString(dis);
					
					this.rout_mnemonic = readString(dis);
					
						this.pat_id = (Object) dis.readObject();
					
						this.fac_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// Object
				
       			    	dos.writeObject(this.enc_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.prop_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.neg_ind);
					
					// String
				
						writeString(this.rsn_mnemonic,dos);
					
					// Integer
				
						writeInteger(this.seq_id,dos);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// Object
				
       			    	dos.writeObject(this.mat_id);
					
					// Object
				
       			    	dos.writeObject(this.mmat_id);
					
					// String
				
						writeString(this.site_mnemonic,dos);
					
					// String
				
						writeString(this.type_mnemonic,dos);
					
					// String
				
						writeString(this.rout_mnemonic,dos);
					
					// Object
				
       			    	dos.writeObject(this.pat_id);
					
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",enc_id="+String.valueOf(enc_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",prop_utc="+String.valueOf(prop_utc));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",neg_ind="+String.valueOf(neg_ind));
		sb.append(",rsn_mnemonic="+rsn_mnemonic);
		sb.append(",seq_id="+String.valueOf(seq_id));
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",mat_id="+String.valueOf(mat_id));
		sb.append(",mmat_id="+String.valueOf(mmat_id));
		sb.append(",site_mnemonic="+site_mnemonic);
		sb.append(",type_mnemonic="+type_mnemonic);
		sb.append(",rout_mnemonic="+rout_mnemonic);
		sb.append(",pat_id="+String.valueOf(pat_id));
		sb.append(",fac_id="+String.valueOf(fac_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.act_id, other.act_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outputSbadmStruct implements routines.system.IPersistableRow<outputSbadmStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public Object enc_id;

				public Object getEnc_id () {
					return this.enc_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public java.util.Date prop_utc;

				public java.util.Date getProp_utc () {
					return this.prop_utc;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public boolean neg_ind;

				public boolean getNeg_ind () {
					return this.neg_ind;
				}
				
			    public String rsn_mnemonic;

				public String getRsn_mnemonic () {
					return this.rsn_mnemonic;
				}
				
			    public Integer seq_id;

				public Integer getSeq_id () {
					return this.seq_id;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public Object mat_id;

				public Object getMat_id () {
					return this.mat_id;
				}
				
			    public Object mmat_id;

				public Object getMmat_id () {
					return this.mmat_id;
				}
				
			    public String site_mnemonic;

				public String getSite_mnemonic () {
					return this.site_mnemonic;
				}
				
			    public String type_mnemonic;

				public String getType_mnemonic () {
					return this.type_mnemonic;
				}
				
			    public String rout_mnemonic;

				public String getRout_mnemonic () {
					return this.rout_mnemonic;
				}
				
			    public Object pat_id;

				public Object getPat_id () {
					return this.pat_id;
				}
				
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.act_id == null) ? 0 : this.act_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputSbadmStruct other = (outputSbadmStruct) obj;
		
						if (this.act_id == null) {
							if (other.act_id != null)
								return false;
						
						} else if (!this.act_id.equals(other.act_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputSbadmStruct other) {

		other.act_id = this.act_id;
	            other.enc_id = this.enc_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            other.prop_utc = this.prop_utc;
	            other.act_utc = this.act_utc;
	            other.neg_ind = this.neg_ind;
	            other.rsn_mnemonic = this.rsn_mnemonic;
	            other.seq_id = this.seq_id;
	            other.usr_id = this.usr_id;
	            other.mat_id = this.mat_id;
	            other.mmat_id = this.mmat_id;
	            other.site_mnemonic = this.site_mnemonic;
	            other.type_mnemonic = this.type_mnemonic;
	            other.rout_mnemonic = this.rout_mnemonic;
	            other.pat_id = this.pat_id;
	            other.fac_id = this.fac_id;
	            
	}

	public void copyKeysDataTo(outputSbadmStruct other) {

		other.act_id = this.act_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
						this.enc_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.prop_utc = readDate(dis);
					
					this.act_utc = readDate(dis);
					
			        this.neg_ind = dis.readBoolean();
					
					this.rsn_mnemonic = readString(dis);
					
						this.seq_id = readInteger(dis);
					
						this.usr_id = (Object) dis.readObject();
					
						this.mat_id = (Object) dis.readObject();
					
						this.mmat_id = (Object) dis.readObject();
					
					this.site_mnemonic = readString(dis);
					
					this.type_mnemonic = readString(dis);
					
					this.rout_mnemonic = readString(dis);
					
						this.pat_id = (Object) dis.readObject();
					
						this.fac_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// Object
				
       			    	dos.writeObject(this.enc_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.prop_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.neg_ind);
					
					// String
				
						writeString(this.rsn_mnemonic,dos);
					
					// Integer
				
						writeInteger(this.seq_id,dos);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// Object
				
       			    	dos.writeObject(this.mat_id);
					
					// Object
				
       			    	dos.writeObject(this.mmat_id);
					
					// String
				
						writeString(this.site_mnemonic,dos);
					
					// String
				
						writeString(this.type_mnemonic,dos);
					
					// String
				
						writeString(this.rout_mnemonic,dos);
					
					// Object
				
       			    	dos.writeObject(this.pat_id);
					
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",enc_id="+String.valueOf(enc_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",prop_utc="+String.valueOf(prop_utc));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",neg_ind="+String.valueOf(neg_ind));
		sb.append(",rsn_mnemonic="+rsn_mnemonic);
		sb.append(",seq_id="+String.valueOf(seq_id));
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",mat_id="+String.valueOf(mat_id));
		sb.append(",mmat_id="+String.valueOf(mmat_id));
		sb.append(",site_mnemonic="+site_mnemonic);
		sb.append(",type_mnemonic="+type_mnemonic);
		sb.append(",rout_mnemonic="+rout_mnemonic);
		sb.append(",pat_id="+String.valueOf(pat_id));
		sb.append(",fac_id="+String.valueOf(fac_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputSbadmStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.act_id, other.act_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public Boolean neg_ind;

				public Boolean getNeg_ind () {
					return this.neg_ind;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Integer seq_id;

				public Integer getSeq_id () {
					return this.seq_id;
				}
				
			    public String site_cs;

				public String getSite_cs () {
					return this.site_cs;
				}
				
			    public String route_cs;

				public String getRoute_cs () {
					return this.route_cs;
				}
				
			    public String type_cs;

				public String getType_cs () {
					return this.type_cs;
				}
				
			    public String reason_cs;

				public String getReason_cs () {
					return this.reason_cs;
				}
				
			    public Object recordtarget_id;

				public Object getRecordtarget_id () {
					return this.recordtarget_id;
				}
				
			    public Object author_id;

				public Object getAuthor_id () {
					return this.author_id;
				}
				
			    public Object product_id;

				public Object getProduct_id () {
					return this.product_id;
				}
				
			    public Object location_id;

				public Object getLocation_id () {
					return this.location_id;
				}
				
			    public Object consumable_id;

				public Object getConsumable_id () {
					return this.consumable_id;
				}
				
			    public Object encounter_id;

				public Object getEncounter_id () {
					return this.encounter_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.act_utc = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.neg_ind = null;
           				} else {
           			    	this.neg_ind = dis.readBoolean();
           				}
					
					this.crt_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
						this.seq_id = readInteger(dis);
					
					this.site_cs = readString(dis);
					
					this.route_cs = readString(dis);
					
					this.type_cs = readString(dis);
					
					this.reason_cs = readString(dis);
					
						this.recordtarget_id = (Object) dis.readObject();
					
						this.author_id = (Object) dis.readObject();
					
						this.product_id = (Object) dis.readObject();
					
						this.location_id = (Object) dis.readObject();
					
						this.consumable_id = (Object) dis.readObject();
					
						this.encounter_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// Boolean
				
						if(this.neg_ind == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.neg_ind);
		            	}
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Integer
				
						writeInteger(this.seq_id,dos);
					
					// String
				
						writeString(this.site_cs,dos);
					
					// String
				
						writeString(this.route_cs,dos);
					
					// String
				
						writeString(this.type_cs,dos);
					
					// String
				
						writeString(this.reason_cs,dos);
					
					// Object
				
       			    	dos.writeObject(this.recordtarget_id);
					
					// Object
				
       			    	dos.writeObject(this.author_id);
					
					// Object
				
       			    	dos.writeObject(this.product_id);
					
					// Object
				
       			    	dos.writeObject(this.location_id);
					
					// Object
				
       			    	dos.writeObject(this.consumable_id);
					
					// Object
				
       			    	dos.writeObject(this.encounter_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",neg_ind="+String.valueOf(neg_ind));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",seq_id="+String.valueOf(seq_id));
		sb.append(",site_cs="+site_cs);
		sb.append(",route_cs="+route_cs);
		sb.append(",type_cs="+type_cs);
		sb.append(",reason_cs="+reason_cs);
		sb.append(",recordtarget_id="+String.valueOf(recordtarget_id));
		sb.append(",author_id="+String.valueOf(author_id));
		sb.append(",product_id="+String.valueOf(product_id));
		sb.append(",location_id="+String.valueOf(location_id));
		sb.append(",consumable_id="+String.valueOf(consumable_id));
		sb.append(",encounter_id="+String.valueOf(encounter_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_1Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_1Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public Boolean neg_ind;

				public Boolean getNeg_ind () {
					return this.neg_ind;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Integer seq_id;

				public Integer getSeq_id () {
					return this.seq_id;
				}
				
			    public String site_cs;

				public String getSite_cs () {
					return this.site_cs;
				}
				
			    public String route_cs;

				public String getRoute_cs () {
					return this.route_cs;
				}
				
			    public String type_cs;

				public String getType_cs () {
					return this.type_cs;
				}
				
			    public String reason_cs;

				public String getReason_cs () {
					return this.reason_cs;
				}
				
			    public Object recordtarget_id;

				public Object getRecordtarget_id () {
					return this.recordtarget_id;
				}
				
			    public Object author_id;

				public Object getAuthor_id () {
					return this.author_id;
				}
				
			    public Object product_id;

				public Object getProduct_id () {
					return this.product_id;
				}
				
			    public Object location_id;

				public Object getLocation_id () {
					return this.location_id;
				}
				
			    public Object consumable_id;

				public Object getConsumable_id () {
					return this.consumable_id;
				}
				
			    public Object encounter_id;

				public Object getEncounter_id () {
					return this.encounter_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.act_utc = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.neg_ind = null;
           				} else {
           			    	this.neg_ind = dis.readBoolean();
           				}
					
					this.crt_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
						this.seq_id = readInteger(dis);
					
					this.site_cs = readString(dis);
					
					this.route_cs = readString(dis);
					
					this.type_cs = readString(dis);
					
					this.reason_cs = readString(dis);
					
						this.recordtarget_id = (Object) dis.readObject();
					
						this.author_id = (Object) dis.readObject();
					
						this.product_id = (Object) dis.readObject();
					
						this.location_id = (Object) dis.readObject();
					
						this.consumable_id = (Object) dis.readObject();
					
						this.encounter_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// Boolean
				
						if(this.neg_ind == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.neg_ind);
		            	}
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Integer
				
						writeInteger(this.seq_id,dos);
					
					// String
				
						writeString(this.site_cs,dos);
					
					// String
				
						writeString(this.route_cs,dos);
					
					// String
				
						writeString(this.type_cs,dos);
					
					// String
				
						writeString(this.reason_cs,dos);
					
					// Object
				
       			    	dos.writeObject(this.recordtarget_id);
					
					// Object
				
       			    	dos.writeObject(this.author_id);
					
					// Object
				
       			    	dos.writeObject(this.product_id);
					
					// Object
				
       			    	dos.writeObject(this.location_id);
					
					// Object
				
       			    	dos.writeObject(this.consumable_id);
					
					// Object
				
       			    	dos.writeObject(this.encounter_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",neg_ind="+String.valueOf(neg_ind));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",seq_id="+String.valueOf(seq_id));
		sb.append(",site_cs="+site_cs);
		sb.append(",route_cs="+route_cs);
		sb.append(",type_cs="+type_cs);
		sb.append(",reason_cs="+reason_cs);
		sb.append(",recordtarget_id="+String.valueOf(recordtarget_id));
		sb.append(",author_id="+String.valueOf(author_id));
		sb.append(",product_id="+String.valueOf(product_id));
		sb.append(",location_id="+String.valueOf(location_id));
		sb.append(",consumable_id="+String.valueOf(consumable_id));
		sb.append(",encounter_id="+String.valueOf(encounter_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_2Process(globalMap);

		row1Struct row1 = new row1Struct();
outputSbadmStruct outputSbadm = new outputSbadmStruct();
row9Struct row9 = new row9Struct();






	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "sbadm_tbl";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "sbadm_tbl";
}

int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	conn_tPostgresqlOutput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_1 = 10000;
   int batchSizeCounter_tPostgresqlOutput_1=0;

int count_tPostgresqlOutput_1=0;
	    String insert_tPostgresqlOutput_1 = "INSERT INTO \"" + tableName_tPostgresqlOutput_1 + "\" (\"act_id\",\"enc_id\",\"crt_etl_id\",\"upd_etl_id\",\"crt_utc\",\"upd_utc\",\"obslt_utc\",\"prop_utc\",\"act_utc\",\"neg_ind\",\"rsn_mnemonic\",\"seq_id\",\"usr_id\",\"mat_id\",\"mmat_id\",\"site_mnemonic\",\"type_mnemonic\",\"rout_mnemonic\",\"pat_id\",\"fac_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(insert_tPostgresqlOutput_1);
	    resourceMap.put("pstmt_tPostgresqlOutput_1", pstmt_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputSbadm" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					Object act_id;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.act_id == null) ? 0 : this.act_id.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.act_id == null) {
										if (other.act_id != null) 
											return false;
								
									} else if (!this.act_id.equals(other.act_id))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	
		tHash_Lookup_row2.initGet();
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputSbadmStruct outputSbadm_tmp = new outputSbadmStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
		        conn_tPostgresqlInput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();
                stmt_tPostgresqlInput_1.setFetchSize(1000);

		    String dbquery_tPostgresqlInput_1 = "WITH cons AS (\n	SELECT act_id, ent_id\n	FROM act_ptcpt_part_cons_tbl\n	WHERE rol_cd_id = 'a5cac7f7-e3b7-4dd8-872c-db0e"
+"7fcc2d84'\n	AND obslt_vrsn_seq_id IS NULL\n	AND ent_id IN (SELECT ent_id FROM ent_vrsn_tbl inner join cd_vrsn_tbl on (cd"
+"_id = typ_cd_id) where (mnemonic ilike 'vaccinetype%' or mnemonic ilike 'supplement%') and ent_vrsn_tbl.obslt_utc is nul"
+"l)\n	ORDER BY ptcpt_seq_id\n)\nSELECT   \n  act_tbl.act_id, \n  (act_vrsn_tbl.act_utc) as act_utc, \n  (act_vrsn_tbl.neg"
+"_ind) as neg_ind, \n  (act_vrsn_tbl.crt_utc) as crt_utc, \n  (act_vrsn_tbl.obslt_utc) as obslt_utc, \n  (sub_adm_tbl.seq"
+"_id) as seq_id, \n  (sit_cs.mnemonic) as site_cs, \n  (rte_cs.mnemonic) as route_cs, \n  (typ_cs.mnemonic) as type_cs, "
+"\n  (rsn_cs.mnemonic) as reason_cs, \n  (RecordTarget.ent_id) AS RecordTarget_Id, \n  (Author.ent_id) AS Author_Id, \n  ("
+"Product.ent_id) AS Product_Id, \n  (Location.ent_id) AS Location_Id,\n  (Consumable.ent_id) AS Consumable_Id, \n  (Encou"
+"nter.src_act_id) AS Encounter_Id \n  FROM \n  sub_adm_tbl \n  INNER JOIN act_vrsn_tbl ON (sub_adm_tbl.act_vrsn_id = act_"
+"vrsn_tbl.act_vrsn_id AND act_vrsn_tbl.obslt_utc IS NULL AND typ_cd_id IN ('0331e13f-f471-4fbd-92dc-66e0a46239d5','7d84a0"
+"57-1fcc-4054-a51f-b77d230fc6d1','6e7a3521-2967-4c0a-80ec-6c5c197b2178','f3be6b88-bc8f-4263-a779-86f21ea10a47'))\n  INNER"
+" JOIN act_tbl AS act_tbl ON (act_tbl.act_id = act_vrsn_tbl.act_id  AND act_tbl.cls_cd_id = '932a3c7e-ad77-450a-8a1f-030f"
+"c2855450')\n  INNER JOIN act_ptcpt_part_rct_tbl as RecordTarget ON (RecordTarget.act_id = act_tbl.act_id AND RecordTarge"
+"t.obslt_vrsn_seq_id IS NULL)\n  LEFT JOIN act_ptcpt_part_auth_tbl as Author ON (Author.act_id = act_tbl.act_id AND Autho"
+"r.rol_cd_id = 'f0cb3faf-435d-4704-9217-b884f757bc14' AND Author.obslt_vrsn_seq_id IS NULL)\n  INNER JOIN act_ptcpt_part_"
+"cons_tbl as Product ON (Product.act_id = act_tbl.act_id AND Product.rol_cd_id = '99e77288-cb09-4050-a8cf-385513f32f0a' A"
+"ND Product.obslt_vrsn_seq_id IS NULL)\n  LEFT JOIN act_ptcpt_part_loc_tbl as Location ON (Location.act_id = act_tbl.act_"
+"id AND Location.rol_cd_id = '61848557-d78d-40e5-954f-0b9c97307a04' AND Location.obslt_vrsn_seq_id IS NULL)\n  LEFT JOIN "
+"cons as Consumable ON (Consumable.act_id = act_tbl.act_id)\n  LEFT JOIN act_rel_tbl Encounter ON (Encounter.trg_act_id ="
+" act_tbl.act_id AND Encounter.rel_typ_cd_id = '78b9540f-438b-4b6f-8d83-aaf4979dbc64' AND Encounter.obslt_vrsn_seq_id IS "
+"NULL)\n  LEFT JOIN cd_vrsn_tbl AS sit_cs ON (sub_adm_tbl.ste_cd_id = sit_cs.cd_id and sit_cs.obslt_utc is null)\n  LEFT "
+"JOIN cd_vrsn_tbl AS rte_cs ON (sub_adm_tbl.rte_cd_id = rte_cs.cd_id and rte_cs.obslt_utc is null)\n  LEFT JOIN cd_vrsn_t"
+"bl AS typ_cs ON (act_vrsn_tbl.typ_cd_id = typ_cs.cd_id and typ_cs.obslt_utc is null)\n  LEFT JOIN cd_vrsn_tbl AS rsn_cs "
+"ON (act_vrsn_tbl.rsn_cd_id = rsn_cs.cd_id  and rsn_cs.obslt_utc is null)\n  WHERE  \n  act_vrsn_tbl.STS_CD_ID = 'afc3380"
+"0-8225-4061-b168-bacc09cdbae3'\n  AND act_vrsn_tbl.obslt_utc IS NULL\n --GROUP BY act_tbl.act_id\n";
			

            	globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);
		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;

		    try {
		    	rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								row1.act_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(1) != null) {
                row1.act_id = rs_tPostgresqlInput_1.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								row1.act_utc = null;
							} else {
										
			row1.act_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 3) {
								row1.neg_ind = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_1.getObject(3) != null) {
                row1.neg_ind = rs_tPostgresqlInput_1.getBoolean(3);
            } else {
                    row1.neg_ind = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 4) {
								row1.crt_utc = null;
							} else {
										
			row1.crt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 4);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 5) {
								row1.obslt_utc = null;
							} else {
										
			row1.obslt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 5);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 6) {
								row1.seq_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(6) != null) {
                row1.seq_id = rs_tPostgresqlInput_1.getInt(6);
            } else {
                    row1.seq_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 7) {
								row1.site_cs = null;
							} else {
	                         		
        	row1.site_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 7, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 8) {
								row1.route_cs = null;
							} else {
	                         		
        	row1.route_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 8, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 9) {
								row1.type_cs = null;
							} else {
	                         		
        	row1.type_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 9, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 10) {
								row1.reason_cs = null;
							} else {
	                         		
        	row1.reason_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 10, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 11) {
								row1.recordtarget_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(11) != null) {
                row1.recordtarget_id = rs_tPostgresqlInput_1.getObject(11);
            } else {
                    row1.recordtarget_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 12) {
								row1.author_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(12) != null) {
                row1.author_id = rs_tPostgresqlInput_1.getObject(12);
            } else {
                    row1.author_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 13) {
								row1.product_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(13) != null) {
                row1.product_id = rs_tPostgresqlInput_1.getObject(13);
            } else {
                    row1.product_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 14) {
								row1.location_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(14) != null) {
                row1.location_id = rs_tPostgresqlInput_1.getObject(14);
            } else {
                    row1.location_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 15) {
								row1.consumable_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(15) != null) {
                row1.consumable_id = rs_tPostgresqlInput_1.getObject(15);
            } else {
                    row1.consumable_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 16) {
								row1.encounter_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(16) != null) {
                row1.encounter_id = rs_tPostgresqlInput_1.getObject(16);
            } else {
                    row1.encounter_id = null;
            }
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow2 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow2 = true;
			           		  	} // G 21
                    		  	
                    		

							row2Struct row2 = null;
                    		  	 
							

								while ((tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) || forceLooprow2) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row2'
									
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								
								if(!forceLooprow2) { // G 46
								
							
								 
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow2 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

outputSbadm = null;


// # Output table : 'outputSbadm'
outputSbadm_tmp.act_id = row1.act_id;
outputSbadm_tmp.enc_id = row1.encounter_id ;
outputSbadm_tmp.crt_etl_id = row2.etl_id ;
outputSbadm_tmp.upd_etl_id = null;
outputSbadm_tmp.crt_utc = row1.crt_utc;
outputSbadm_tmp.upd_utc = null;
outputSbadm_tmp.obslt_utc = row1.obslt_utc;
outputSbadm_tmp.prop_utc = null;
outputSbadm_tmp.act_utc = row1.act_utc;
outputSbadm_tmp.neg_ind = row1.neg_ind;
outputSbadm_tmp.rsn_mnemonic = row1.reason_cs ;
outputSbadm_tmp.seq_id = row1.seq_id;
outputSbadm_tmp.usr_id = row1.author_id ;
outputSbadm_tmp.mat_id = row1.product_id ;
outputSbadm_tmp.mmat_id = row1.consumable_id ;
outputSbadm_tmp.site_mnemonic = row1.site_cs ;
outputSbadm_tmp.type_mnemonic = row1.type_cs ;
outputSbadm_tmp.rout_mnemonic = row1.route_cs ;
outputSbadm_tmp.pat_id = row1.recordtarget_id ;
outputSbadm_tmp.fac_id = row1.location_id ;
outputSbadm = outputSbadm_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "outputSbadm"
if(outputSbadm != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

			//outputSbadm
			//outputSbadm


			
				if(execStat){
					runStat.updateStatOnConnection("outputSbadm"+iterateId,1, 1);
				} 
			

		
row9 = null;			
finder_tUniqRow_1.act_id = outputSbadm.act_id;	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
new_tUniqRow_1.act_id = outputSbadm.act_id;
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row9 == null){ 
	
	row9 = new row9Struct();
}row9.act_id = outputSbadm.act_id;			row9.enc_id = outputSbadm.enc_id;			row9.crt_etl_id = outputSbadm.crt_etl_id;			row9.upd_etl_id = outputSbadm.upd_etl_id;			row9.crt_utc = outputSbadm.crt_utc;			row9.upd_utc = outputSbadm.upd_utc;			row9.obslt_utc = outputSbadm.obslt_utc;			row9.prop_utc = outputSbadm.prop_utc;			row9.act_utc = outputSbadm.act_utc;			row9.neg_ind = outputSbadm.neg_ind;			row9.rsn_mnemonic = outputSbadm.rsn_mnemonic;			row9.seq_id = outputSbadm.seq_id;			row9.usr_id = outputSbadm.usr_id;			row9.mat_id = outputSbadm.mat_id;			row9.mmat_id = outputSbadm.mmat_id;			row9.site_mnemonic = outputSbadm.site_mnemonic;			row9.type_mnemonic = outputSbadm.type_mnemonic;			row9.rout_mnemonic = outputSbadm.rout_mnemonic;			row9.pat_id = outputSbadm.pat_id;			row9.fac_id = outputSbadm.fac_id;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_1 = false;
                    if(row9.act_id == null) {
pstmt_tPostgresqlOutput_1.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(1, row9.act_id, java.sql.Types.OTHER);
}

                    if(row9.enc_id == null) {
pstmt_tPostgresqlOutput_1.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(2, row9.enc_id, java.sql.Types.OTHER);
}

                    if(row9.crt_etl_id == null) {
pstmt_tPostgresqlOutput_1.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(3, row9.crt_etl_id, java.sql.Types.OTHER);
}

                    if(row9.upd_etl_id == null) {
pstmt_tPostgresqlOutput_1.setNull(4, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(4, row9.upd_etl_id, java.sql.Types.OTHER);
}

                    if(row9.crt_utc != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(5, new java.sql.Timestamp(row9.crt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(5, java.sql.Types.TIMESTAMP);
}

                    if(row9.upd_utc != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(6, new java.sql.Timestamp(row9.upd_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(row9.obslt_utc != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(7, new java.sql.Timestamp(row9.obslt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(7, java.sql.Types.TIMESTAMP);
}

                    if(row9.prop_utc != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(8, new java.sql.Timestamp(row9.prop_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(8, java.sql.Types.TIMESTAMP);
}

                    if(row9.act_utc != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(9, new java.sql.Timestamp(row9.act_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(9, java.sql.Types.TIMESTAMP);
}

                    pstmt_tPostgresqlOutput_1.setBoolean(10, row9.neg_ind);

                    if(row9.rsn_mnemonic == null) {
pstmt_tPostgresqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(11, row9.rsn_mnemonic);
}

                    if(row9.seq_id == null) {
pstmt_tPostgresqlOutput_1.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_tPostgresqlOutput_1.setInt(12, row9.seq_id);
}

                    if(row9.usr_id == null) {
pstmt_tPostgresqlOutput_1.setNull(13, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(13, row9.usr_id, java.sql.Types.OTHER);
}

                    if(row9.mat_id == null) {
pstmt_tPostgresqlOutput_1.setNull(14, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(14, row9.mat_id, java.sql.Types.OTHER);
}

                    if(row9.mmat_id == null) {
pstmt_tPostgresqlOutput_1.setNull(15, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(15, row9.mmat_id, java.sql.Types.OTHER);
}

                    if(row9.site_mnemonic == null) {
pstmt_tPostgresqlOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(16, row9.site_mnemonic);
}

                    if(row9.type_mnemonic == null) {
pstmt_tPostgresqlOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(17, row9.type_mnemonic);
}

                    if(row9.rout_mnemonic == null) {
pstmt_tPostgresqlOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(18, row9.rout_mnemonic);
}

                    if(row9.pat_id == null) {
pstmt_tPostgresqlOutput_1.setNull(19, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(19, row9.pat_id, java.sql.Types.OTHER);
}

                    if(row9.fac_id == null) {
pstmt_tPostgresqlOutput_1.setNull(20, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(20, row9.fac_id, java.sql.Types.OTHER);
}

			
    		pstmt_tPostgresqlOutput_1.addBatch();
    		nb_line_tPostgresqlOutput_1++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_1++;
    		  
            if(!whetherReject_tPostgresqlOutput_1) {
            }
    			if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
                try {
						int countSum_tPostgresqlOutput_1 = 0;
						    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
				    	
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
				    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
				    	String errormessage_tPostgresqlOutput_1;
						if (ne_tPostgresqlOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
							errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
						}else{
							errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_1 = 0;
						for(int countEach_tPostgresqlOutput_1: e_tPostgresqlOutput_1.getUpdateCounts()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
						
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_1);
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

 



/**
 * [tPostgresqlOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

 



/**
 * [tPostgresqlOutput_1 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "outputSbadm"



	
		} // close loop of lookup 'row2' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	if (rs_tPostgresqlInput_1 != null) {
		rs_tPostgresqlInput_1.close();
	}
	if (stmt_tPostgresqlInput_1 != null) {
		stmt_tPostgresqlInput_1.close();
	}
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputSbadm"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	    try {
				int countSum_tPostgresqlOutput_1 = 0;
				if (pstmt_tPostgresqlOutput_1 != null && batchSizeCounter_tPostgresqlOutput_1 > 0) {
						
					for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
	    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
	    	String errormessage_tPostgresqlOutput_1;
			if (ne_tPostgresqlOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
				errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
			}else{
				errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_1 = 0;
			for(int countEach_tPostgresqlOutput_1: e_tPostgresqlOutput_1.getUpdateCounts()) {
				countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
			}
			
	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_1);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_1 != null) {
        		
            pstmt_tPostgresqlOutput_1.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_1");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_1", true);

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
								} 
							
							tPostgresqlInput_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_1 = null;
                if ((pstmtToClose_tPostgresqlOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_1")) != null) {
                    pstmtToClose_tPostgresqlOutput_1.close();
                }
    }
 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class outputAefiStruct implements routines.system.IPersistableRow<outputAefiStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public Object enc_id;

				public Object getEnc_id () {
					return this.enc_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public Object mmat_id;

				public Object getMmat_id () {
					return this.mmat_id;
				}
				
			    public String rctn_mnemonic;

				public String getRctn_mnemonic () {
					return this.rctn_mnemonic;
				}
				
			    public String sev_mnemonic;

				public String getSev_mnemonic () {
					return this.sev_mnemonic;
				}
				
			    public java.util.Date start;

				public java.util.Date getStart () {
					return this.start;
				}
				
			    public java.util.Date stop;

				public java.util.Date getStop () {
					return this.stop;
				}
				
			    public Boolean concern_ind;

				public Boolean getConcern_ind () {
					return this.concern_ind;
				}
				
			    public Object pat_id;

				public Object getPat_id () {
					return this.pat_id;
				}
				
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public Object mat_id;

				public Object getMat_id () {
					return this.mat_id;
				}
				
			    public Boolean treated_ind;

				public Boolean getTreated_ind () {
					return this.treated_ind;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.act_id == null) ? 0 : this.act_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputAefiStruct other = (outputAefiStruct) obj;
		
						if (this.act_id == null) {
							if (other.act_id != null)
								return false;
						
						} else if (!this.act_id.equals(other.act_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputAefiStruct other) {

		other.act_id = this.act_id;
	            other.enc_id = this.enc_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            other.usr_id = this.usr_id;
	            other.mmat_id = this.mmat_id;
	            other.rctn_mnemonic = this.rctn_mnemonic;
	            other.sev_mnemonic = this.sev_mnemonic;
	            other.start = this.start;
	            other.stop = this.stop;
	            other.concern_ind = this.concern_ind;
	            other.pat_id = this.pat_id;
	            other.fac_id = this.fac_id;
	            other.mat_id = this.mat_id;
	            other.treated_ind = this.treated_ind;
	            
	}

	public void copyKeysDataTo(outputAefiStruct other) {

		other.act_id = this.act_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
						this.enc_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
						this.usr_id = (Object) dis.readObject();
					
						this.mmat_id = (Object) dis.readObject();
					
					this.rctn_mnemonic = readString(dis);
					
					this.sev_mnemonic = readString(dis);
					
					this.start = readDate(dis);
					
					this.stop = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.concern_ind = null;
           				} else {
           			    	this.concern_ind = dis.readBoolean();
           				}
					
						this.pat_id = (Object) dis.readObject();
					
						this.fac_id = (Object) dis.readObject();
					
						this.mat_id = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.treated_ind = null;
           				} else {
           			    	this.treated_ind = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// Object
				
       			    	dos.writeObject(this.enc_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// Object
				
       			    	dos.writeObject(this.mmat_id);
					
					// String
				
						writeString(this.rctn_mnemonic,dos);
					
					// String
				
						writeString(this.sev_mnemonic,dos);
					
					// java.util.Date
				
						writeDate(this.start,dos);
					
					// java.util.Date
				
						writeDate(this.stop,dos);
					
					// Boolean
				
						if(this.concern_ind == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.concern_ind);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.pat_id);
					
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// Object
				
       			    	dos.writeObject(this.mat_id);
					
					// Boolean
				
						if(this.treated_ind == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.treated_ind);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",enc_id="+String.valueOf(enc_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",mmat_id="+String.valueOf(mmat_id));
		sb.append(",rctn_mnemonic="+rctn_mnemonic);
		sb.append(",sev_mnemonic="+sev_mnemonic);
		sb.append(",start="+String.valueOf(start));
		sb.append(",stop="+String.valueOf(stop));
		sb.append(",concern_ind="+String.valueOf(concern_ind));
		sb.append(",pat_id="+String.valueOf(pat_id));
		sb.append(",fac_id="+String.valueOf(fac_id));
		sb.append(",mat_id="+String.valueOf(mat_id));
		sb.append(",treated_ind="+String.valueOf(treated_ind));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputAefiStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.act_id, other.act_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public Boolean status_cs;

				public Boolean getStatus_cs () {
					return this.status_cs;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object recordtarget_id;

				public Object getRecordtarget_id () {
					return this.recordtarget_id;
				}
				
			    public Object author_id;

				public Object getAuthor_id () {
					return this.author_id;
				}
				
			    public Object location_id;

				public Object getLocation_id () {
					return this.location_id;
				}
				
			    public Object encounter_id;

				public Object getEncounter_id () {
					return this.encounter_id;
				}
				
			    public Object refers_id;

				public Object getRefers_id () {
					return this.refers_id;
				}
				
			    public Object mat;

				public Object getMat () {
					return this.mat;
				}
				
			    public Object mmat_id;

				public Object getMmat_id () {
					return this.mmat_id;
				}
				
			    public String severity;

				public String getSeverity () {
					return this.severity;
				}
				
			    public String manifestation;

				public String getManifestation () {
					return this.manifestation;
				}
				
			    public java.util.Date start_reaction;

				public java.util.Date getStart_reaction () {
					return this.start_reaction;
				}
				
			    public java.util.Date stop_reaction;

				public java.util.Date getStop_reaction () {
					return this.stop_reaction;
				}
				
			    public Boolean treated;

				public Boolean getTreated () {
					return this.treated;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_cs = null;
           				} else {
           			    	this.status_cs = dis.readBoolean();
           				}
					
					this.crt_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
						this.recordtarget_id = (Object) dis.readObject();
					
						this.author_id = (Object) dis.readObject();
					
						this.location_id = (Object) dis.readObject();
					
						this.encounter_id = (Object) dis.readObject();
					
						this.refers_id = (Object) dis.readObject();
					
						this.mat = (Object) dis.readObject();
					
						this.mmat_id = (Object) dis.readObject();
					
					this.severity = readString(dis);
					
					this.manifestation = readString(dis);
					
					this.start_reaction = readDate(dis);
					
					this.stop_reaction = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.treated = null;
           				} else {
           			    	this.treated = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// Boolean
				
						if(this.status_cs == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_cs);
		            	}
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.recordtarget_id);
					
					// Object
				
       			    	dos.writeObject(this.author_id);
					
					// Object
				
       			    	dos.writeObject(this.location_id);
					
					// Object
				
       			    	dos.writeObject(this.encounter_id);
					
					// Object
				
       			    	dos.writeObject(this.refers_id);
					
					// Object
				
       			    	dos.writeObject(this.mat);
					
					// Object
				
       			    	dos.writeObject(this.mmat_id);
					
					// String
				
						writeString(this.severity,dos);
					
					// String
				
						writeString(this.manifestation,dos);
					
					// java.util.Date
				
						writeDate(this.start_reaction,dos);
					
					// java.util.Date
				
						writeDate(this.stop_reaction,dos);
					
					// Boolean
				
						if(this.treated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.treated);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",status_cs="+String.valueOf(status_cs));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",recordtarget_id="+String.valueOf(recordtarget_id));
		sb.append(",author_id="+String.valueOf(author_id));
		sb.append(",location_id="+String.valueOf(location_id));
		sb.append(",encounter_id="+String.valueOf(encounter_id));
		sb.append(",refers_id="+String.valueOf(refers_id));
		sb.append(",mat="+String.valueOf(mat));
		sb.append(",mmat_id="+String.valueOf(mmat_id));
		sb.append(",severity="+severity);
		sb.append(",manifestation="+manifestation);
		sb.append(",start_reaction="+String.valueOf(start_reaction));
		sb.append(",stop_reaction="+String.valueOf(stop_reaction));
		sb.append(",treated="+String.valueOf(treated));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_8Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_8Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public Boolean status_cs;

				public Boolean getStatus_cs () {
					return this.status_cs;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object recordtarget_id;

				public Object getRecordtarget_id () {
					return this.recordtarget_id;
				}
				
			    public Object author_id;

				public Object getAuthor_id () {
					return this.author_id;
				}
				
			    public Object location_id;

				public Object getLocation_id () {
					return this.location_id;
				}
				
			    public Object encounter_id;

				public Object getEncounter_id () {
					return this.encounter_id;
				}
				
			    public Object refers_id;

				public Object getRefers_id () {
					return this.refers_id;
				}
				
			    public Object mat;

				public Object getMat () {
					return this.mat;
				}
				
			    public Object mmat_id;

				public Object getMmat_id () {
					return this.mmat_id;
				}
				
			    public String severity;

				public String getSeverity () {
					return this.severity;
				}
				
			    public String manifestation;

				public String getManifestation () {
					return this.manifestation;
				}
				
			    public java.util.Date start_reaction;

				public java.util.Date getStart_reaction () {
					return this.start_reaction;
				}
				
			    public java.util.Date stop_reaction;

				public java.util.Date getStop_reaction () {
					return this.stop_reaction;
				}
				
			    public Boolean treated;

				public Boolean getTreated () {
					return this.treated;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_cs = null;
           				} else {
           			    	this.status_cs = dis.readBoolean();
           				}
					
					this.crt_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
						this.recordtarget_id = (Object) dis.readObject();
					
						this.author_id = (Object) dis.readObject();
					
						this.location_id = (Object) dis.readObject();
					
						this.encounter_id = (Object) dis.readObject();
					
						this.refers_id = (Object) dis.readObject();
					
						this.mat = (Object) dis.readObject();
					
						this.mmat_id = (Object) dis.readObject();
					
					this.severity = readString(dis);
					
					this.manifestation = readString(dis);
					
					this.start_reaction = readDate(dis);
					
					this.stop_reaction = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.treated = null;
           				} else {
           			    	this.treated = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// Boolean
				
						if(this.status_cs == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_cs);
		            	}
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.recordtarget_id);
					
					// Object
				
       			    	dos.writeObject(this.author_id);
					
					// Object
				
       			    	dos.writeObject(this.location_id);
					
					// Object
				
       			    	dos.writeObject(this.encounter_id);
					
					// Object
				
       			    	dos.writeObject(this.refers_id);
					
					// Object
				
       			    	dos.writeObject(this.mat);
					
					// Object
				
       			    	dos.writeObject(this.mmat_id);
					
					// String
				
						writeString(this.severity,dos);
					
					// String
				
						writeString(this.manifestation,dos);
					
					// java.util.Date
				
						writeDate(this.start_reaction,dos);
					
					// java.util.Date
				
						writeDate(this.stop_reaction,dos);
					
					// Boolean
				
						if(this.treated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.treated);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",status_cs="+String.valueOf(status_cs));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",recordtarget_id="+String.valueOf(recordtarget_id));
		sb.append(",author_id="+String.valueOf(author_id));
		sb.append(",location_id="+String.valueOf(location_id));
		sb.append(",encounter_id="+String.valueOf(encounter_id));
		sb.append(",refers_id="+String.valueOf(refers_id));
		sb.append(",mat="+String.valueOf(mat));
		sb.append(",mmat_id="+String.valueOf(mmat_id));
		sb.append(",severity="+severity);
		sb.append(",manifestation="+manifestation);
		sb.append(",start_reaction="+String.valueOf(start_reaction));
		sb.append(",stop_reaction="+String.valueOf(stop_reaction));
		sb.append(",treated="+String.valueOf(treated));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_9Process(globalMap);

		row10Struct row10 = new row10Struct();
outputAefiStruct outputAefi = new outputAefiStruct();





	
	/**
	 * [tPostgresqlOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_4", false);
		start_Hash.put("tPostgresqlOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputAefi" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_4 = 0;
		





String dbschema_tPostgresqlOutput_4 = null;
	dbschema_tPostgresqlOutput_4 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_4 = null;
if(dbschema_tPostgresqlOutput_4 == null || dbschema_tPostgresqlOutput_4.trim().length() == 0) {
	tableName_tPostgresqlOutput_4 = "aefi_tbl";
} else {
	tableName_tPostgresqlOutput_4 = dbschema_tPostgresqlOutput_4 + "\".\"" + "aefi_tbl";
}

int nb_line_tPostgresqlOutput_4 = 0;
int nb_line_update_tPostgresqlOutput_4 = 0;
int nb_line_inserted_tPostgresqlOutput_4 = 0;
int nb_line_deleted_tPostgresqlOutput_4 = 0;
int nb_line_rejected_tPostgresqlOutput_4 = 0;

int deletedCount_tPostgresqlOutput_4=0;
int updatedCount_tPostgresqlOutput_4=0;
int insertedCount_tPostgresqlOutput_4=0;
int rejectedCount_tPostgresqlOutput_4=0;

boolean whetherReject_tPostgresqlOutput_4 = false;

java.sql.Connection conn_tPostgresqlOutput_4 = null;
String dbUser_tPostgresqlOutput_4 = null;

	conn_tPostgresqlOutput_4 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_4 = 10000;
   int batchSizeCounter_tPostgresqlOutput_4=0;

int count_tPostgresqlOutput_4=0;
            int rsTruncCountNumber_tPostgresqlOutput_4 = 0;
            try(java.sql.Statement stmtTruncCount_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tPostgresqlOutput_4 = stmtTruncCount_tPostgresqlOutput_4.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tPostgresqlOutput_4 + "\"")) {
                    if(rsTruncCount_tPostgresqlOutput_4.next()) {
                        rsTruncCountNumber_tPostgresqlOutput_4 = rsTruncCount_tPostgresqlOutput_4.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4.createStatement()) {
                stmtTrunc_tPostgresqlOutput_4.executeUpdate("TRUNCATE TABLE \"" + tableName_tPostgresqlOutput_4 + "\"");
                deletedCount_tPostgresqlOutput_4 += rsTruncCountNumber_tPostgresqlOutput_4;
            }
	    String insert_tPostgresqlOutput_4 = "INSERT INTO \"" + tableName_tPostgresqlOutput_4 + "\" (\"act_id\",\"enc_id\",\"crt_etl_id\",\"upd_etl_id\",\"crt_utc\",\"upd_utc\",\"obslt_utc\",\"usr_id\",\"mmat_id\",\"rctn_mnemonic\",\"sev_mnemonic\",\"start\",\"stop\",\"concern_ind\",\"pat_id\",\"fac_id\",\"mat_id\",\"treated_ind\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4.prepareStatement(insert_tPostgresqlOutput_4);
	    resourceMap.put("pstmt_tPostgresqlOutput_4", pstmt_tPostgresqlOutput_4);
	    

 



/**
 * [tPostgresqlOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
					globalMap.get( "tHash_Lookup_row11" ))
					;					
					
	
		tHash_Lookup_row11.initGet();
	

row11Struct row11HashKey = new row11Struct();
row11Struct row11Default = new row11Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputAefiStruct outputAefi_tmp = new outputAefiStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_8", false);
		start_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_8";

	
		int tos_count_tPostgresqlInput_8 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_8 = 0;
		    java.sql.Connection conn_tPostgresqlInput_8 = null;
		        conn_tPostgresqlInput_8 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_8 = conn_tPostgresqlInput_8.createStatement();

		    String dbquery_tPostgresqlInput_8 = "SELECT \n	act_cur_vrsn_vw.act_id,\n	first(status_cs = 'ACTIVE') as status_cs,\n	first(act_cur_vrsn_vw.crt_utc) as crt_u"
+"tc,\n	first(act_cur_vrsn_vw.obslt_utc) as obslt_utc,\n	first(RecordTarget.ent_id) AS RecordTarget_Id, \n	first(Author.en"
+"t_id) AS Author_Id, \n	first(Location.ent_id) AS Location_Id, \n	first(Encounter.src_act_id) AS encounter_id, \n	first(r"
+"efers.trg_act_id) AS refers_id, \n	first(mat.ent_id) as mat, \n	first(mmat.ent_id) as mmat_id, \n	first(cd_sev.mnemonic)"
+" as severity, \n	first(cd_mfst.mnemonic) as manifestation,\n	first(amfst.act_start_utc) as start_reaction,\n	first(amfst"
+".act_stop_utc) as stop_reaction,\n	first(lower(act_tag_tbl.tag_value) = 'true') as treated\n	FROM act_cur_vrsn_vw\n	INNE"
+"R JOIN act_ptcpt_tbl AS RecordTarget ON (RecordTarget.act_id = act_cur_vrsn_vw.act_id AND RecordTarget.rol_cd_id = '3f92"
+"dbee-a65e-434f-98ce-841feeb02e3f' AND RecordTarget.obslt_vrsn_seq_id IS NULL)\n	LEFT JOIN act_ptcpt_tbl AS Author ON (Au"
+"thor.act_id = act_cur_vrsn_vw.act_id AND Author.rol_cd_id = 'f0cb3faf-435d-4704-9217-b884f757bc14' AND Author.obslt_vrsn"
+"_seq_id IS NULL)\n	LEFT JOIN act_ptcpt_tbl AS Location ON (Location.act_id = act_cur_vrsn_vw.act_id AND Location.rol_cd_"
+"id = '61848557-d78d-40e5-954f-0b9c97307a04' AND Location.obslt_vrsn_seq_id IS NULL)\n	LEFT JOIN act_rel_tbl Encounter ON"
+" (Encounter.trg_act_id = act_cur_vrsn_vw.act_id AND Encounter.rel_typ_cd_id = '78b9540f-438b-4b6f-8d83-aaf4979dbc64' AND"
+" Encounter.obslt_vrsn_seq_id IS NULL)\n	INNER JOIN act_rel_tbl refers ON (refers.src_act_id = act_cur_vrsn_vw.act_id AND"
+" refers.rel_typ_cd_id = '8fce259a-b859-4ae3-8160-0221f6ab1650')\n	LEFT JOIN act_ptcpt_tbl mmat ON (refers.trg_act_id = m"
+"mat.act_id AND mmat.rol_cd_id = 'a5cac7f7-e3b7-4dd8-872c-db0e7fcc2d84')\n	LEFT JOIN act_ptcpt_tbl mat ON (refers.trg_act"
+"_id = mat.act_id AND mat.rol_cd_id = '99e77288-cb09-4050-a8cf-385513f32f0a')\n	LEFT JOIN act_rel_tbl sub ON (sub.src_act"
+"_id = act_cur_vrsn_vw.act_id AND sub.rel_typ_cd_id = '9871c3bc-b57a-479d-a031-7b56cb06fa84')\n	LEFT JOIN act_rel_tbl sev"
+" ON (sev.src_act_id = sub.trg_act_id AND sev.rel_typ_cd_id = '78b9540f-438b-4b6f-8d83-aaf4979dbc64')\n	LEFT JOIN act_rel"
+"_tbl mfst ON (mfst.src_act_id = sub.trg_act_id AND mfst.rel_typ_cd_id = '22918d17-d3dc-4135-a003-4c1c52e57e75')\n	LEFT J"
+"OIN act_vrsn_tbl asev ON (sev.trg_act_id = asev.act_id and asev.obslt_utc is null)\n	LEFT JOIN cd_obs_tbl csev ON (csev."
+"act_Vrsn_id = asev.act_vrsn_id )\n	LEFT JOIN act_vrsn_tbl amfst ON (mfst.trg_act_id = amfst.act_id and amfst.obslt_utc i"
+"s null)\n	LEFT JOIN cd_obs_tbl cmfst ON (cmfst.act_Vrsn_id = amfst.act_vrsn_id )\n	LEFT JOIN cd_Vrsn_tbl cd_sev ON (cd_s"
+"ev.cd_id = csev.val_cd_id AND cd_sev.obslt_utc is null)\n	LEFT JOIN cd_Vrsn_tbl cd_mfst ON (cd_mfst.cd_id = cmfst.val_cd"
+"_id AND cd_mfst.obslt_utc is null)\n	LEFT JOIN act_tag_tbl ON (act_Tag_tbl.act_id = act_cur_vrsn_vw.act_id and act_tag_t"
+"bl.tag_name = 'treated')\nWHERE act_cur_vrsn_vw.typ_cd_id = '0744b6ad-be39-4a08-b64d-f61cb8282267' AND act_cur_vrsn_vw.o"
+"bslt_utc IS NULL\n	AND Encounter.src_act_id IN (SELECT act_id FROM act_vrsn_tbl EncounterActVersion INNER JOIN act_tbl E"
+"ncounterAct USING (act_id) WHERE EncounterActVersion.obslt_utc IS NULL \n	AND EncounterActVersion.sts_cd_id = 'afc33800-"
+"8225-4061-b168-bacc09cdbae3' \n	AND EncounterAct.cls_cd_id  IN ('54b52119-1709-4098-8911-5df6d6c84140','fdae49aa-6fcb-40"
+"ae-9653-744e87fdd692'))\nGROUP BY act_cur_Vrsn_vw.act_id\n";
			

            	globalMap.put("tPostgresqlInput_8_QUERY",dbquery_tPostgresqlInput_8);
		    java.sql.ResultSet rs_tPostgresqlInput_8 = null;

		    try {
		    	rs_tPostgresqlInput_8 = stmt_tPostgresqlInput_8.executeQuery(dbquery_tPostgresqlInput_8);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_8 = rs_tPostgresqlInput_8.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_8 = rsmd_tPostgresqlInput_8.getColumnCount();

		    String tmpContent_tPostgresqlInput_8 = null;
		    
		    
		    while (rs_tPostgresqlInput_8.next()) {
		        nb_line_tPostgresqlInput_8++;
		        
							if(colQtyInRs_tPostgresqlInput_8 < 1) {
								row10.act_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_8.getObject(1) != null) {
                row10.act_id = rs_tPostgresqlInput_8.getObject(1);
            } else {
                    row10.act_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 2) {
								row10.status_cs = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_8.getObject(2) != null) {
                row10.status_cs = rs_tPostgresqlInput_8.getBoolean(2);
            } else {
                    row10.status_cs = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 3) {
								row10.crt_utc = null;
							} else {
										
			row10.crt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_8, 3);
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 4) {
								row10.obslt_utc = null;
							} else {
										
			row10.obslt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_8, 4);
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 5) {
								row10.recordtarget_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_8.getObject(5) != null) {
                row10.recordtarget_id = rs_tPostgresqlInput_8.getObject(5);
            } else {
                    row10.recordtarget_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 6) {
								row10.author_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_8.getObject(6) != null) {
                row10.author_id = rs_tPostgresqlInput_8.getObject(6);
            } else {
                    row10.author_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 7) {
								row10.location_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_8.getObject(7) != null) {
                row10.location_id = rs_tPostgresqlInput_8.getObject(7);
            } else {
                    row10.location_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 8) {
								row10.encounter_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_8.getObject(8) != null) {
                row10.encounter_id = rs_tPostgresqlInput_8.getObject(8);
            } else {
                    row10.encounter_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 9) {
								row10.refers_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_8.getObject(9) != null) {
                row10.refers_id = rs_tPostgresqlInput_8.getObject(9);
            } else {
                    row10.refers_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 10) {
								row10.mat = null;
							} else {
		                          
            if(rs_tPostgresqlInput_8.getObject(10) != null) {
                row10.mat = rs_tPostgresqlInput_8.getObject(10);
            } else {
                    row10.mat = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 11) {
								row10.mmat_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_8.getObject(11) != null) {
                row10.mmat_id = rs_tPostgresqlInput_8.getObject(11);
            } else {
                    row10.mmat_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 12) {
								row10.severity = null;
							} else {
	                         		
        	row10.severity = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_8, 12, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 13) {
								row10.manifestation = null;
							} else {
	                         		
        	row10.manifestation = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_8, 13, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 14) {
								row10.start_reaction = null;
							} else {
										
			row10.start_reaction = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_8, 14);
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 15) {
								row10.stop_reaction = null;
							} else {
										
			row10.stop_reaction = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_8, 15);
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 16) {
								row10.treated = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_8.getObject(16) != null) {
                row10.treated = rs_tPostgresqlInput_8.getBoolean(16);
            } else {
                    row10.treated = null;
            }
		                    }
					


 



/**
 * [tPostgresqlInput_8 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_8 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 


	tos_count_tPostgresqlInput_8++;

/**
 * [tPostgresqlInput_8 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 



/**
 * [tPostgresqlInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row11" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow11 = false;
       		  	    	
       		  	    	
 							row11Struct row11ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row11.lookup( row11HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row11.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow11 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow11 = true;
			           		  	} // G 21
                    		  	
                    		

							row11Struct row11 = null;
                    		  	 
							

								while ((tHash_Lookup_row11 != null && tHash_Lookup_row11.hasNext()) || forceLooprow11) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row11'
									
                    		  	 
							   
                    		  	 
	       		  	    	row11Struct fromLookup_row11 = null;
							row11 = row11Default;
										 
							
								
								if(!forceLooprow11) { // G 46
								
							
								 
							
								
								fromLookup_row11 = tHash_Lookup_row11.next();

							

							if(fromLookup_row11 != null) {
								row11 = fromLookup_row11;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow11 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

outputAefi = null;


// # Output table : 'outputAefi'
outputAefi_tmp.act_id = row10.act_id;
outputAefi_tmp.enc_id = row10.encounter_id ;
outputAefi_tmp.crt_etl_id = row11.etl_id ;
outputAefi_tmp.upd_etl_id = null;
outputAefi_tmp.crt_utc = row10.crt_utc;
outputAefi_tmp.upd_utc = null;
outputAefi_tmp.obslt_utc = row10.obslt_utc;
outputAefi_tmp.usr_id = row10.author_id ;
outputAefi_tmp.mmat_id = row10.mmat_id;
outputAefi_tmp.rctn_mnemonic = row10.manifestation ;
outputAefi_tmp.sev_mnemonic = row10.severity ;
outputAefi_tmp.start = row10.start_reaction ;
outputAefi_tmp.stop = row10.stop_reaction ;
outputAefi_tmp.concern_ind = row10.status_cs ;
outputAefi_tmp.pat_id = row10.recordtarget_id ;
outputAefi_tmp.fac_id = row10.location_id ;
outputAefi_tmp.mat_id = row10.mat ;
outputAefi_tmp.treated_ind = row10.treated ;
outputAefi = outputAefi_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "outputAefi"
if(outputAefi != null) { 



	
	/**
	 * [tPostgresqlOutput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	

			//outputAefi
			//outputAefi


			
				if(execStat){
					runStat.updateStatOnConnection("outputAefi"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_4 = false;
                    if(outputAefi.act_id == null) {
pstmt_tPostgresqlOutput_4.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(1, outputAefi.act_id, java.sql.Types.OTHER);
}

                    if(outputAefi.enc_id == null) {
pstmt_tPostgresqlOutput_4.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(2, outputAefi.enc_id, java.sql.Types.OTHER);
}

                    if(outputAefi.crt_etl_id == null) {
pstmt_tPostgresqlOutput_4.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(3, outputAefi.crt_etl_id, java.sql.Types.OTHER);
}

                    if(outputAefi.upd_etl_id == null) {
pstmt_tPostgresqlOutput_4.setNull(4, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(4, outputAefi.upd_etl_id, java.sql.Types.OTHER);
}

                    if(outputAefi.crt_utc != null) {
pstmt_tPostgresqlOutput_4.setTimestamp(5, new java.sql.Timestamp(outputAefi.crt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_4.setNull(5, java.sql.Types.TIMESTAMP);
}

                    if(outputAefi.upd_utc != null) {
pstmt_tPostgresqlOutput_4.setTimestamp(6, new java.sql.Timestamp(outputAefi.upd_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_4.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(outputAefi.obslt_utc != null) {
pstmt_tPostgresqlOutput_4.setTimestamp(7, new java.sql.Timestamp(outputAefi.obslt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_4.setNull(7, java.sql.Types.TIMESTAMP);
}

                    if(outputAefi.usr_id == null) {
pstmt_tPostgresqlOutput_4.setNull(8, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(8, outputAefi.usr_id, java.sql.Types.OTHER);
}

                    if(outputAefi.mmat_id == null) {
pstmt_tPostgresqlOutput_4.setNull(9, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(9, outputAefi.mmat_id, java.sql.Types.OTHER);
}

                    if(outputAefi.rctn_mnemonic == null) {
pstmt_tPostgresqlOutput_4.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_4.setString(10, outputAefi.rctn_mnemonic);
}

                    if(outputAefi.sev_mnemonic == null) {
pstmt_tPostgresqlOutput_4.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_4.setString(11, outputAefi.sev_mnemonic);
}

                    if(outputAefi.start != null) {
pstmt_tPostgresqlOutput_4.setTimestamp(12, new java.sql.Timestamp(outputAefi.start.getTime()));
} else {
pstmt_tPostgresqlOutput_4.setNull(12, java.sql.Types.TIMESTAMP);
}

                    if(outputAefi.stop != null) {
pstmt_tPostgresqlOutput_4.setTimestamp(13, new java.sql.Timestamp(outputAefi.stop.getTime()));
} else {
pstmt_tPostgresqlOutput_4.setNull(13, java.sql.Types.TIMESTAMP);
}

                    if(outputAefi.concern_ind == null) {
pstmt_tPostgresqlOutput_4.setNull(14, java.sql.Types.BOOLEAN);
} else {pstmt_tPostgresqlOutput_4.setBoolean(14, outputAefi.concern_ind);
}

                    if(outputAefi.pat_id == null) {
pstmt_tPostgresqlOutput_4.setNull(15, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(15, outputAefi.pat_id, java.sql.Types.OTHER);
}

                    if(outputAefi.fac_id == null) {
pstmt_tPostgresqlOutput_4.setNull(16, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(16, outputAefi.fac_id, java.sql.Types.OTHER);
}

                    if(outputAefi.mat_id == null) {
pstmt_tPostgresqlOutput_4.setNull(17, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_4.setObject(17, outputAefi.mat_id, java.sql.Types.OTHER);
}

                    if(outputAefi.treated_ind == null) {
pstmt_tPostgresqlOutput_4.setNull(18, java.sql.Types.BOOLEAN);
} else {pstmt_tPostgresqlOutput_4.setBoolean(18, outputAefi.treated_ind);
}

			
    		pstmt_tPostgresqlOutput_4.addBatch();
    		nb_line_tPostgresqlOutput_4++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_4++;
    		  
            if(!whetherReject_tPostgresqlOutput_4) {
            }
    			if ((batchSize_tPostgresqlOutput_4 > 0) && (batchSize_tPostgresqlOutput_4 <= batchSizeCounter_tPostgresqlOutput_4)) {
                try {
						int countSum_tPostgresqlOutput_4 = 0;
						    
						for(int countEach_tPostgresqlOutput_4: pstmt_tPostgresqlOutput_4.executeBatch()) {
							countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
						}
				    	
				    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_4){
				    	java.sql.SQLException ne_tPostgresqlOutput_4 = e_tPostgresqlOutput_4.getNextException(),sqle_tPostgresqlOutput_4=null;
				    	String errormessage_tPostgresqlOutput_4;
						if (ne_tPostgresqlOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_4 = new java.sql.SQLException(e_tPostgresqlOutput_4.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_4.getMessage(), ne_tPostgresqlOutput_4.getSQLState(), ne_tPostgresqlOutput_4.getErrorCode(), ne_tPostgresqlOutput_4);
							errormessage_tPostgresqlOutput_4 = sqle_tPostgresqlOutput_4.getMessage();
						}else{
							errormessage_tPostgresqlOutput_4 = e_tPostgresqlOutput_4.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_4 = 0;
						for(int countEach_tPostgresqlOutput_4: e_tPostgresqlOutput_4.getUpdateCounts()) {
							countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
						}
						
				    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_4);
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_4++;

/**
 * [tPostgresqlOutput_4 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	

 



/**
 * [tPostgresqlOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	

 



/**
 * [tPostgresqlOutput_4 process_data_end ] stop
 */

} // End of branch "outputAefi"



	
		} // close loop of lookup 'row11' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 



/**
 * [tPostgresqlInput_8 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_8 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

	}
}finally{
	if (rs_tPostgresqlInput_8 != null) {
		rs_tPostgresqlInput_8.close();
	}
	if (stmt_tPostgresqlInput_8 != null) {
		stmt_tPostgresqlInput_8.close();
	}
}
globalMap.put("tPostgresqlInput_8_NB_LINE",nb_line_tPostgresqlInput_8);
 

ok_Hash.put("tPostgresqlInput_8", true);
end_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());




/**
 * [tPostgresqlInput_8 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row11 != null) {
						tHash_Lookup_row11.endGet();
					}
					globalMap.remove( "tHash_Lookup_row11" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	



	    try {
				int countSum_tPostgresqlOutput_4 = 0;
				if (pstmt_tPostgresqlOutput_4 != null && batchSizeCounter_tPostgresqlOutput_4 > 0) {
						
					for(int countEach_tPostgresqlOutput_4: pstmt_tPostgresqlOutput_4.executeBatch()) {
						countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_4){
	    	java.sql.SQLException ne_tPostgresqlOutput_4 = e_tPostgresqlOutput_4.getNextException(),sqle_tPostgresqlOutput_4=null;
	    	String errormessage_tPostgresqlOutput_4;
			if (ne_tPostgresqlOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_4 = new java.sql.SQLException(e_tPostgresqlOutput_4.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_4.getMessage(), ne_tPostgresqlOutput_4.getSQLState(), ne_tPostgresqlOutput_4.getErrorCode(), ne_tPostgresqlOutput_4);
				errormessage_tPostgresqlOutput_4 = sqle_tPostgresqlOutput_4.getMessage();
			}else{
				errormessage_tPostgresqlOutput_4 = e_tPostgresqlOutput_4.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_4 = 0;
			for(int countEach_tPostgresqlOutput_4: e_tPostgresqlOutput_4.getUpdateCounts()) {
				countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
			}
			
	    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_4);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_4 != null) {
        		
            pstmt_tPostgresqlOutput_4.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_4");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_4", true);

	nb_line_deleted_tPostgresqlOutput_4=nb_line_deleted_tPostgresqlOutput_4+ deletedCount_tPostgresqlOutput_4;
	nb_line_update_tPostgresqlOutput_4=nb_line_update_tPostgresqlOutput_4 + updatedCount_tPostgresqlOutput_4;
	nb_line_inserted_tPostgresqlOutput_4=nb_line_inserted_tPostgresqlOutput_4 + insertedCount_tPostgresqlOutput_4;
	nb_line_rejected_tPostgresqlOutput_4=nb_line_rejected_tPostgresqlOutput_4 + rejectedCount_tPostgresqlOutput_4;
	
        globalMap.put("tPostgresqlOutput_4_NB_LINE",nb_line_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_4);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputAefi"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_4", true);
end_Hash.put("tPostgresqlOutput_4", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_4 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlInput_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tWarn_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row11"); 
				     			
				try{
					
	
	/**
	 * [tPostgresqlInput_8 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 



/**
 * [tPostgresqlInput_8 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_4 = null;
                if ((pstmtToClose_tPostgresqlOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_4")) != null) {
                    pstmtToClose_tPostgresqlOutput_4.close();
                }
    }
 



/**
 * [tPostgresqlOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_3", false);
		start_Hash.put("tWarn_3", System.currentTimeMillis());
		
	
	currentComponent="tWarn_3";

	
		int tos_count_tWarn_3 = 0;
		

 



/**
 * [tWarn_3 begin ] stop
 */
	
	/**
	 * [tWarn_3 main ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_3", "", Thread.currentThread().getId() + "", "INFO","","Starting Observations","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_3", 3, "Starting Observations", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_3_WARN_MESSAGES", "Starting Observations"); 
	globalMap.put("tWarn_3_WARN_PRIORITY", 3);
	globalMap.put("tWarn_3_WARN_CODE", 42);
	
} catch (Exception e_tWarn_3) {
	logIgnoredError(String.format("tWarn_3 - tWarn failed to log message due to internal error: %s", e_tWarn_3), e_tWarn_3);
}


 


	tos_count_tWarn_3++;

/**
 * [tWarn_3 main ] stop
 */
	
	/**
	 * [tWarn_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 process_data_end ] stop
 */
	
	/**
	 * [tWarn_3 end ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 

ok_Hash.put("tWarn_3", true);
end_Hash.put("tWarn_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tPostgresqlInput_5Process(globalMap);



/**
 * [tWarn_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_3 finally ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_3_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public Object enc_id;

				public Object getEnc_id () {
					return this.enc_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public String typ_cs;

				public String getTyp_cs () {
					return this.typ_cs;
				}
				
			    public String int_cs;

				public String getInt_cs () {
					return this.int_cs;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public BigDecimal qty;

				public BigDecimal getQty () {
					return this.qty;
				}
				
			    public String uom;

				public String getUom () {
					return this.uom;
				}
				
			    public Object pat_id;

				public Object getPat_id () {
					return this.pat_id;
				}
				
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.act_id == null) ? 0 : this.act_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.act_id == null) {
							if (other.act_id != null)
								return false;
						
						} else if (!this.act_id.equals(other.act_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.act_id = this.act_id;
	            other.enc_id = this.enc_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            other.act_utc = this.act_utc;
	            other.typ_cs = this.typ_cs;
	            other.int_cs = this.int_cs;
	            other.usr_id = this.usr_id;
	            other.qty = this.qty;
	            other.uom = this.uom;
	            other.pat_id = this.pat_id;
	            other.fac_id = this.fac_id;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.act_id = this.act_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
						this.enc_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.act_utc = readDate(dis);
					
					this.typ_cs = readString(dis);
					
					this.int_cs = readString(dis);
					
						this.usr_id = (Object) dis.readObject();
					
						this.qty = (BigDecimal) dis.readObject();
					
					this.uom = readString(dis);
					
						this.pat_id = (Object) dis.readObject();
					
						this.fac_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// Object
				
       			    	dos.writeObject(this.enc_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// String
				
						writeString(this.typ_cs,dos);
					
					// String
				
						writeString(this.int_cs,dos);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.qty);
					
					// String
				
						writeString(this.uom,dos);
					
					// Object
				
       			    	dos.writeObject(this.pat_id);
					
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",enc_id="+String.valueOf(enc_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",typ_cs="+typ_cs);
		sb.append(",int_cs="+int_cs);
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",uom="+uom);
		sb.append(",pat_id="+String.valueOf(pat_id));
		sb.append(",fac_id="+String.valueOf(fac_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.act_id, other.act_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outputObservationsStruct implements routines.system.IPersistableRow<outputObservationsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public Object enc_id;

				public Object getEnc_id () {
					return this.enc_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public String typ_cs;

				public String getTyp_cs () {
					return this.typ_cs;
				}
				
			    public String int_cs;

				public String getInt_cs () {
					return this.int_cs;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public BigDecimal qty;

				public BigDecimal getQty () {
					return this.qty;
				}
				
			    public String uom;

				public String getUom () {
					return this.uom;
				}
				
			    public Object pat_id;

				public Object getPat_id () {
					return this.pat_id;
				}
				
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.act_id == null) ? 0 : this.act_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputObservationsStruct other = (outputObservationsStruct) obj;
		
						if (this.act_id == null) {
							if (other.act_id != null)
								return false;
						
						} else if (!this.act_id.equals(other.act_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputObservationsStruct other) {

		other.act_id = this.act_id;
	            other.enc_id = this.enc_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            other.act_utc = this.act_utc;
	            other.typ_cs = this.typ_cs;
	            other.int_cs = this.int_cs;
	            other.usr_id = this.usr_id;
	            other.qty = this.qty;
	            other.uom = this.uom;
	            other.pat_id = this.pat_id;
	            other.fac_id = this.fac_id;
	            
	}

	public void copyKeysDataTo(outputObservationsStruct other) {

		other.act_id = this.act_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
						this.enc_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.act_utc = readDate(dis);
					
					this.typ_cs = readString(dis);
					
					this.int_cs = readString(dis);
					
						this.usr_id = (Object) dis.readObject();
					
						this.qty = (BigDecimal) dis.readObject();
					
					this.uom = readString(dis);
					
						this.pat_id = (Object) dis.readObject();
					
						this.fac_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// Object
				
       			    	dos.writeObject(this.enc_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// String
				
						writeString(this.typ_cs,dos);
					
					// String
				
						writeString(this.int_cs,dos);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.qty);
					
					// String
				
						writeString(this.uom,dos);
					
					// Object
				
       			    	dos.writeObject(this.pat_id);
					
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",enc_id="+String.valueOf(enc_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",typ_cs="+typ_cs);
		sb.append(",int_cs="+int_cs);
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",uom="+uom);
		sb.append(",pat_id="+String.valueOf(pat_id));
		sb.append(",fac_id="+String.valueOf(fac_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputObservationsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.act_id, other.act_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public String type_cs;

				public String getType_cs () {
					return this.type_cs;
				}
				
			    public BigDecimal qty;

				public BigDecimal getQty () {
					return this.qty;
				}
				
			    public String uom;

				public String getUom () {
					return this.uom;
				}
				
			    public String intr;

				public String getIntr () {
					return this.intr;
				}
				
			    public Object recordtarget_id;

				public Object getRecordtarget_id () {
					return this.recordtarget_id;
				}
				
			    public Object author_id;

				public Object getAuthor_id () {
					return this.author_id;
				}
				
			    public Object location_id;

				public Object getLocation_id () {
					return this.location_id;
				}
				
			    public Object enc_id;

				public Object getEnc_id () {
					return this.enc_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.act_utc = readDate(dis);
					
					this.type_cs = readString(dis);
					
						this.qty = (BigDecimal) dis.readObject();
					
					this.uom = readString(dis);
					
					this.intr = readString(dis);
					
						this.recordtarget_id = (Object) dis.readObject();
					
						this.author_id = (Object) dis.readObject();
					
						this.location_id = (Object) dis.readObject();
					
						this.enc_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// String
				
						writeString(this.type_cs,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.qty);
					
					// String
				
						writeString(this.uom,dos);
					
					// String
				
						writeString(this.intr,dos);
					
					// Object
				
       			    	dos.writeObject(this.recordtarget_id);
					
					// Object
				
       			    	dos.writeObject(this.author_id);
					
					// Object
				
       			    	dos.writeObject(this.location_id);
					
					// Object
				
       			    	dos.writeObject(this.enc_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",type_cs="+type_cs);
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",uom="+uom);
		sb.append(",intr="+intr);
		sb.append(",recordtarget_id="+String.valueOf(recordtarget_id));
		sb.append(",author_id="+String.valueOf(author_id));
		sb.append(",location_id="+String.valueOf(location_id));
		sb.append(",enc_id="+String.valueOf(enc_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_5Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_5Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public String type_cs;

				public String getType_cs () {
					return this.type_cs;
				}
				
			    public BigDecimal qty;

				public BigDecimal getQty () {
					return this.qty;
				}
				
			    public String uom;

				public String getUom () {
					return this.uom;
				}
				
			    public String intr;

				public String getIntr () {
					return this.intr;
				}
				
			    public Object recordtarget_id;

				public Object getRecordtarget_id () {
					return this.recordtarget_id;
				}
				
			    public Object author_id;

				public Object getAuthor_id () {
					return this.author_id;
				}
				
			    public Object location_id;

				public Object getLocation_id () {
					return this.location_id;
				}
				
			    public Object enc_id;

				public Object getEnc_id () {
					return this.enc_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.act_utc = readDate(dis);
					
					this.type_cs = readString(dis);
					
						this.qty = (BigDecimal) dis.readObject();
					
					this.uom = readString(dis);
					
					this.intr = readString(dis);
					
						this.recordtarget_id = (Object) dis.readObject();
					
						this.author_id = (Object) dis.readObject();
					
						this.location_id = (Object) dis.readObject();
					
						this.enc_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// String
				
						writeString(this.type_cs,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.qty);
					
					// String
				
						writeString(this.uom,dos);
					
					// String
				
						writeString(this.intr,dos);
					
					// Object
				
       			    	dos.writeObject(this.recordtarget_id);
					
					// Object
				
       			    	dos.writeObject(this.author_id);
					
					// Object
				
       			    	dos.writeObject(this.location_id);
					
					// Object
				
       			    	dos.writeObject(this.enc_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",type_cs="+type_cs);
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",uom="+uom);
		sb.append(",intr="+intr);
		sb.append(",recordtarget_id="+String.valueOf(recordtarget_id));
		sb.append(",author_id="+String.valueOf(author_id));
		sb.append(",location_id="+String.valueOf(location_id));
		sb.append(",enc_id="+String.valueOf(enc_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_6Process(globalMap);

		row5Struct row5 = new row5Struct();
outputObservationsStruct outputObservations = new outputObservationsStruct();
row12Struct row12 = new row12Struct();






	
	/**
	 * [tPostgresqlOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_3", false);
		start_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_3 = 0;
		





String dbschema_tPostgresqlOutput_3 = null;
	dbschema_tPostgresqlOutput_3 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_3 = null;
if(dbschema_tPostgresqlOutput_3 == null || dbschema_tPostgresqlOutput_3.trim().length() == 0) {
	tableName_tPostgresqlOutput_3 = "qty_obs_tbl";
} else {
	tableName_tPostgresqlOutput_3 = dbschema_tPostgresqlOutput_3 + "\".\"" + "qty_obs_tbl";
}

int nb_line_tPostgresqlOutput_3 = 0;
int nb_line_update_tPostgresqlOutput_3 = 0;
int nb_line_inserted_tPostgresqlOutput_3 = 0;
int nb_line_deleted_tPostgresqlOutput_3 = 0;
int nb_line_rejected_tPostgresqlOutput_3 = 0;

int deletedCount_tPostgresqlOutput_3=0;
int updatedCount_tPostgresqlOutput_3=0;
int insertedCount_tPostgresqlOutput_3=0;
int rejectedCount_tPostgresqlOutput_3=0;

boolean whetherReject_tPostgresqlOutput_3 = false;

java.sql.Connection conn_tPostgresqlOutput_3 = null;
String dbUser_tPostgresqlOutput_3 = null;

	conn_tPostgresqlOutput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_3 = 10000;
   int batchSizeCounter_tPostgresqlOutput_3=0;

int count_tPostgresqlOutput_3=0;
	    String insert_tPostgresqlOutput_3 = "INSERT INTO \"" + tableName_tPostgresqlOutput_3 + "\" (\"act_id\",\"enc_id\",\"crt_etl_id\",\"upd_etl_id\",\"crt_utc\",\"upd_utc\",\"obslt_utc\",\"act_utc\",\"typ_cs\",\"int_cs\",\"usr_id\",\"qty\",\"uom\",\"pat_id\",\"fac_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.prepareStatement(insert_tPostgresqlOutput_3);
	    resourceMap.put("pstmt_tPostgresqlOutput_3", pstmt_tPostgresqlOutput_3);
	    

 



/**
 * [tPostgresqlOutput_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputObservations" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					Object act_id;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.act_id == null) ? 0 : this.act_id.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.act_id == null) {
										if (other.act_id != null) 
											return false;
								
									} else if (!this.act_id.equals(other.act_id))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	
		tHash_Lookup_row6.initGet();
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputObservationsStruct outputObservations_tmp = new outputObservationsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_5", false);
		start_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_5";

	
		int tos_count_tPostgresqlInput_5 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_5 = 0;
		    java.sql.Connection conn_tPostgresqlInput_5 = null;
		        conn_tPostgresqlInput_5 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_5 = conn_tPostgresqlInput_5.createStatement();
                stmt_tPostgresqlInput_5.setFetchSize(1000);

		    String dbquery_tPostgresqlInput_5 = "SELECT \n	act_tbl.act_id,\n	(act_vrsn_tbl.crt_utc) as crt_utc,\n	(act_vrsn_tbl.obslt_utc) as obslt_utc,\n	(act_vrsn_tbl"
+".act_utc) as act_utc,\n	(typ_cd.mnemonic) as type_cs,\n	(qty_obs_tbl.qty) as qty, \n	(uom_cd.mnemonic) as uom,\n	(int_cd"
+".mnemonic) as intr,\n	(recordtarget.ent_id) as recordtarget_id,\n	(author.ent_id) as author_id,\n	(location.ent_id) as l"
+"ocation_id,\n	(encounter.src_act_id) as enc_id\nFROM \n	qty_obs_tbl \n	INNER JOIN obs_tbl USING (act_vrsn_id)\n	INNER JO"
+"IN act_vrsn_tbl USING (act_vrsn_id)\n	INNER JOIN act_tbl AS act_tbl ON (act_tbl.act_id = act_vrsn_tbl.act_id and cls_cd_"
+"id = '28d022c6-8a8b-47c4-9e6a-2bc67308739e')\n	INNER JOIN act_ptcpt_part_rct_tbl AS RecordTarget ON (RecordTarget.act_id"
+" = act_tbl.act_id AND RecordTarget.obslt_vrsn_seq_id IS NULL)\n	LEFT JOIN act_ptcpt_part_auth_tbl AS Author ON (Author.a"
+"ct_id = act_tbl.act_id AND Author.rol_cd_id = 'f0cb3faf-435d-4704-9217-b884f757bc14' AND Author.obslt_vrsn_seq_id IS NUL"
+"L)\n	LEFT JOIN act_ptcpt_part_loc_tbl AS Location ON (Location.act_id = act_tbl.act_id AND Location.rol_cd_id = '6184855"
+"7-d78d-40e5-954f-0b9c97307a04' AND Location.obslt_vrsn_seq_id IS NULL)\n	INNER JOIN act_rel_tbl Encounter ON (Encounter."
+"trg_act_id = act_tbl.act_id AND Encounter.rel_typ_cd_id = '78b9540f-438b-4b6f-8d83-aaf4979dbc64' AND Encounter.obslt_vrs"
+"n_seq_id IS NULL)\n	INNER JOIN cd_vrsn_tbl typ_cd ON (typ_cd_id = typ_cd.cd_id AND typ_cd.obslt_utc IS NULL)\n	INNER JOI"
+"N cd_vrsn_tbl uom_cd ON (uom_cd_id = uom_cd.cd_id AND uom_cd.obslt_utc IS NULL)\n	INNER JOIN cd_vrsn_tbl int_cd ON (int_"
+"cd_id = int_cd.cd_id AND int_cd.obslt_utc IS NULL)\n	WHERE act_vrsn_tbl.STS_CD_ID = 'afc33800-8225-4061-b168-bacc09cdbae"
+"3'\n	AND typ_cd_id = 'a261f8cd-69b0-49aa-91f4-e6d3e5c612ed'\n	AND act_vrsn_tbl.obslt_utc IS NULL";
			

            	globalMap.put("tPostgresqlInput_5_QUERY",dbquery_tPostgresqlInput_5);
		    java.sql.ResultSet rs_tPostgresqlInput_5 = null;

		    try {
		    	rs_tPostgresqlInput_5 = stmt_tPostgresqlInput_5.executeQuery(dbquery_tPostgresqlInput_5);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_5 = rs_tPostgresqlInput_5.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_5 = rsmd_tPostgresqlInput_5.getColumnCount();

		    String tmpContent_tPostgresqlInput_5 = null;
		    
		    
		    while (rs_tPostgresqlInput_5.next()) {
		        nb_line_tPostgresqlInput_5++;
		        
							if(colQtyInRs_tPostgresqlInput_5 < 1) {
								row5.act_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_5.getObject(1) != null) {
                row5.act_id = rs_tPostgresqlInput_5.getObject(1);
            } else {
                    row5.act_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 2) {
								row5.crt_utc = null;
							} else {
										
			row5.crt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_5, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 3) {
								row5.obslt_utc = null;
							} else {
										
			row5.obslt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_5, 3);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 4) {
								row5.act_utc = null;
							} else {
										
			row5.act_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_5, 4);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 5) {
								row5.type_cs = null;
							} else {
	                         		
        	row5.type_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 5, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 6) {
								row5.qty = null;
							} else {
		                          
            if(rs_tPostgresqlInput_5.getObject(6) != null) {
                row5.qty = rs_tPostgresqlInput_5.getBigDecimal(6);
            } else {
                    row5.qty = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 7) {
								row5.uom = null;
							} else {
	                         		
        	row5.uom = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 7, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 8) {
								row5.intr = null;
							} else {
	                         		
        	row5.intr = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 8, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 9) {
								row5.recordtarget_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_5.getObject(9) != null) {
                row5.recordtarget_id = rs_tPostgresqlInput_5.getObject(9);
            } else {
                    row5.recordtarget_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 10) {
								row5.author_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_5.getObject(10) != null) {
                row5.author_id = rs_tPostgresqlInput_5.getObject(10);
            } else {
                    row5.author_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 11) {
								row5.location_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_5.getObject(11) != null) {
                row5.location_id = rs_tPostgresqlInput_5.getObject(11);
            } else {
                    row5.location_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 12) {
								row5.enc_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_5.getObject(12) != null) {
                row5.enc_id = rs_tPostgresqlInput_5.getObject(12);
            } else {
                    row5.enc_id = null;
            }
		                    }
					


 



/**
 * [tPostgresqlInput_5 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_5 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 


	tos_count_tPostgresqlInput_5++;

/**
 * [tPostgresqlInput_5 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 



/**
 * [tPostgresqlInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow6 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow6 = true;
			           		  	} // G 21
                    		  	
                    		

							row6Struct row6 = null;
                    		  	 
							

								while ((tHash_Lookup_row6 != null && tHash_Lookup_row6.hasNext()) || forceLooprow6) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row6'
									
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								
								if(!forceLooprow6) { // G 46
								
							
								 
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow6 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

outputObservations = null;


// # Output table : 'outputObservations'
outputObservations_tmp.act_id = row5.act_id;
outputObservations_tmp.enc_id = row5.enc_id ;
outputObservations_tmp.crt_etl_id = row6.etl_id ;
outputObservations_tmp.upd_etl_id = null;
outputObservations_tmp.crt_utc = row5.crt_utc;
outputObservations_tmp.upd_utc = null;
outputObservations_tmp.obslt_utc = row5.obslt_utc;
outputObservations_tmp.act_utc = row5.act_utc;
outputObservations_tmp.typ_cs = row5.type_cs ;
outputObservations_tmp.int_cs = row5.intr ;
outputObservations_tmp.usr_id = row5.author_id ;
outputObservations_tmp.qty = row5.qty;
outputObservations_tmp.uom = row5.uom;
outputObservations_tmp.pat_id = row5.recordtarget_id ;
outputObservations_tmp.fac_id = row5.location_id ;
outputObservations = outputObservations_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "outputObservations"
if(outputObservations != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

			//outputObservations
			//outputObservations


			
				if(execStat){
					runStat.updateStatOnConnection("outputObservations"+iterateId,1, 1);
				} 
			

		
row12 = null;			
finder_tUniqRow_2.act_id = outputObservations.act_id;	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
new_tUniqRow_2.act_id = outputObservations.act_id;
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row12 == null){ 
	
	row12 = new row12Struct();
}row12.act_id = outputObservations.act_id;			row12.enc_id = outputObservations.enc_id;			row12.crt_etl_id = outputObservations.crt_etl_id;			row12.upd_etl_id = outputObservations.upd_etl_id;			row12.crt_utc = outputObservations.crt_utc;			row12.upd_utc = outputObservations.upd_utc;			row12.obslt_utc = outputObservations.obslt_utc;			row12.act_utc = outputObservations.act_utc;			row12.typ_cs = outputObservations.typ_cs;			row12.int_cs = outputObservations.int_cs;			row12.usr_id = outputObservations.usr_id;			row12.qty = outputObservations.qty;			row12.uom = outputObservations.uom;			row12.pat_id = outputObservations.pat_id;			row12.fac_id = outputObservations.fac_id;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row12"
if(row12 != null) { 



	
	/**
	 * [tPostgresqlOutput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_3 = false;
                    if(row12.act_id == null) {
pstmt_tPostgresqlOutput_3.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(1, row12.act_id, java.sql.Types.OTHER);
}

                    if(row12.enc_id == null) {
pstmt_tPostgresqlOutput_3.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(2, row12.enc_id, java.sql.Types.OTHER);
}

                    if(row12.crt_etl_id == null) {
pstmt_tPostgresqlOutput_3.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(3, row12.crt_etl_id, java.sql.Types.OTHER);
}

                    if(row12.upd_etl_id == null) {
pstmt_tPostgresqlOutput_3.setNull(4, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(4, row12.upd_etl_id, java.sql.Types.OTHER);
}

                    if(row12.crt_utc != null) {
pstmt_tPostgresqlOutput_3.setTimestamp(5, new java.sql.Timestamp(row12.crt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_3.setNull(5, java.sql.Types.TIMESTAMP);
}

                    if(row12.upd_utc != null) {
pstmt_tPostgresqlOutput_3.setTimestamp(6, new java.sql.Timestamp(row12.upd_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_3.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(row12.obslt_utc != null) {
pstmt_tPostgresqlOutput_3.setTimestamp(7, new java.sql.Timestamp(row12.obslt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_3.setNull(7, java.sql.Types.TIMESTAMP);
}

                    if(row12.act_utc != null) {
pstmt_tPostgresqlOutput_3.setTimestamp(8, new java.sql.Timestamp(row12.act_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_3.setNull(8, java.sql.Types.TIMESTAMP);
}

                    if(row12.typ_cs == null) {
pstmt_tPostgresqlOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_3.setString(9, row12.typ_cs);
}

                    if(row12.int_cs == null) {
pstmt_tPostgresqlOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_3.setString(10, row12.int_cs);
}

                    if(row12.usr_id == null) {
pstmt_tPostgresqlOutput_3.setNull(11, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(11, row12.usr_id, java.sql.Types.OTHER);
}

                    pstmt_tPostgresqlOutput_3.setBigDecimal(12, row12.qty);

                    if(row12.uom == null) {
pstmt_tPostgresqlOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_3.setString(13, row12.uom);
}

                    if(row12.pat_id == null) {
pstmt_tPostgresqlOutput_3.setNull(14, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(14, row12.pat_id, java.sql.Types.OTHER);
}

                    if(row12.fac_id == null) {
pstmt_tPostgresqlOutput_3.setNull(15, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(15, row12.fac_id, java.sql.Types.OTHER);
}

			
    		pstmt_tPostgresqlOutput_3.addBatch();
    		nb_line_tPostgresqlOutput_3++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_3++;
    		  
            if(!whetherReject_tPostgresqlOutput_3) {
            }
    			if ((batchSize_tPostgresqlOutput_3 > 0) && (batchSize_tPostgresqlOutput_3 <= batchSizeCounter_tPostgresqlOutput_3)) {
                try {
						int countSum_tPostgresqlOutput_3 = 0;
						    
						for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
				    	
				    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_3){
				    	java.sql.SQLException ne_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getNextException(),sqle_tPostgresqlOutput_3=null;
				    	String errormessage_tPostgresqlOutput_3;
						if (ne_tPostgresqlOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_3 = new java.sql.SQLException(e_tPostgresqlOutput_3.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_3.getMessage(), ne_tPostgresqlOutput_3.getSQLState(), ne_tPostgresqlOutput_3.getErrorCode(), ne_tPostgresqlOutput_3);
							errormessage_tPostgresqlOutput_3 = sqle_tPostgresqlOutput_3.getMessage();
						}else{
							errormessage_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_3 = 0;
						for(int countEach_tPostgresqlOutput_3: e_tPostgresqlOutput_3.getUpdateCounts()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
						
				    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_3++;

/**
 * [tPostgresqlOutput_3 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

 



/**
 * [tPostgresqlOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

 



/**
 * [tPostgresqlOutput_3 process_data_end ] stop
 */

} // End of branch "row12"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "outputObservations"



	
		} // close loop of lookup 'row6' // G_TM_M_043
	
	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 



/**
 * [tPostgresqlInput_5 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_5 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

	}
}finally{
	if (rs_tPostgresqlInput_5 != null) {
		rs_tPostgresqlInput_5.close();
	}
	if (stmt_tPostgresqlInput_5 != null) {
		stmt_tPostgresqlInput_5.close();
	}
}
globalMap.put("tPostgresqlInput_5_NB_LINE",nb_line_tPostgresqlInput_5);
 

ok_Hash.put("tPostgresqlInput_5", true);
end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());




/**
 * [tPostgresqlInput_5 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputObservations"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



	    try {
				int countSum_tPostgresqlOutput_3 = 0;
				if (pstmt_tPostgresqlOutput_3 != null && batchSizeCounter_tPostgresqlOutput_3 > 0) {
						
					for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
						countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_3){
	    	java.sql.SQLException ne_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getNextException(),sqle_tPostgresqlOutput_3=null;
	    	String errormessage_tPostgresqlOutput_3;
			if (ne_tPostgresqlOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_3 = new java.sql.SQLException(e_tPostgresqlOutput_3.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_3.getMessage(), ne_tPostgresqlOutput_3.getSQLState(), ne_tPostgresqlOutput_3.getErrorCode(), ne_tPostgresqlOutput_3);
				errormessage_tPostgresqlOutput_3 = sqle_tPostgresqlOutput_3.getMessage();
			}else{
				errormessage_tPostgresqlOutput_3 = e_tPostgresqlOutput_3.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_3 = 0;
			for(int countEach_tPostgresqlOutput_3: e_tPostgresqlOutput_3.getUpdateCounts()) {
				countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
			}
			
	    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_3);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_3 != null) {
        		
            pstmt_tPostgresqlOutput_3.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_3");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_3", true);

	nb_line_deleted_tPostgresqlOutput_3=nb_line_deleted_tPostgresqlOutput_3+ deletedCount_tPostgresqlOutput_3;
	nb_line_update_tPostgresqlOutput_3=nb_line_update_tPostgresqlOutput_3 + updatedCount_tPostgresqlOutput_3;
	nb_line_inserted_tPostgresqlOutput_3=nb_line_inserted_tPostgresqlOutput_3 + insertedCount_tPostgresqlOutput_3;
	nb_line_rejected_tPostgresqlOutput_3=nb_line_rejected_tPostgresqlOutput_3 + rejectedCount_tPostgresqlOutput_3;
	
        globalMap.put("tPostgresqlOutput_3_NB_LINE",nb_line_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_3);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_3", true);
end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_3 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk20", 0, "ok");
								} 
							
							tWarn_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
				try{
					
	
	/**
	 * [tPostgresqlInput_5 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 



/**
 * [tPostgresqlInput_5 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_3 = null;
                if ((pstmtToClose_tPostgresqlOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_3")) != null) {
                    pstmtToClose_tPostgresqlOutput_3.close();
                }
    }
 



/**
 * [tPostgresqlOutput_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_7", false);
		start_Hash.put("tWarn_7", System.currentTimeMillis());
		
	
	currentComponent="tWarn_7";

	
		int tos_count_tWarn_7 = 0;
		

 



/**
 * [tWarn_7 begin ] stop
 */
	
	/**
	 * [tWarn_7 main ] start
	 */

	

	
	
	currentComponent="tWarn_7";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_7", "", Thread.currentThread().getId() + "", "INFO","","Starting Problems","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_7", 3, "Starting Problems", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_7_WARN_MESSAGES", "Starting Problems"); 
	globalMap.put("tWarn_7_WARN_PRIORITY", 3);
	globalMap.put("tWarn_7_WARN_CODE", 42);
	
} catch (Exception e_tWarn_7) {
	logIgnoredError(String.format("tWarn_7 - tWarn failed to log message due to internal error: %s", e_tWarn_7), e_tWarn_7);
}


 


	tos_count_tWarn_7++;

/**
 * [tWarn_7 main ] stop
 */
	
	/**
	 * [tWarn_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_7";

	

 



/**
 * [tWarn_7 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_7";

	

 



/**
 * [tWarn_7 process_data_end ] stop
 */
	
	/**
	 * [tWarn_7 end ] start
	 */

	

	
	
	currentComponent="tWarn_7";

	

 

ok_Hash.put("tWarn_7", true);
end_Hash.put("tWarn_7", System.currentTimeMillis());




/**
 * [tWarn_7 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tWarn_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk26", 0, "ok");
								} 
							
							tDBInput_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_7 finally ] start
	 */

	

	
	
	currentComponent="tWarn_7";

	

 



/**
 * [tWarn_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_7_SUBPROCESS_STATE", 1);
	}
	


public static class outputProblemsStruct implements routines.system.IPersistableRow<outputProblemsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public String typ_mnemonic;

				public String getTyp_mnemonic () {
					return this.typ_mnemonic;
				}
				
			    public String prob_mnemonic;

				public String getProb_mnemonic () {
					return this.prob_mnemonic;
				}
				
			    public String sev_mnemonic;

				public String getSev_mnemonic () {
					return this.sev_mnemonic;
				}
				
			    public boolean is_concern;

				public boolean getIs_concern () {
					return this.is_concern;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public Object pat_id;

				public Object getPat_id () {
					return this.pat_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.act_id == null) ? 0 : this.act_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputProblemsStruct other = (outputProblemsStruct) obj;
		
						if (this.act_id == null) {
							if (other.act_id != null)
								return false;
						
						} else if (!this.act_id.equals(other.act_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputProblemsStruct other) {

		other.act_id = this.act_id;
	            other.crt_utc = this.crt_utc;
	            other.act_utc = this.act_utc;
	            other.typ_mnemonic = this.typ_mnemonic;
	            other.prob_mnemonic = this.prob_mnemonic;
	            other.sev_mnemonic = this.sev_mnemonic;
	            other.is_concern = this.is_concern;
	            other.usr_id = this.usr_id;
	            other.fac_id = this.fac_id;
	            other.pat_id = this.pat_id;
	            other.crt_etl_id = this.crt_etl_id;
	            
	}

	public void copyKeysDataTo(outputProblemsStruct other) {

		other.act_id = this.act_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.act_utc = readDate(dis);
					
					this.typ_mnemonic = readString(dis);
					
					this.prob_mnemonic = readString(dis);
					
					this.sev_mnemonic = readString(dis);
					
			        this.is_concern = dis.readBoolean();
					
						this.usr_id = (Object) dis.readObject();
					
						this.fac_id = (Object) dis.readObject();
					
						this.pat_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// String
				
						writeString(this.typ_mnemonic,dos);
					
					// String
				
						writeString(this.prob_mnemonic,dos);
					
					// String
				
						writeString(this.sev_mnemonic,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.is_concern);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// Object
				
       			    	dos.writeObject(this.pat_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",typ_mnemonic="+typ_mnemonic);
		sb.append(",prob_mnemonic="+prob_mnemonic);
		sb.append(",sev_mnemonic="+sev_mnemonic);
		sb.append(",is_concern="+String.valueOf(is_concern));
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",fac_id="+String.valueOf(fac_id));
		sb.append(",pat_id="+String.valueOf(pat_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputProblemsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.act_id, other.act_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public String type_cs;

				public String getType_cs () {
					return this.type_cs;
				}
				
			    public String prob_mnemonic;

				public String getProb_mnemonic () {
					return this.prob_mnemonic;
				}
				
			    public String sev_mnemonic;

				public String getSev_mnemonic () {
					return this.sev_mnemonic;
				}
				
			    public Boolean is_concern;

				public Boolean getIs_concern () {
					return this.is_concern;
				}
				
			    public Object author_id;

				public Object getAuthor_id () {
					return this.author_id;
				}
				
			    public Object location_id;

				public Object getLocation_id () {
					return this.location_id;
				}
				
			    public Object recordtarget_id;

				public Object getRecordtarget_id () {
					return this.recordtarget_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.act_utc = readDate(dis);
					
					this.type_cs = readString(dis);
					
					this.prob_mnemonic = readString(dis);
					
					this.sev_mnemonic = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_concern = null;
           				} else {
           			    	this.is_concern = dis.readBoolean();
           				}
					
						this.author_id = (Object) dis.readObject();
					
						this.location_id = (Object) dis.readObject();
					
						this.recordtarget_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// String
				
						writeString(this.type_cs,dos);
					
					// String
				
						writeString(this.prob_mnemonic,dos);
					
					// String
				
						writeString(this.sev_mnemonic,dos);
					
					// Boolean
				
						if(this.is_concern == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_concern);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.author_id);
					
					// Object
				
       			    	dos.writeObject(this.location_id);
					
					// Object
				
       			    	dos.writeObject(this.recordtarget_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",type_cs="+type_cs);
		sb.append(",prob_mnemonic="+prob_mnemonic);
		sb.append(",sev_mnemonic="+sev_mnemonic);
		sb.append(",is_concern="+String.valueOf(is_concern));
		sb.append(",author_id="+String.valueOf(author_id));
		sb.append(",location_id="+String.valueOf(location_id));
		sb.append(",recordtarget_id="+String.valueOf(recordtarget_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_13Struct implements routines.system.IPersistableRow<after_tDBInput_13Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public String type_cs;

				public String getType_cs () {
					return this.type_cs;
				}
				
			    public String prob_mnemonic;

				public String getProb_mnemonic () {
					return this.prob_mnemonic;
				}
				
			    public String sev_mnemonic;

				public String getSev_mnemonic () {
					return this.sev_mnemonic;
				}
				
			    public Boolean is_concern;

				public Boolean getIs_concern () {
					return this.is_concern;
				}
				
			    public Object author_id;

				public Object getAuthor_id () {
					return this.author_id;
				}
				
			    public Object location_id;

				public Object getLocation_id () {
					return this.location_id;
				}
				
			    public Object recordtarget_id;

				public Object getRecordtarget_id () {
					return this.recordtarget_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.act_utc = readDate(dis);
					
					this.type_cs = readString(dis);
					
					this.prob_mnemonic = readString(dis);
					
					this.sev_mnemonic = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_concern = null;
           				} else {
           			    	this.is_concern = dis.readBoolean();
           				}
					
						this.author_id = (Object) dis.readObject();
					
						this.location_id = (Object) dis.readObject();
					
						this.recordtarget_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.act_utc,dos);
					
					// String
				
						writeString(this.type_cs,dos);
					
					// String
				
						writeString(this.prob_mnemonic,dos);
					
					// String
				
						writeString(this.sev_mnemonic,dos);
					
					// Boolean
				
						if(this.is_concern == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_concern);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.author_id);
					
					// Object
				
       			    	dos.writeObject(this.location_id);
					
					// Object
				
       			    	dos.writeObject(this.recordtarget_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",type_cs="+type_cs);
		sb.append(",prob_mnemonic="+prob_mnemonic);
		sb.append(",sev_mnemonic="+sev_mnemonic);
		sb.append(",is_concern="+String.valueOf(is_concern));
		sb.append(",author_id="+String.valueOf(author_id));
		sb.append(",location_id="+String.valueOf(location_id));
		sb.append(",recordtarget_id="+String.valueOf(recordtarget_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_14Process(globalMap);

		row29Struct row29 = new row29Struct();
outputProblemsStruct outputProblems = new outputProblemsStruct();





	
	/**
	 * [tDBOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_8", false);
		start_Hash.put("tDBOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputProblems" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_8 = 0;
		





String dbschema_tDBOutput_8 = null;
	dbschema_tDBOutput_8 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tDBOutput_8 = null;
if(dbschema_tDBOutput_8 == null || dbschema_tDBOutput_8.trim().length() == 0) {
	tableName_tDBOutput_8 = "cond_tbl";
} else {
	tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "\".\"" + "cond_tbl";
}

int nb_line_tDBOutput_8 = 0;
int nb_line_update_tDBOutput_8 = 0;
int nb_line_inserted_tDBOutput_8 = 0;
int nb_line_deleted_tDBOutput_8 = 0;
int nb_line_rejected_tDBOutput_8 = 0;

int deletedCount_tDBOutput_8=0;
int updatedCount_tDBOutput_8=0;
int insertedCount_tDBOutput_8=0;
int rejectedCount_tDBOutput_8=0;

boolean whetherReject_tDBOutput_8 = false;

java.sql.Connection conn_tDBOutput_8 = null;
String dbUser_tDBOutput_8 = null;

	conn_tDBOutput_8 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tDBOutput_8 = 10000;
   int batchSizeCounter_tDBOutput_8=0;

int count_tDBOutput_8=0;
	    String insert_tDBOutput_8 = "INSERT INTO \"" + tableName_tDBOutput_8 + "\" (\"act_id\",\"crt_utc\",\"act_utc\",\"typ_mnemonic\",\"prob_mnemonic\",\"sev_mnemonic\",\"is_concern\",\"usr_id\",\"fac_id\",\"pat_id\",\"crt_etl_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
	    resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);
	    

 



/**
 * [tDBOutput_8 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row29" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
					globalMap.get( "tHash_Lookup_row30" ))
					;					
					
	
		tHash_Lookup_row30.initGet();
	

row30Struct row30HashKey = new row30Struct();
row30Struct row30Default = new row30Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputProblemsStruct outputProblems_tmp = new outputProblemsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tDBInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_13", false);
		start_Hash.put("tDBInput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_13";

	
		int tos_count_tDBInput_13 = 0;
		
	
    
	
		    int nb_line_tDBInput_13 = 0;
		    java.sql.Connection conn_tDBInput_13 = null;
		        conn_tDBInput_13 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

		    String dbquery_tDBInput_13 = "\nWITH cte_Severity AS (\n	SELECT ACT_ID, SRC_ACT_ID, MNEMONIC \n	FROM CD_OBS_TBL \n	INNER JOIN OBS_TBL USING (ACT_VRSN"
+"_ID)\n	INNER JOIN ACT_VRSN_TBL USING (ACT_VRSN_ID)\n	INNER JOIN ACT_TBL USING (ACT_ID)\n	INNER JOIN CD_VRSN_TBL ON (VAL_"
+"CD_ID = CD_ID)\n	INNER JOIN ACT_REL_TBL ON (TRG_ACT_ID = ACT_ID AND rel_typ_cd_id = '78b9540f-438b-4b6f-8d83-aaf4979dbc6"
+"4')\n	WHERE TYP_CD_ID = '05012084-3351-4045-8390-fbcbd7ec1d19'\n)\nSELECT DISTINCT\n	ACT_TBL.ACT_ID,\n	FIRST(ACT_VRSN_TB"
+"L.CRT_UTC) AS CRT_UTC, \n	FIRST(ACT_VRSN_TBL.ACT_UTC) AS ACT_UTC,\n	FIRST(TYP_CD.MNEMONIC) AS TYPE_CS,\n	FIRST(VAL_CD.MN"
+"EMONIC) AS PROB_MNEMONIC,\n	FIRST(SEVERITY.MNEMONIC) AS SEV_MNEMONIC,\n	FIRST(ACT_VRSN_TBL.STS_CD_ID) = 'c8064cbd-fa06-4"
+"530-b430-1a52f1530c27' AS IS_CONCERN,\n	FIRST(Author.ent_id) AS Author_Id,\n	FIRST(Location.ent_id) AS Location_Id,\n	FI"
+"RST(RecordTarget.ent_id) AS RecordTarget_Id\nFROM CD_OBS_TBL \nINNER JOIN OBS_TBL USING (ACT_VRSN_ID)\nINNER JOIN ACT_VR"
+"SN_TBL USING (ACT_VRSN_ID)\nINNER JOIN ACT_TBL USING (ACT_ID)\nLEFT JOIN CD_VRSN_TBL VAL_CD ON (VAL_CD.CD_ID = VAL_CD_ID"
+" AND VAL_CD.OBSLT_UTC IS NULL)\nLEFT JOIN CD_VRSN_TBL TYP_CD ON (TYP_CD.CD_ID = TYP_CD_ID AND TYP_CD.OBSLT_UTC IS NULL)"
+"\nINNER JOIN act_ptcpt_tbl as RecordTarget ON (RecordTarget.act_id = act_tbl.act_id AND RecordTarget.rol_cd_id = '3f92dbe"
+"e-a65e-434f-98ce-841feeb02e3f' AND RecordTarget.obslt_vrsn_seq_id IS NULL)\nINNER JOIN act_ptcpt_tbl as Author ON (Autho"
+"r.act_id = act_tbl.act_id AND Author.rol_cd_id = 'f0cb3faf-435d-4704-9217-b884f757bc14' AND Author.obslt_vrsn_seq_id IS "
+"NULL)\nINNER JOIN act_ptcpt_tbl as Location ON (Location.act_id = act_tbl.act_id AND Location.rol_cd_id = '61848557-d78d"
+"-40e5-954f-0b9c97307a04' AND Location.obslt_vrsn_seq_id IS NULL)\nLEFT JOIN act_rel_tbl Encounter ON (Encounter.trg_act_"
+"id = act_tbl.act_id AND Encounter.rel_typ_cd_id = '78b9540f-438b-4b6f-8d83-aaf4979dbc64' AND Encounter.obslt_vrsn_seq_id"
+" IS NULL)\nLEFT JOIN cte_Severity AS Severity ON (Severity.src_act_id = act_tbl.act_id)\nWHERE \n	TYP_CD_ID IN ('d5e0a5b"
+"e-d227-413a-a752-b7d79d7d4ede', '260ffe90-7882-4b38-a7af-d2110e91e752')\n	AND ACT_VRSN_TBL.STS_CD_ID <> 'CD4AA3C4-02D5-4"
+"CC9-9088-EF8F31E321C5'\n	AND ACT_VRSN_TBL.OBSLT_UTC IS NULL\n	GROUP BY act_tbl.act_id";
			

            	globalMap.put("tDBInput_13_QUERY",dbquery_tDBInput_13);
		    java.sql.ResultSet rs_tDBInput_13 = null;

		    try {
		    	rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
		    	int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

		    String tmpContent_tDBInput_13 = null;
		    
		    
		    while (rs_tDBInput_13.next()) {
		        nb_line_tDBInput_13++;
		        
							if(colQtyInRs_tDBInput_13 < 1) {
								row29.act_id = null;
							} else {
		                          
            if(rs_tDBInput_13.getObject(1) != null) {
                row29.act_id = rs_tDBInput_13.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 2) {
								row29.crt_utc = null;
							} else {
										
			row29.crt_utc = routines.system.JDBCUtil.getDate(rs_tDBInput_13, 2);
		                    }
							if(colQtyInRs_tDBInput_13 < 3) {
								row29.act_utc = null;
							} else {
										
			row29.act_utc = routines.system.JDBCUtil.getDate(rs_tDBInput_13, 3);
		                    }
							if(colQtyInRs_tDBInput_13 < 4) {
								row29.type_cs = null;
							} else {
	                         		
        	row29.type_cs = routines.system.JDBCUtil.getString(rs_tDBInput_13, 4, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 5) {
								row29.prob_mnemonic = null;
							} else {
	                         		
        	row29.prob_mnemonic = routines.system.JDBCUtil.getString(rs_tDBInput_13, 5, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 6) {
								row29.sev_mnemonic = null;
							} else {
	                         		
        	row29.sev_mnemonic = routines.system.JDBCUtil.getString(rs_tDBInput_13, 6, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 7) {
								row29.is_concern = null;
							} else {
	                         		
            if(rs_tDBInput_13.getObject(7) != null) {
                row29.is_concern = rs_tDBInput_13.getBoolean(7);
            } else {
                    row29.is_concern = null;
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 8) {
								row29.author_id = null;
							} else {
		                          
            if(rs_tDBInput_13.getObject(8) != null) {
                row29.author_id = rs_tDBInput_13.getObject(8);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 9) {
								row29.location_id = null;
							} else {
		                          
            if(rs_tDBInput_13.getObject(9) != null) {
                row29.location_id = rs_tDBInput_13.getObject(9);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 10) {
								row29.recordtarget_id = null;
							} else {
		                          
            if(rs_tDBInput_13.getObject(10) != null) {
                row29.recordtarget_id = rs_tDBInput_13.getObject(10);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_13 begin ] stop
 */
	
	/**
	 * [tDBInput_13 main ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 


	tos_count_tDBInput_13++;

/**
 * [tDBInput_13 main ] stop
 */
	
	/**
	 * [tDBInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

			//row29
			//row29


			
				if(execStat){
					runStat.updateStatOnConnection("row29"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row30" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow30 = false;
       		  	    	
       		  	    	
 							row30Struct row30ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_12) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row30.lookup( row30HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row30.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow30 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow30 = true;
			           		  	} // G 21
                    		  	
                    		

							row30Struct row30 = null;
                    		  	 
							

								while ((tHash_Lookup_row30 != null && tHash_Lookup_row30.hasNext()) || forceLooprow30) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row30'
									
                    		  	 
							   
                    		  	 
	       		  	    	row30Struct fromLookup_row30 = null;
							row30 = row30Default;
										 
							
								
								if(!forceLooprow30) { // G 46
								
							
								 
							
								
								fromLookup_row30 = tHash_Lookup_row30.next();

							

							if(fromLookup_row30 != null) {
								row30 = fromLookup_row30;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow30 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

outputProblems = null;


// # Output table : 'outputProblems'
outputProblems_tmp.act_id = row29.act_id;
outputProblems_tmp.crt_utc = row29.crt_utc;
outputProblems_tmp.act_utc = row29.act_utc;
outputProblems_tmp.typ_mnemonic = row29.type_cs ;
outputProblems_tmp.prob_mnemonic = row29.prob_mnemonic;
outputProblems_tmp.sev_mnemonic = row29.sev_mnemonic;
outputProblems_tmp.is_concern = row29.is_concern;
outputProblems_tmp.usr_id = row29.author_id ;
outputProblems_tmp.fac_id = row29.location_id ;
outputProblems_tmp.pat_id = row29.recordtarget_id ;
outputProblems_tmp.crt_etl_id = row30.etl_id ;
outputProblems = outputProblems_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "outputProblems"
if(outputProblems != null) { 



	
	/**
	 * [tDBOutput_8 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

			//outputProblems
			//outputProblems


			
				if(execStat){
					runStat.updateStatOnConnection("outputProblems"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_8 = false;
                    if(outputProblems.act_id == null) {
pstmt_tDBOutput_8.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_8.setObject(1, outputProblems.act_id, java.sql.Types.OTHER);
}

                    if(outputProblems.crt_utc != null) {
pstmt_tDBOutput_8.setTimestamp(2, new java.sql.Timestamp(outputProblems.crt_utc.getTime()));
} else {
pstmt_tDBOutput_8.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(outputProblems.act_utc != null) {
pstmt_tDBOutput_8.setTimestamp(3, new java.sql.Timestamp(outputProblems.act_utc.getTime()));
} else {
pstmt_tDBOutput_8.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(outputProblems.typ_mnemonic == null) {
pstmt_tDBOutput_8.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(4, outputProblems.typ_mnemonic);
}

                    if(outputProblems.prob_mnemonic == null) {
pstmt_tDBOutput_8.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(5, outputProblems.prob_mnemonic);
}

                    if(outputProblems.sev_mnemonic == null) {
pstmt_tDBOutput_8.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(6, outputProblems.sev_mnemonic);
}

                    pstmt_tDBOutput_8.setBoolean(7, outputProblems.is_concern);

                    if(outputProblems.usr_id == null) {
pstmt_tDBOutput_8.setNull(8, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_8.setObject(8, outputProblems.usr_id, java.sql.Types.OTHER);
}

                    if(outputProblems.fac_id == null) {
pstmt_tDBOutput_8.setNull(9, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_8.setObject(9, outputProblems.fac_id, java.sql.Types.OTHER);
}

                    if(outputProblems.pat_id == null) {
pstmt_tDBOutput_8.setNull(10, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_8.setObject(10, outputProblems.pat_id, java.sql.Types.OTHER);
}

                    if(outputProblems.crt_etl_id == null) {
pstmt_tDBOutput_8.setNull(11, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_8.setObject(11, outputProblems.crt_etl_id, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_8.addBatch();
    		nb_line_tDBOutput_8++;
    		  
    		  batchSizeCounter_tDBOutput_8++;
    		  
    			if ((batchSize_tDBOutput_8 > 0) && (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8)) {
                try {
						int countSum_tDBOutput_8 = 0;
						    
						for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}
				    	
				    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
				    	
            	    	batchSizeCounter_tDBOutput_8 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_8){
				    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
				    	String errormessage_tDBOutput_8;
						if (ne_tDBOutput_8 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
							errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
						}else{
							errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
						}
				    	
				    	int countSum_tDBOutput_8 = 0;
						for(int countEach_tDBOutput_8: e_tDBOutput_8.getUpdateCounts()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}
						
				    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
				    	
				    	System.err.println(errormessage_tDBOutput_8);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_8++;

/**
 * [tDBOutput_8 main ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_end ] stop
 */

} // End of branch "outputProblems"



	
		} // close loop of lookup 'row30' // G_TM_M_043
	
	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_13 end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

	}
}finally{
	if (rs_tDBInput_13 != null) {
		rs_tDBInput_13.close();
	}
	if (stmt_tDBInput_13 != null) {
		stmt_tDBInput_13.close();
	}
}
globalMap.put("tDBInput_13_NB_LINE",nb_line_tDBInput_13);
 

ok_Hash.put("tDBInput_13", true);
end_Hash.put("tDBInput_13", System.currentTimeMillis());




/**
 * [tDBInput_13 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row30 != null) {
						tHash_Lookup_row30.endGet();
					}
					globalMap.remove( "tHash_Lookup_row30" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row29"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tDBOutput_8 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



	    try {
				int countSum_tDBOutput_8 = 0;
				if (pstmt_tDBOutput_8 != null && batchSizeCounter_tDBOutput_8 > 0) {
						
					for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_8){
	    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
	    	String errormessage_tDBOutput_8;
			if (ne_tDBOutput_8 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
				errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
			}else{
				errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
			}
	    	
	    	int countSum_tDBOutput_8 = 0;
			for(int countEach_tDBOutput_8: e_tDBOutput_8.getUpdateCounts()) {
				countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
			}
			
	    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
	    	
	    	System.err.println(errormessage_tDBOutput_8);
	    	
		}
	    
        if(pstmt_tDBOutput_8 != null) {
        		
            pstmt_tDBOutput_8.close();
            resourceMap.remove("pstmt_tDBOutput_8");
        }
    resourceMap.put("statementClosed_tDBOutput_8", true);

	nb_line_deleted_tDBOutput_8=nb_line_deleted_tDBOutput_8+ deletedCount_tDBOutput_8;
	nb_line_update_tDBOutput_8=nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
	nb_line_inserted_tDBOutput_8=nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
	nb_line_rejected_tDBOutput_8=nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;
	
        globalMap.put("tDBOutput_8_NB_LINE",nb_line_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_UPDATED",nb_line_update_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_DELETED",nb_line_deleted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputProblems"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_8", true);
end_Hash.put("tDBOutput_8", System.currentTimeMillis());




/**
 * [tDBOutput_8 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_13:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk21", 0, "ok");
								} 
							
							tWarn_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_12"
					     			globalMap.remove("tHash_Lookup_row30"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tDBOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



    if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
                if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_8")) != null) {
                    pstmtToClose_tDBOutput_8.close();
                }
    }
 



/**
 * [tDBOutput_8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_5", false);
		start_Hash.put("tWarn_5", System.currentTimeMillis());
		
	
	currentComponent="tWarn_5";

	
		int tos_count_tWarn_5 = 0;
		

 



/**
 * [tWarn_5 begin ] stop
 */
	
	/**
	 * [tWarn_5 main ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_5", "", Thread.currentThread().getId() + "", "INFO","","Starting Extensions","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_5", 3, "Starting Extensions", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_5_WARN_MESSAGES", "Starting Extensions"); 
	globalMap.put("tWarn_5_WARN_PRIORITY", 3);
	globalMap.put("tWarn_5_WARN_CODE", 42);
	
} catch (Exception e_tWarn_5) {
	logIgnoredError(String.format("tWarn_5 - tWarn failed to log message due to internal error: %s", e_tWarn_5), e_tWarn_5);
}


 


	tos_count_tWarn_5++;

/**
 * [tWarn_5 main ] stop
 */
	
	/**
	 * [tWarn_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 process_data_end ] stop
 */
	
	/**
	 * [tWarn_5 end ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 

ok_Hash.put("tWarn_5", true);
end_Hash.put("tWarn_5", System.currentTimeMillis());




/**
 * [tWarn_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tWarn_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_5 finally ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_5_SUBPROCESS_STATE", 1);
	}
	


public static class outputExtensionMapStruct implements routines.system.IPersistableRow<outputExtensionMapStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object act_ext_id;

				public Object getAct_ext_id () {
					return this.act_ext_id;
				}
				
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public String ext_typ;

				public String getExt_typ () {
					return this.ext_typ;
				}
				
			    public String ext_value;

				public String getExt_value () {
					return this.ext_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.act_ext_id == null) ? 0 : this.act_ext_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputExtensionMapStruct other = (outputExtensionMapStruct) obj;
		
						if (this.act_ext_id == null) {
							if (other.act_ext_id != null)
								return false;
						
						} else if (!this.act_ext_id.equals(other.act_ext_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputExtensionMapStruct other) {

		other.act_ext_id = this.act_ext_id;
	            other.act_id = this.act_id;
	            other.ext_typ = this.ext_typ;
	            other.ext_value = this.ext_value;
	            
	}

	public void copyKeysDataTo(outputExtensionMapStruct other) {

		other.act_ext_id = this.act_ext_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_ext_id = (Object) dis.readObject();
					
						this.act_id = (Object) dis.readObject();
					
					this.ext_typ = readString(dis);
					
					this.ext_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_ext_id);
					
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// String
				
						writeString(this.ext_typ,dos);
					
					// String
				
						writeString(this.ext_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_ext_id="+String.valueOf(act_ext_id));
		sb.append(",act_id="+String.valueOf(act_id));
		sb.append(",ext_typ="+ext_typ);
		sb.append(",ext_value="+ext_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputExtensionMapStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.act_ext_id, other.act_ext_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public String ext_name;

				public String getExt_name () {
					return this.ext_name;
				}
				
			    public String ext_disp;

				public String getExt_disp () {
					return this.ext_disp;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.ext_name = readString(dis);
					
					this.ext_disp = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// String
				
						writeString(this.ext_name,dos);
					
					// String
				
						writeString(this.ext_disp,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",ext_name="+ext_name);
		sb.append(",ext_disp="+ext_disp);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();
outputExtensionMapStruct outputExtensionMap = new outputExtensionMapStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputExtensionMap" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = "act_ext_tbl";
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + "act_ext_tbl";
}

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
            int rsTruncCountNumber_tDBOutput_2 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_2 = stmtTruncCount_tDBOutput_2.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_2 + "\"")) {
                    if(rsTruncCount_tDBOutput_2.next()) {
                        rsTruncCountNumber_tDBOutput_2 = rsTruncCount_tDBOutput_2.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                stmtTrunc_tDBOutput_2.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_2 + "\"");
                deletedCount_tDBOutput_2 += rsTruncCountNumber_tDBOutput_2;
            }
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"act_ext_id\",\"act_id\",\"ext_typ\",\"ext_value\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row15" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputExtensionMapStruct outputExtensionMap_tmp = new outputExtensionMapStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
		        conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select act_id, ext_name, ext_disp\nfrom \n	act_ext_tbl \n	inner join ext_typ_tbl using (ext_typ_id)\nwhere ext_disp is "
+"not null\nand obslt_vrsn_seq_id is null";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row15.act_id = null;
							} else {
		                          
            if(rs_tDBInput_2.getObject(1) != null) {
                row15.act_id = rs_tDBInput_2.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row15.ext_name = null;
							} else {
	                         		
        	row15.ext_name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row15.ext_disp = null;
							} else {
	                         		
        	row15.ext_disp = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

			//row15
			//row15


			
				if(execStat){
					runStat.updateStatOnConnection("row15"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

outputExtensionMap = null;


// # Output table : 'outputExtensionMap'
outputExtensionMap_tmp.act_ext_id = java.util.UUID.randomUUID().toString() ;
outputExtensionMap_tmp.act_id = row15.act_id;
outputExtensionMap_tmp.ext_typ = row15.ext_name ;
outputExtensionMap_tmp.ext_value = row15.ext_disp ;
outputExtensionMap = outputExtensionMap_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "outputExtensionMap"
if(outputExtensionMap != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

			//outputExtensionMap
			//outputExtensionMap


			
				if(execStat){
					runStat.updateStatOnConnection("outputExtensionMap"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_2 = false;
                    if(outputExtensionMap.act_ext_id == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_2.setObject(1, outputExtensionMap.act_ext_id, java.sql.Types.OTHER);
}

                    if(outputExtensionMap.act_id == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_2.setObject(2, outputExtensionMap.act_id, java.sql.Types.OTHER);
}

                    if(outputExtensionMap.ext_typ == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, outputExtensionMap.ext_typ);
}

                    if(outputExtensionMap.ext_value == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, outputExtensionMap.ext_value);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
            if(!whetherReject_tDBOutput_2) {
            }
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    		if (ne_tDBOutput_2 != null) {
				    			throw(sqle_tDBOutput_2);
				    		}else{
				            	throw(e_tDBOutput_2);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "outputExtensionMap"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row15"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    		if (ne_tDBOutput_2 != null) {
	    			throw(sqle_tDBOutput_2);
	    		}else{
	            	throw(e_tDBOutput_2);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputExtensionMap"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tPostgresqlInput_14Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class outputTagsStruct implements routines.system.IPersistableRow<outputTagsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public String tag_name;

				public String getTag_name () {
					return this.tag_name;
				}
				
			    public String tag_value;

				public String getTag_value () {
					return this.tag_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.act_id == null) ? 0 : this.act_id.hashCode());
					
						result = prime * result + ((this.tag_name == null) ? 0 : this.tag_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputTagsStruct other = (outputTagsStruct) obj;
		
						if (this.act_id == null) {
							if (other.act_id != null)
								return false;
						
						} else if (!this.act_id.equals(other.act_id))
						
							return false;
					
						if (this.tag_name == null) {
							if (other.tag_name != null)
								return false;
						
						} else if (!this.tag_name.equals(other.tag_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputTagsStruct other) {

		other.act_id = this.act_id;
	            other.tag_name = this.tag_name;
	            other.tag_value = this.tag_value;
	            
	}

	public void copyKeysDataTo(outputTagsStruct other) {

		other.act_id = this.act_id;
	            	other.tag_name = this.tag_name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.tag_name = readString(dis);
					
					this.tag_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// String
				
						writeString(this.tag_name,dos);
					
					// String
				
						writeString(this.tag_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",tag_name="+tag_name);
		sb.append(",tag_value="+tag_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputTagsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.act_id, other.act_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.tag_name, other.tag_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public String tag_name;

				public String getTag_name () {
					return this.tag_name;
				}
				
			    public String tag_value;

				public String getTag_value () {
					return this.tag_value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
					this.tag_name = readString(dis);
					
					this.tag_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// String
				
						writeString(this.tag_name,dos);
					
					// String
				
						writeString(this.tag_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",tag_name="+tag_name);
		sb.append(",tag_value="+tag_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
outputTagsStruct outputTags = new outputTagsStruct();





	
	/**
	 * [tPostgresqlOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_7", false);
		start_Hash.put("tPostgresqlOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputTags" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_7 = 0;
		





String dbschema_tPostgresqlOutput_7 = null;
	dbschema_tPostgresqlOutput_7 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_7 = null;
if(dbschema_tPostgresqlOutput_7 == null || dbschema_tPostgresqlOutput_7.trim().length() == 0) {
	tableName_tPostgresqlOutput_7 = "act_tag_tbl";
} else {
	tableName_tPostgresqlOutput_7 = dbschema_tPostgresqlOutput_7 + "\".\"" + "act_tag_tbl";
}

int nb_line_tPostgresqlOutput_7 = 0;
int nb_line_update_tPostgresqlOutput_7 = 0;
int nb_line_inserted_tPostgresqlOutput_7 = 0;
int nb_line_deleted_tPostgresqlOutput_7 = 0;
int nb_line_rejected_tPostgresqlOutput_7 = 0;

int deletedCount_tPostgresqlOutput_7=0;
int updatedCount_tPostgresqlOutput_7=0;
int insertedCount_tPostgresqlOutput_7=0;
int rejectedCount_tPostgresqlOutput_7=0;

boolean whetherReject_tPostgresqlOutput_7 = false;

java.sql.Connection conn_tPostgresqlOutput_7 = null;
String dbUser_tPostgresqlOutput_7 = null;

	conn_tPostgresqlOutput_7 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_7 = 10000;
   int batchSizeCounter_tPostgresqlOutput_7=0;

int count_tPostgresqlOutput_7=0;
            int rsTruncCountNumber_tPostgresqlOutput_7 = 0;
            try(java.sql.Statement stmtTruncCount_tPostgresqlOutput_7 = conn_tPostgresqlOutput_7.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tPostgresqlOutput_7 = stmtTruncCount_tPostgresqlOutput_7.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tPostgresqlOutput_7 + "\"")) {
                    if(rsTruncCount_tPostgresqlOutput_7.next()) {
                        rsTruncCountNumber_tPostgresqlOutput_7 = rsTruncCount_tPostgresqlOutput_7.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tPostgresqlOutput_7 = conn_tPostgresqlOutput_7.createStatement()) {
                stmtTrunc_tPostgresqlOutput_7.executeUpdate("TRUNCATE TABLE \"" + tableName_tPostgresqlOutput_7 + "\"");
                deletedCount_tPostgresqlOutput_7 += rsTruncCountNumber_tPostgresqlOutput_7;
            }
	    String insert_tPostgresqlOutput_7 = "INSERT INTO \"" + tableName_tPostgresqlOutput_7 + "\" (\"act_id\",\"tag_name\",\"tag_value\") VALUES (?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_7 = conn_tPostgresqlOutput_7.prepareStatement(insert_tPostgresqlOutput_7);
	    resourceMap.put("pstmt_tPostgresqlOutput_7", pstmt_tPostgresqlOutput_7);
	    

 



/**
 * [tPostgresqlOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputTagsStruct outputTags_tmp = new outputTagsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_14", false);
		start_Hash.put("tPostgresqlInput_14", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_14";

	
		int tos_count_tPostgresqlInput_14 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_14 = 0;
		    java.sql.Connection conn_tPostgresqlInput_14 = null;
		        conn_tPostgresqlInput_14 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_14 = conn_tPostgresqlInput_14.createStatement();
                stmt_tPostgresqlInput_14.setFetchSize(100);

		    String dbquery_tPostgresqlInput_14 = "select distinct act_tag_tbl.act_id, tag_name, FIRST(tag_value) AS tag_value from act_tag_tbl inner join act_vrsn_tbl on"
+" (act_tag_tbl.act_id = act_vrsn_tbl.act_id and act_vrsn_tbl.obslt_utc is null) where act_tag_tbl.obslt_utc is null and s"
+"ts_cd_id = 'afc33800-8225-4061-b168-bacc09cdbae3'\nGROUP BY act_tag_tbl.ACT_ID, TAG_NAME\n";
			

            	globalMap.put("tPostgresqlInput_14_QUERY",dbquery_tPostgresqlInput_14);
		    java.sql.ResultSet rs_tPostgresqlInput_14 = null;

		    try {
		    	rs_tPostgresqlInput_14 = stmt_tPostgresqlInput_14.executeQuery(dbquery_tPostgresqlInput_14);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_14 = rs_tPostgresqlInput_14.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_14 = rsmd_tPostgresqlInput_14.getColumnCount();

		    String tmpContent_tPostgresqlInput_14 = null;
		    
		    
		    while (rs_tPostgresqlInput_14.next()) {
		        nb_line_tPostgresqlInput_14++;
		        
							if(colQtyInRs_tPostgresqlInput_14 < 1) {
								row7.act_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_14.getObject(1) != null) {
                row7.act_id = rs_tPostgresqlInput_14.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_14 < 2) {
								row7.tag_name = null;
							} else {
	                         		
        	row7.tag_name = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_14, 2, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_14 < 3) {
								row7.tag_value = null;
							} else {
	                         		
        	row7.tag_value = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_14, 3, false);
		                    }
					


 



/**
 * [tPostgresqlInput_14 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_14 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_14";

	

 


	tos_count_tPostgresqlInput_14++;

/**
 * [tPostgresqlInput_14 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_14";

	

 



/**
 * [tPostgresqlInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

outputTags = null;


// # Output table : 'outputTags'
outputTags_tmp.act_id = row7.act_id;
outputTags_tmp.tag_name = row7.tag_name;
outputTags_tmp.tag_value = row7.tag_value;
outputTags = outputTags_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "outputTags"
if(outputTags != null) { 



	
	/**
	 * [tPostgresqlOutput_7 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	

			//outputTags
			//outputTags


			
				if(execStat){
					runStat.updateStatOnConnection("outputTags"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_7 = false;
                    if(outputTags.act_id == null) {
pstmt_tPostgresqlOutput_7.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_7.setObject(1, outputTags.act_id, java.sql.Types.OTHER);
}

                    if(outputTags.tag_name == null) {
pstmt_tPostgresqlOutput_7.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_7.setString(2, outputTags.tag_name);
}

                    if(outputTags.tag_value == null) {
pstmt_tPostgresqlOutput_7.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_7.setString(3, outputTags.tag_value);
}

			
    		pstmt_tPostgresqlOutput_7.addBatch();
    		nb_line_tPostgresqlOutput_7++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_7++;
    		  
            if(!whetherReject_tPostgresqlOutput_7) {
            }
    			if ((batchSize_tPostgresqlOutput_7 > 0) && (batchSize_tPostgresqlOutput_7 <= batchSizeCounter_tPostgresqlOutput_7)) {
                try {
						int countSum_tPostgresqlOutput_7 = 0;
						    
						for(int countEach_tPostgresqlOutput_7: pstmt_tPostgresqlOutput_7.executeBatch()) {
							countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
						}
				    	
				    		insertedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_7 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_7){
				    	java.sql.SQLException ne_tPostgresqlOutput_7 = e_tPostgresqlOutput_7.getNextException(),sqle_tPostgresqlOutput_7=null;
				    	String errormessage_tPostgresqlOutput_7;
						if (ne_tPostgresqlOutput_7 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_7 = new java.sql.SQLException(e_tPostgresqlOutput_7.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_7.getMessage(), ne_tPostgresqlOutput_7.getSQLState(), ne_tPostgresqlOutput_7.getErrorCode(), ne_tPostgresqlOutput_7);
							errormessage_tPostgresqlOutput_7 = sqle_tPostgresqlOutput_7.getMessage();
						}else{
							errormessage_tPostgresqlOutput_7 = e_tPostgresqlOutput_7.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_7 = 0;
						for(int countEach_tPostgresqlOutput_7: e_tPostgresqlOutput_7.getUpdateCounts()) {
							countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
						}
						
				    		insertedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_7);
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_7++;

/**
 * [tPostgresqlOutput_7 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	

 



/**
 * [tPostgresqlOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	

 



/**
 * [tPostgresqlOutput_7 process_data_end ] stop
 */

} // End of branch "outputTags"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_14";

	

 



/**
 * [tPostgresqlInput_14 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_14 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_14";

	

	}
}finally{
	if (rs_tPostgresqlInput_14 != null) {
		rs_tPostgresqlInput_14.close();
	}
	if (stmt_tPostgresqlInput_14 != null) {
		stmt_tPostgresqlInput_14.close();
	}
}
globalMap.put("tPostgresqlInput_14_NB_LINE",nb_line_tPostgresqlInput_14);
 

ok_Hash.put("tPostgresqlInput_14", true);
end_Hash.put("tPostgresqlInput_14", System.currentTimeMillis());




/**
 * [tPostgresqlInput_14 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_7 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	



	    try {
				int countSum_tPostgresqlOutput_7 = 0;
				if (pstmt_tPostgresqlOutput_7 != null && batchSizeCounter_tPostgresqlOutput_7 > 0) {
						
					for(int countEach_tPostgresqlOutput_7: pstmt_tPostgresqlOutput_7.executeBatch()) {
						countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_7){
	    	java.sql.SQLException ne_tPostgresqlOutput_7 = e_tPostgresqlOutput_7.getNextException(),sqle_tPostgresqlOutput_7=null;
	    	String errormessage_tPostgresqlOutput_7;
			if (ne_tPostgresqlOutput_7 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_7 = new java.sql.SQLException(e_tPostgresqlOutput_7.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_7.getMessage(), ne_tPostgresqlOutput_7.getSQLState(), ne_tPostgresqlOutput_7.getErrorCode(), ne_tPostgresqlOutput_7);
				errormessage_tPostgresqlOutput_7 = sqle_tPostgresqlOutput_7.getMessage();
			}else{
				errormessage_tPostgresqlOutput_7 = e_tPostgresqlOutput_7.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_7 = 0;
			for(int countEach_tPostgresqlOutput_7: e_tPostgresqlOutput_7.getUpdateCounts()) {
				countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
			}
			
	    		insertedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_7);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_7 != null) {
        		
            pstmt_tPostgresqlOutput_7.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_7");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_7", true);

	nb_line_deleted_tPostgresqlOutput_7=nb_line_deleted_tPostgresqlOutput_7+ deletedCount_tPostgresqlOutput_7;
	nb_line_update_tPostgresqlOutput_7=nb_line_update_tPostgresqlOutput_7 + updatedCount_tPostgresqlOutput_7;
	nb_line_inserted_tPostgresqlOutput_7=nb_line_inserted_tPostgresqlOutput_7 + insertedCount_tPostgresqlOutput_7;
	nb_line_rejected_tPostgresqlOutput_7=nb_line_rejected_tPostgresqlOutput_7 + rejectedCount_tPostgresqlOutput_7;
	
        globalMap.put("tPostgresqlOutput_7_NB_LINE",nb_line_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_7);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputTags"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_7", true);
end_Hash.put("tPostgresqlOutput_7", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_7 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlInput_14:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk23", 0, "ok");
								} 
							
							tPostgresqlCommit_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_14 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_14";

	

 



/**
 * [tPostgresqlInput_14 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_7 = null;
                if ((pstmtToClose_tPostgresqlOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_7")) != null) {
                    pstmtToClose_tPostgresqlOutput_7.close();
                }
    }
 



/**
 * [tPostgresqlOutput_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_14_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostgresqlCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlCommit_1", false);
		start_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlCommit_1";

	
		int tos_count_tPostgresqlCommit_1 = 0;
		

 



/**
 * [tPostgresqlCommit_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

	java.sql.Connection conn_tPostgresqlCommit_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	if(conn_tPostgresqlCommit_1 != null && !conn_tPostgresqlCommit_1.isClosed())
	{
	
		try{
	
			
			conn_tPostgresqlCommit_1.commit();
			
	
		}finally{
			
			conn_tPostgresqlCommit_1.close();
			
	    }
	
	}

 


	tos_count_tPostgresqlCommit_1++;

/**
 * [tPostgresqlCommit_1 main ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 

ok_Hash.put("tPostgresqlCommit_1", true);
end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());




/**
 * [tPostgresqlCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tPostgresqlInput_2 - inputs:(after_tPostgresqlInput_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(outputSbadm)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
		        conn_tPostgresqlInput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);
		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;

		    try {
		    	rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								row2.etl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(1) != null) {
                row2.etl_id = rs_tPostgresqlInput_2.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 2) {
								row2.start_utc = null;
							} else {
										
			row2.start_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 3) {
								row2.stop_utc = null;
							} else {
										
			row2.stop_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 3);
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.etl_id = row2.etl_id;
				
				row2_HashRow.start_utc = row2.start_utc;
				
				row2_HashRow.stop_utc = row2.stop_utc;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	if (rs_tPostgresqlInput_2 != null) {
		rs_tPostgresqlInput_2.close();
	}
	if (stmt_tPostgresqlInput_2 != null) {
		stmt_tPostgresqlInput_2.close();
	}
}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tPostgresqlInput_4 - inputs:(after_tPostgresqlInput_3) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_2 - inputs:(row3,row4) outputs:(outputEncounter)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_4", false);
		start_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_4";

	
		int tos_count_tPostgresqlInput_4 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_4 = 0;
		    java.sql.Connection conn_tPostgresqlInput_4 = null;
		        conn_tPostgresqlInput_4 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4.createStatement();

		    String dbquery_tPostgresqlInput_4 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tPostgresqlInput_4_QUERY",dbquery_tPostgresqlInput_4);
		    java.sql.ResultSet rs_tPostgresqlInput_4 = null;

		    try {
		    	rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4.executeQuery(dbquery_tPostgresqlInput_4);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4.getColumnCount();

		    String tmpContent_tPostgresqlInput_4 = null;
		    
		    
		    while (rs_tPostgresqlInput_4.next()) {
		        nb_line_tPostgresqlInput_4++;
		        
							if(colQtyInRs_tPostgresqlInput_4 < 1) {
								row4.etl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_4.getObject(1) != null) {
                row4.etl_id = rs_tPostgresqlInput_4.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 2) {
								row4.start_utc = null;
							} else {
										
			row4.start_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_4, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 3) {
								row4.stop_utc = null;
							} else {
										
			row4.stop_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_4, 3);
		                    }
					


 



/**
 * [tPostgresqlInput_4 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 


	tos_count_tPostgresqlInput_4++;

/**
 * [tPostgresqlInput_4 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.etl_id = row4.etl_id;
				
				row4_HashRow.start_utc = row4.start_utc;
				
				row4_HashRow.stop_utc = row4.stop_utc;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

	}
}finally{
	if (rs_tPostgresqlInput_4 != null) {
		rs_tPostgresqlInput_4.close();
	}
	if (stmt_tPostgresqlInput_4 != null) {
		stmt_tPostgresqlInput_4.close();
	}
}
globalMap.put("tPostgresqlInput_4_NB_LINE",nb_line_tPostgresqlInput_4);
 

ok_Hash.put("tPostgresqlInput_4", true);
end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());




/**
 * [tPostgresqlInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tPostgresqlInput_6 - inputs:(after_tPostgresqlInput_5) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_3 - inputs:(row5,row6) outputs:(outputObservations)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_6", false);
		start_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_6";

	
		int tos_count_tPostgresqlInput_6 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_6 = 0;
		    java.sql.Connection conn_tPostgresqlInput_6 = null;
		        conn_tPostgresqlInput_6 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_6 = conn_tPostgresqlInput_6.createStatement();

		    String dbquery_tPostgresqlInput_6 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tPostgresqlInput_6_QUERY",dbquery_tPostgresqlInput_6);
		    java.sql.ResultSet rs_tPostgresqlInput_6 = null;

		    try {
		    	rs_tPostgresqlInput_6 = stmt_tPostgresqlInput_6.executeQuery(dbquery_tPostgresqlInput_6);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_6 = rs_tPostgresqlInput_6.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_6 = rsmd_tPostgresqlInput_6.getColumnCount();

		    String tmpContent_tPostgresqlInput_6 = null;
		    
		    
		    while (rs_tPostgresqlInput_6.next()) {
		        nb_line_tPostgresqlInput_6++;
		        
							if(colQtyInRs_tPostgresqlInput_6 < 1) {
								row6.etl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_6.getObject(1) != null) {
                row6.etl_id = rs_tPostgresqlInput_6.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 2) {
								row6.start_utc = null;
							} else {
										
			row6.start_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_6, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 3) {
								row6.stop_utc = null;
							} else {
										
			row6.stop_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_6, 3);
		                    }
					


 



/**
 * [tPostgresqlInput_6 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_6 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 


	tos_count_tPostgresqlInput_6++;

/**
 * [tPostgresqlInput_6 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 



/**
 * [tPostgresqlInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.etl_id = row6.etl_id;
				
				row6_HashRow.start_utc = row6.start_utc;
				
				row6_HashRow.stop_utc = row6.stop_utc;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 



/**
 * [tPostgresqlInput_6 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_6 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

	}
}finally{
	if (rs_tPostgresqlInput_6 != null) {
		rs_tPostgresqlInput_6.close();
	}
	if (stmt_tPostgresqlInput_6 != null) {
		stmt_tPostgresqlInput_6.close();
	}
}
globalMap.put("tPostgresqlInput_6_NB_LINE",nb_line_tPostgresqlInput_6);
 

ok_Hash.put("tPostgresqlInput_6", true);
end_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());




/**
 * [tPostgresqlInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

tHash_Lookup_row6.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_6 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 



/**
 * [tPostgresqlInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tAdvancedHash_row11 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row11", false);
		start_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row11 = 0;
		

			   		// connection name:row11
			   		// source node:tPostgresqlInput_9 - inputs:(after_tPostgresqlInput_8) outputs:(row11,row11) | target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
			   		// linked node: tMap_4 - inputs:(row10,row11) outputs:(outputAefi)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row11Struct>getLookup(matchingModeEnum_row11);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row11 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_9", false);
		start_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_9";

	
		int tos_count_tPostgresqlInput_9 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_9 = 0;
		    java.sql.Connection conn_tPostgresqlInput_9 = null;
		        conn_tPostgresqlInput_9 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_9 = conn_tPostgresqlInput_9.createStatement();

		    String dbquery_tPostgresqlInput_9 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tPostgresqlInput_9_QUERY",dbquery_tPostgresqlInput_9);
		    java.sql.ResultSet rs_tPostgresqlInput_9 = null;

		    try {
		    	rs_tPostgresqlInput_9 = stmt_tPostgresqlInput_9.executeQuery(dbquery_tPostgresqlInput_9);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_9 = rs_tPostgresqlInput_9.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_9 = rsmd_tPostgresqlInput_9.getColumnCount();

		    String tmpContent_tPostgresqlInput_9 = null;
		    
		    
		    while (rs_tPostgresqlInput_9.next()) {
		        nb_line_tPostgresqlInput_9++;
		        
							if(colQtyInRs_tPostgresqlInput_9 < 1) {
								row11.etl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_9.getObject(1) != null) {
                row11.etl_id = rs_tPostgresqlInput_9.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_9 < 2) {
								row11.start_utc = null;
							} else {
										
			row11.start_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_9, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_9 < 3) {
								row11.stop_utc = null;
							} else {
										
			row11.stop_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_9, 3);
		                    }
					


 



/**
 * [tPostgresqlInput_9 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_9 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 


	tos_count_tPostgresqlInput_9++;

/**
 * [tPostgresqlInput_9 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 



/**
 * [tPostgresqlInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		


			   
			   

					row11Struct row11_HashRow = new row11Struct();
		   	   	   
				
				row11_HashRow.etl_id = row11.etl_id;
				
				row11_HashRow.start_utc = row11.start_utc;
				
				row11_HashRow.stop_utc = row11.stop_utc;
				
			tHash_Lookup_row11.put(row11_HashRow);
			
            




 


	tos_count_tAdvancedHash_row11++;

/**
 * [tAdvancedHash_row11 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 



/**
 * [tPostgresqlInput_9 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_9 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

	}
}finally{
	if (rs_tPostgresqlInput_9 != null) {
		rs_tPostgresqlInput_9.close();
	}
	if (stmt_tPostgresqlInput_9 != null) {
		stmt_tPostgresqlInput_9.close();
	}
}
globalMap.put("tPostgresqlInput_9_NB_LINE",nb_line_tPostgresqlInput_9);
 

ok_Hash.put("tPostgresqlInput_9", true);
end_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());




/**
 * [tPostgresqlInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

tHash_Lookup_row11.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row11", true);
end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());




/**
 * [tAdvancedHash_row11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_9 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 



/**
 * [tPostgresqlInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();




	
	/**
	 * [tAdvancedHash_row19 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row19", false);
		start_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row19";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row19" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row19 = 0;
		

			   		// connection name:row19
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_4) outputs:(row19,row19) | target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
			   		// linked node: tMap_6 - inputs:(row18,row19) outputs:(outputActLists)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row19Struct>getLookup(matchingModeEnum_row19);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row19 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
		        conn_tDBInput_5 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row19.etl_id = null;
							} else {
		                          
            if(rs_tDBInput_5.getObject(1) != null) {
                row19.etl_id = rs_tDBInput_5.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row19.start_utc = null;
							} else {
										
			row19.start_utc = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 2);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row19.stop_utc = null;
							} else {
										
			row19.stop_utc = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 3);
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

			//row19
			//row19


			
				if(execStat){
					runStat.updateStatOnConnection("row19"+iterateId,1, 1);
				} 
			

		


			   
			   

					row19Struct row19_HashRow = new row19Struct();
		   	   	   
				
				row19_HashRow.etl_id = row19.etl_id;
				
				row19_HashRow.start_utc = row19.start_utc;
				
				row19_HashRow.stop_utc = row19.stop_utc;
				
			tHash_Lookup_row19.put(row19_HashRow);
			
            




 


	tos_count_tAdvancedHash_row19++;

/**
 * [tAdvancedHash_row19 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

tHash_Lookup_row19.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row19"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row19", true);
end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());




/**
 * [tAdvancedHash_row19 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();




	
	/**
	 * [tAdvancedHash_row23 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row23", false);
		start_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row23";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row23" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row23 = 0;
		

			   		// connection name:row23
			   		// source node:tDBInput_9 - inputs:(after_tDBInput_8) outputs:(row23,row23) | target node:tAdvancedHash_row23 - inputs:(row23) outputs:()
			   		// linked node: tMap_9 - inputs:(row22,row23) outputs:(outpuEvents)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row23 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row23Struct>getLookup(matchingModeEnum_row23);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row23", tHash_Lookup_row23);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row23 begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
		        conn_tDBInput_9 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								row23.etl_id = null;
							} else {
		                          
            if(rs_tDBInput_9.getObject(1) != null) {
                row23.etl_id = rs_tDBInput_9.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								row23.start_utc = null;
							} else {
										
			row23.start_utc = routines.system.JDBCUtil.getDate(rs_tDBInput_9, 2);
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								row23.stop_utc = null;
							} else {
										
			row23.stop_utc = routines.system.JDBCUtil.getDate(rs_tDBInput_9, 3);
		                    }
					


 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

			//row23
			//row23


			
				if(execStat){
					runStat.updateStatOnConnection("row23"+iterateId,1, 1);
				} 
			

		


			   
			   

					row23Struct row23_HashRow = new row23Struct();
		   	   	   
				
				row23_HashRow.etl_id = row23.etl_id;
				
				row23_HashRow.start_utc = row23.start_utc;
				
				row23_HashRow.stop_utc = row23.stop_utc;
				
			tHash_Lookup_row23.put(row23_HashRow);
			
            




 


	tos_count_tAdvancedHash_row23++;

/**
 * [tAdvancedHash_row23 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);
 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

tHash_Lookup_row23.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row23"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row23", true);
end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());




/**
 * [tAdvancedHash_row23 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row27Struct implements routines.system.IPersistableComparableLookupRow<row27Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String mat_id;

				public String getMat_id () {
					return this.mat_id;
				}
				
			    public String mmat_id;

				public String getMmat_id () {
					return this.mmat_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.mmat_id == null) ? 0 : this.mmat_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row27Struct other = (row27Struct) obj;
		
						if (this.mmat_id == null) {
							if (other.mmat_id != null)
								return false;
						
						} else if (!this.mmat_id.equals(other.mmat_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row27Struct other) {

		other.mat_id = this.mat_id;
	            other.mmat_id = this.mmat_id;
	            
	}

	public void copyKeysDataTo(row27Struct other) {

		other.mmat_id = this.mmat_id;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
					this.mmat_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.mmat_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.mat_id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.mat_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("mat_id="+mat_id);
		sb.append(",mmat_id="+mmat_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.mmat_id, other.mmat_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();




	
	/**
	 * [tHash_row27 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row27", false);
		start_Hash.put("tHash_row27", System.currentTimeMillis());
		
	
	currentComponent="tHash_row27";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row27" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHash_row27 = 0;
		

				java.util.Map<row27Struct, row27Struct> tHash_row27 = new java.util.LinkedHashMap<row27Struct, row27Struct>();
	            globalMap.put("tHash_row27", tHash_row27);
			
            

 



/**
 * [tHash_row27 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
		        conn_tDBInput_10 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "SELECT src_ent_id mat_id, trg_ent_id mmat_id \nFROM ent_rel_Tbl\nWHERE \n	rel_typ_cd_id = 'ac45a740-b0c7-4425-84d8-b3f8"
+"a41fef9f';";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								row27.mat_id = null;
							} else {
	                         		
        	row27.mat_id = routines.system.JDBCUtil.getString(rs_tDBInput_10, 1, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								row27.mmat_id = null;
							} else {
	                         		
        	row27.mmat_id = routines.system.JDBCUtil.getString(rs_tDBInput_10, 2, false);
		                    }
					


 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tHash_row27 main ] start
	 */

	

	
	
	currentComponent="tHash_row27";

	

			//row27
			//row27


			
				if(execStat){
					runStat.updateStatOnConnection("row27"+iterateId,1, 1);
				} 
			

		

row27Struct row27_HashRow = new row27Struct();

					row27_HashRow.mat_id = row27.mat_id;
					row27_HashRow.mmat_id = row27.mmat_id;
tHash_row27.put(row27_HashRow, row27_HashRow);


 


	tos_count_tHash_row27++;

/**
 * [tHash_row27 main ] stop
 */
	
	/**
	 * [tHash_row27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row27";

	

 



/**
 * [tHash_row27 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row27 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row27";

	

 



/**
 * [tHash_row27 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);
 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tHash_row27 end ] start
	 */

	

	
	
	currentComponent="tHash_row27";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row27"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHash_row27", true);
end_Hash.put("tHash_row27", System.currentTimeMillis());




/**
 * [tHash_row27 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tHash_row27 finally ] start
	 */

	

	
	
	currentComponent="tHash_row27";

	

 



/**
 * [tHash_row27 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableComparableLookupRow<row25Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String sply_id;

				public String getSply_id () {
					return this.sply_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.sply_id == null) ? 0 : this.sply_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.sply_id == null) {
							if (other.sply_id != null)
								return false;
						
						} else if (!this.sply_id.equals(other.sply_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.sply_id = this.sply_id;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.sply_id = this.sply_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
					this.sply_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.sply_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sply_id="+sply_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.sply_id, other.sply_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();




	
	/**
	 * [tHash_row25 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row25", false);
		start_Hash.put("tHash_row25", System.currentTimeMillis());
		
	
	currentComponent="tHash_row25";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row25" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHash_row25 = 0;
		

				java.util.Map<row25Struct, row25Struct> tHash_row25 = new java.util.LinkedHashMap<row25Struct, row25Struct>();
	            globalMap.put("tHash_row25", tHash_row25);
			
            

 



/**
 * [tHash_row25 begin ] stop
 */



	
	/**
	 * [tDBInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_12", false);
		start_Hash.put("tDBInput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_12";

	
		int tos_count_tDBInput_12 = 0;
		
	
    
	
		    int nb_line_tDBInput_12 = 0;
		    java.sql.Connection conn_tDBInput_12 = null;
		        conn_tDBInput_12 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

		    String dbquery_tDBInput_12 = "select sply_id from sply_tbl";
			

            	globalMap.put("tDBInput_12_QUERY",dbquery_tDBInput_12);
		    java.sql.ResultSet rs_tDBInput_12 = null;

		    try {
		    	rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
		    	int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

		    String tmpContent_tDBInput_12 = null;
		    
		    
		    while (rs_tDBInput_12.next()) {
		        nb_line_tDBInput_12++;
		        
							if(colQtyInRs_tDBInput_12 < 1) {
								row25.sply_id = null;
							} else {
	                         		
        	row25.sply_id = routines.system.JDBCUtil.getString(rs_tDBInput_12, 1, false);
		                    }
					


 



/**
 * [tDBInput_12 begin ] stop
 */
	
	/**
	 * [tDBInput_12 main ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 


	tos_count_tDBInput_12++;

/**
 * [tDBInput_12 main ] stop
 */
	
	/**
	 * [tDBInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tHash_row25 main ] start
	 */

	

	
	
	currentComponent="tHash_row25";

	

			//row25
			//row25


			
				if(execStat){
					runStat.updateStatOnConnection("row25"+iterateId,1, 1);
				} 
			

		

row25Struct row25_HashRow = new row25Struct();

					row25_HashRow.sply_id = row25.sply_id;
tHash_row25.put(row25_HashRow, row25_HashRow);


 


	tos_count_tHash_row25++;

/**
 * [tHash_row25 main ] stop
 */
	
	/**
	 * [tHash_row25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row25";

	

 



/**
 * [tHash_row25 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row25 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row25";

	

 



/**
 * [tHash_row25 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_12 end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

	}
}finally{
	if (rs_tDBInput_12 != null) {
		rs_tDBInput_12.close();
	}
	if (stmt_tDBInput_12 != null) {
		stmt_tDBInput_12.close();
	}
}
globalMap.put("tDBInput_12_NB_LINE",nb_line_tDBInput_12);
 

ok_Hash.put("tDBInput_12", true);
end_Hash.put("tDBInput_12", System.currentTimeMillis());




/**
 * [tDBInput_12 end ] stop
 */

	
	/**
	 * [tHash_row25 end ] start
	 */

	

	
	
	currentComponent="tHash_row25";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row25"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHash_row25", true);
end_Hash.put("tHash_row25", System.currentTimeMillis());




/**
 * [tHash_row25 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 finally ] stop
 */

	
	/**
	 * [tHash_row25 finally ] start
	 */

	

	
	
	currentComponent="tHash_row25";

	

 



/**
 * [tHash_row25 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row33Struct implements routines.system.IPersistableComparableLookupRow<row33Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String sply_id;

				public String getSply_id () {
					return this.sply_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.sply_id == null) ? 0 : this.sply_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row33Struct other = (row33Struct) obj;
		
						if (this.sply_id == null) {
							if (other.sply_id != null)
								return false;
						
						} else if (!this.sply_id.equals(other.sply_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row33Struct other) {

		other.sply_id = this.sply_id;
	            
	}

	public void copyKeysDataTo(row33Struct other) {

		other.sply_id = this.sply_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
					this.sply_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.sply_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sply_id="+sply_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.sply_id, other.sply_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row33Struct row33 = new row33Struct();




	
	/**
	 * [tHash_row33 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row33", false);
		start_Hash.put("tHash_row33", System.currentTimeMillis());
		
	
	currentComponent="tHash_row33";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row33" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHash_row33 = 0;
		

				java.util.Map<row33Struct, row33Struct> tHash_row33 = new java.util.LinkedHashMap<row33Struct, row33Struct>();
	            globalMap.put("tHash_row33", tHash_row33);
			
            

 



/**
 * [tHash_row33 begin ] stop
 */



	
	/**
	 * [tDBInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_15", false);
		start_Hash.put("tDBInput_15", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_15";

	
		int tos_count_tDBInput_15 = 0;
		
	
    
	
		    int nb_line_tDBInput_15 = 0;
		    java.sql.Connection conn_tDBInput_15 = null;
		        conn_tDBInput_15 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();

		    String dbquery_tDBInput_15 = "select sply_id from sply_tbl";
			

            	globalMap.put("tDBInput_15_QUERY",dbquery_tDBInput_15);
		    java.sql.ResultSet rs_tDBInput_15 = null;

		    try {
		    	rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
		    	int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

		    String tmpContent_tDBInput_15 = null;
		    
		    
		    while (rs_tDBInput_15.next()) {
		        nb_line_tDBInput_15++;
		        
							if(colQtyInRs_tDBInput_15 < 1) {
								row33.sply_id = null;
							} else {
	                         		
        	row33.sply_id = routines.system.JDBCUtil.getString(rs_tDBInput_15, 1, false);
		                    }
					


 



/**
 * [tDBInput_15 begin ] stop
 */
	
	/**
	 * [tDBInput_15 main ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 


	tos_count_tDBInput_15++;

/**
 * [tDBInput_15 main ] stop
 */
	
	/**
	 * [tDBInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tHash_row33 main ] start
	 */

	

	
	
	currentComponent="tHash_row33";

	

			//row33
			//row33


			
				if(execStat){
					runStat.updateStatOnConnection("row33"+iterateId,1, 1);
				} 
			

		

row33Struct row33_HashRow = new row33Struct();

					row33_HashRow.sply_id = row33.sply_id;
tHash_row33.put(row33_HashRow, row33_HashRow);


 


	tos_count_tHash_row33++;

/**
 * [tHash_row33 main ] stop
 */
	
	/**
	 * [tHash_row33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row33";

	

 



/**
 * [tHash_row33 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row33 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row33";

	

 



/**
 * [tHash_row33 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_15 end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

	}
}finally{
	if (rs_tDBInput_15 != null) {
		rs_tDBInput_15.close();
	}
	if (stmt_tDBInput_15 != null) {
		stmt_tDBInput_15.close();
	}
}
globalMap.put("tDBInput_15_NB_LINE",nb_line_tDBInput_15);
 

ok_Hash.put("tDBInput_15", true);
end_Hash.put("tDBInput_15", System.currentTimeMillis());




/**
 * [tDBInput_15 end ] stop
 */

	
	/**
	 * [tHash_row33 end ] start
	 */

	

	
	
	currentComponent="tHash_row33";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row33"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHash_row33", true);
end_Hash.put("tHash_row33", System.currentTimeMillis());




/**
 * [tHash_row33 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_15 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 finally ] stop
 */

	
	/**
	 * [tHash_row33 finally ] start
	 */

	

	
	
	currentComponent="tHash_row33";

	

 



/**
 * [tHash_row33 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();




	
	/**
	 * [tAdvancedHash_row30 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row30", false);
		start_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row30";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row30" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row30 = 0;
		

			   		// connection name:row30
			   		// source node:tDBInput_14 - inputs:(after_tDBInput_13) outputs:(row30,row30) | target node:tAdvancedHash_row30 - inputs:(row30) outputs:()
			   		// linked node: tMap_12 - inputs:(row29,row30) outputs:(outputProblems)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row30 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row30Struct>getLookup(matchingModeEnum_row30);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row30", tHash_Lookup_row30);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row30 begin ] stop
 */



	
	/**
	 * [tDBInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_14", false);
		start_Hash.put("tDBInput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_14";

	
		int tos_count_tDBInput_14 = 0;
		
	
    
	
		    int nb_line_tDBInput_14 = 0;
		    java.sql.Connection conn_tDBInput_14 = null;
		        conn_tDBInput_14 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14.createStatement();

		    String dbquery_tDBInput_14 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tDBInput_14_QUERY",dbquery_tDBInput_14);
		    java.sql.ResultSet rs_tDBInput_14 = null;

		    try {
		    	rs_tDBInput_14 = stmt_tDBInput_14.executeQuery(dbquery_tDBInput_14);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14.getMetaData();
		    	int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14.getColumnCount();

		    String tmpContent_tDBInput_14 = null;
		    
		    
		    while (rs_tDBInput_14.next()) {
		        nb_line_tDBInput_14++;
		        
							if(colQtyInRs_tDBInput_14 < 1) {
								row30.etl_id = null;
							} else {
		                          
            if(rs_tDBInput_14.getObject(1) != null) {
                row30.etl_id = rs_tDBInput_14.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 2) {
								row30.start_utc = null;
							} else {
										
			row30.start_utc = routines.system.JDBCUtil.getDate(rs_tDBInput_14, 2);
		                    }
							if(colQtyInRs_tDBInput_14 < 3) {
								row30.stop_utc = null;
							} else {
										
			row30.stop_utc = routines.system.JDBCUtil.getDate(rs_tDBInput_14, 3);
		                    }
					


 



/**
 * [tDBInput_14 begin ] stop
 */
	
	/**
	 * [tDBInput_14 main ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 


	tos_count_tDBInput_14++;

/**
 * [tDBInput_14 main ] stop
 */
	
	/**
	 * [tDBInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

			//row30
			//row30


			
				if(execStat){
					runStat.updateStatOnConnection("row30"+iterateId,1, 1);
				} 
			

		


			   
			   

					row30Struct row30_HashRow = new row30Struct();
		   	   	   
				
				row30_HashRow.etl_id = row30.etl_id;
				
				row30_HashRow.start_utc = row30.start_utc;
				
				row30_HashRow.stop_utc = row30.stop_utc;
				
			tHash_Lookup_row30.put(row30_HashRow);
			
            




 


	tos_count_tAdvancedHash_row30++;

/**
 * [tAdvancedHash_row30 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

 



/**
 * [tAdvancedHash_row30 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row30 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

 



/**
 * [tAdvancedHash_row30 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_14 end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

	}
}finally{
	if (rs_tDBInput_14 != null) {
		rs_tDBInput_14.close();
	}
	if (stmt_tDBInput_14 != null) {
		stmt_tDBInput_14.close();
	}
}
globalMap.put("tDBInput_14_NB_LINE",nb_line_tDBInput_14);
 

ok_Hash.put("tDBInput_14", true);
end_Hash.put("tDBInput_14", System.currentTimeMillis());




/**
 * [tDBInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

tHash_Lookup_row30.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row30"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row30", true);
end_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());




/**
 * [tAdvancedHash_row30 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

 



/**
 * [tAdvancedHash_row30 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public String vvm;

				public String getVvm () {
					return this.vvm;
				}
				
			    public Object matl;

				public Object getMatl () {
					return this.matl;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.act_id == null) ? 0 : this.act_id.hashCode());
					
						result = prime * result + ((this.matl == null) ? 0 : this.matl.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.act_id == null) {
							if (other.act_id != null)
								return false;
						
						} else if (!this.act_id.equals(other.act_id))
						
							return false;
					
						if (this.matl == null) {
							if (other.matl != null)
								return false;
						
						} else if (!this.matl.equals(other.matl))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.act_id = this.act_id;
	            other.vvm = this.vvm;
	            other.matl = this.matl;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.act_id = this.act_id;
	            	other.matl = this.matl;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
						this.matl = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
					// Object
				
       			    	dos.writeObject(this.matl);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.vvm = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.vvm, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",vvm="+vvm);
		sb.append(",matl="+String.valueOf(matl));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.act_id, other.act_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.matl, other.matl);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tAdvancedHash_row14 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row14", false);
		start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row14";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row14" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row14 = 0;
		

			   		// connection name:row14
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(row14,row14) | target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
			   		// linked node: tMap_14 - inputs:(row13,row14,row16) outputs:(outputVvm)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row14Struct>getLookup(matchingModeEnum_row14);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row14 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
		        conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT SRC_ACT_ID AS ACT_ID, MNEMONIC AS VVM, ENT_ID AS MATL\nFROM \n	ACT_REL_TBL \n	INNER JOIN ACT_TBL  ON (SRC_ACT_ID"
+" = ACT_TBL.ACT_ID)\n	INNER JOIN ACT_VRSN_TBL ON (TRG_ACT_ID = ACT_VRSN_TBL.ACT_ID)\n	INNER JOIN CD_OBS_TBL USING (ACT_VR"
+"SN_ID)\n	INNER JOIN ACT_PTCPT_PART_CONS_TBL ON (ACT_VRSN_TBL.ACT_ID = ACT_PTCPT_PART_CONS_TBL.ACT_ID AND  ACT_PTCPT_PART"
+"_CONS_TBL.ROL_CD_ID = 'a5cac7f7-e3b7-4dd8-872c-db0e7fcc2d84' AND ACT_PTCPT_PART_CONS_TBL.OBSLT_VRSN_SEQ_ID IS NULL)\n	IN"
+"NER JOIN CD_VRSN_TBL ON (VAL_CD_ID = CD_ID AND CD_VRSN_TBL.OBSLT_UTC IS NULL)\nWHERE\n	ACT_TBL.CLS_CD_ID = 'b0323489-9a0"
+"9-411a-bb55-ff283830ea1a' -- CLASS OF ACT IS LIST\n	AND REL_TYP_CD_ID = '85f68168-2a43-4532-bc79-191fa0b47c8b' -- TYPE O"
+"F RELATION = HASCONTROLVARIABLE\n	AND ACT_REL_TBL.OBSLT_VRSN_SEQ_ID IS NULL -- VALID REL\n	AND ACT_VRSN_TBL.OBSLT_UTC  I"
+"S NULL\n	AND TYP_CD_ID = '15af58cf-5173-4ea6-b140-c8c2cb74372c' -- ONLY VVM";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row14.act_id = null;
							} else {
		                          
            if(rs_tDBInput_3.getObject(1) != null) {
                row14.act_id = rs_tDBInput_3.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row14.vvm = null;
							} else {
	                         		
        	row14.vvm = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row14.matl = null;
							} else {
		                          
            if(rs_tDBInput_3.getObject(3) != null) {
                row14.matl = rs_tDBInput_3.getObject(3);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

			//row14
			//row14


			
				if(execStat){
					runStat.updateStatOnConnection("row14"+iterateId,1, 1);
				} 
			

		


			   
			   

					row14Struct row14_HashRow = new row14Struct();
		   	   	   
				
				row14_HashRow.act_id = row14.act_id;
				
				row14_HashRow.vvm = row14.vvm;
				
				row14_HashRow.matl = row14.matl;
				
			tHash_Lookup_row14.put(row14_HashRow);
			
            




 


	tos_count_tAdvancedHash_row14++;

/**
 * [tAdvancedHash_row14 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

tHash_Lookup_row14.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row14"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row14", true);
end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());




/**
 * [tAdvancedHash_row14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.act_id == null) ? 0 : this.act_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row16Struct other = (row16Struct) obj;
		
						if (this.act_id == null) {
							if (other.act_id != null)
								return false;
						
						} else if (!this.act_id.equals(other.act_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row16Struct other) {

		other.act_id = this.act_id;
	            
	}

	public void copyKeysDataTo(row16Struct other) {

		other.act_id = this.act_id;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
						this.act_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.act_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.act_id, other.act_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tAdvancedHash_row16 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row16", false);
		start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row16";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row16" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row16 = 0;
		

			   		// connection name:row16
			   		// source node:tDBInput_16 - inputs:(after_tDBInput_1) outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
			   		// linked node: tMap_14 - inputs:(row13,row14,row16) outputs:(outputVvm)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row16Struct>getLookup(matchingModeEnum_row16);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row16 begin ] stop
 */



	
	/**
	 * [tDBInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_16", false);
		start_Hash.put("tDBInput_16", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_16";

	
		int tos_count_tDBInput_16 = 0;
		
	
    
	
		    int nb_line_tDBInput_16 = 0;
		    java.sql.Connection conn_tDBInput_16 = null;
		        conn_tDBInput_16 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tDBInput_16 = conn_tDBInput_16.createStatement();

		    String dbquery_tDBInput_16 = "select distinct act_id from act_list_tbl";
			

            	globalMap.put("tDBInput_16_QUERY",dbquery_tDBInput_16);
		    java.sql.ResultSet rs_tDBInput_16 = null;

		    try {
		    	rs_tDBInput_16 = stmt_tDBInput_16.executeQuery(dbquery_tDBInput_16);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_16 = rs_tDBInput_16.getMetaData();
		    	int colQtyInRs_tDBInput_16 = rsmd_tDBInput_16.getColumnCount();

		    String tmpContent_tDBInput_16 = null;
		    
		    
		    while (rs_tDBInput_16.next()) {
		        nb_line_tDBInput_16++;
		        
							if(colQtyInRs_tDBInput_16 < 1) {
								row16.act_id = null;
							} else {
		                          
            if(rs_tDBInput_16.getObject(1) != null) {
                row16.act_id = rs_tDBInput_16.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_16 begin ] stop
 */
	
	/**
	 * [tDBInput_16 main ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 


	tos_count_tDBInput_16++;

/**
 * [tDBInput_16 main ] stop
 */
	
	/**
	 * [tDBInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

			//row16
			//row16


			
				if(execStat){
					runStat.updateStatOnConnection("row16"+iterateId,1, 1);
				} 
			

		


			   
			   

					row16Struct row16_HashRow = new row16Struct();
		   	   	   
				
				row16_HashRow.act_id = row16.act_id;
				
			tHash_Lookup_row16.put(row16_HashRow);
			
            




 


	tos_count_tAdvancedHash_row16++;

/**
 * [tAdvancedHash_row16 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_16 end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

	}
}finally{
	if (rs_tDBInput_16 != null) {
		rs_tDBInput_16.close();
	}
	if (stmt_tDBInput_16 != null) {
		stmt_tDBInput_16.close();
	}
}
globalMap.put("tDBInput_16_NB_LINE",nb_line_tDBInput_16);
 

ok_Hash.put("tDBInput_16", true);
end_Hash.put("tDBInput_16", System.currentTimeMillis());




/**
 * [tDBInput_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

tHash_Lookup_row16.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row16"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row16", true);
end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());




/**
 * [tAdvancedHash_row16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_16 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_Acts = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_Acts = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_Acts.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_Acts.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_Acts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_Acts, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_Acts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_Acts) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;
                    
                    
                StringBuilder sbHeader_tLogRow_1 = new StringBuilder();
				
				sbHeader_tLogRow_1.append("moment");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("pid");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("root_pid");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("father_pid");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("project");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("job");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("context");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("priority");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("type");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("origin");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("message");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("code");
				
                   
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(sbHeader_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row8.type = lcm.getType();
		row8.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row8.priority = lcm.getPriority();
		row8.message = lcm.getMessage();
		row8.code = lcm.getCode();
		
		row8.moment = java.util.Calendar.getInstance().getTime();
	
    	row8.pid = pid;
		row8.root_pid = rootPid;
		row8.father_pid = fatherPid;
	
    	row8.project = projectName;
    	row8.job = jobName;
    	row8.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row8.moment != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(row8.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.pid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.root_pid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.root_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.father_pid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.father_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.project != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.project)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.job != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.context != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.context)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.priority != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.priority)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.type != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.origin != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.message != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.message)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.code != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.code)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Production";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Warehouse_Acts Warehouse_ActsClass = new Warehouse_Acts();

        int exitCode = Warehouse_ActsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Warehouse_Acts.class.getClassLoader().getResourceAsStream("openiz/warehouse_acts_1_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Warehouse_Acts.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("dbName", "id_String");
				
                context.dbName=(String) context.getProperty("dbName");
				    context.setContextType("dbPassword", "id_String");
				
                context.dbPassword=(String) context.getProperty("dbPassword");
				    context.setContextType("dbPort", "id_String");
				
                context.dbPort=(String) context.getProperty("dbPort");
				    context.setContextType("dbServer", "id_String");
				
                context.dbServer=(String) context.getProperty("dbServer");
				    context.setContextType("dbUser", "id_String");
				
                context.dbUser=(String) context.getProperty("dbUser");
				    context.setContextType("dwName", "id_String");
				
                context.dwName=(String) context.getProperty("dwName");
				    context.setContextType("dwPassword", "id_String");
				
                context.dwPassword=(String) context.getProperty("dwPassword");
				    context.setContextType("dwPort", "id_String");
				
                context.dwPort=(String) context.getProperty("dwPort");
				    context.setContextType("dwServer", "id_String");
				
                context.dwServer=(String) context.getProperty("dwServer");
				    context.setContextType("dwUser", "id_String");
				
                context.dwUser=(String) context.getProperty("dwUser");
				    context.setContextType("dwTemplate", "id_String");
				
                context.dwTemplate=(String) context.getProperty("dwTemplate");
				    context.setContextType("dwWorking", "id_String");
				
                context.dwWorking=(String) context.getProperty("dwWorking");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("dbName")) {
                context.dbName = (String) parentContextMap.get("dbName");
            }if (parentContextMap.containsKey("dbPassword")) {
                context.dbPassword = (String) parentContextMap.get("dbPassword");
            }if (parentContextMap.containsKey("dbPort")) {
                context.dbPort = (String) parentContextMap.get("dbPort");
            }if (parentContextMap.containsKey("dbServer")) {
                context.dbServer = (String) parentContextMap.get("dbServer");
            }if (parentContextMap.containsKey("dbUser")) {
                context.dbUser = (String) parentContextMap.get("dbUser");
            }if (parentContextMap.containsKey("dwName")) {
                context.dwName = (String) parentContextMap.get("dwName");
            }if (parentContextMap.containsKey("dwPassword")) {
                context.dwPassword = (String) parentContextMap.get("dwPassword");
            }if (parentContextMap.containsKey("dwPort")) {
                context.dwPort = (String) parentContextMap.get("dwPort");
            }if (parentContextMap.containsKey("dwServer")) {
                context.dwServer = (String) parentContextMap.get("dwServer");
            }if (parentContextMap.containsKey("dwUser")) {
                context.dwUser = (String) parentContextMap.get("dwUser");
            }if (parentContextMap.containsKey("dwTemplate")) {
                context.dwTemplate = (String) parentContextMap.get("dwTemplate");
            }if (parentContextMap.containsKey("dwWorking")) {
                context.dwWorking = (String) parentContextMap.get("dwWorking");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tPostgresqlConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostgresqlConnection_1) {
globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", -1);

e_tPostgresqlConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Warehouse_Acts");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tPostgresqlConnection_1", globalMap.get("conn_tPostgresqlConnection_1"));
            connections.put("conn_tPostgresqlConnection_2", globalMap.get("conn_tPostgresqlConnection_2"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     903572 characters generated by Talend Open Studio for Data Integration 
 *     on the November 3, 2020 12:14:46 EST PM
 ************************************************************************************************/