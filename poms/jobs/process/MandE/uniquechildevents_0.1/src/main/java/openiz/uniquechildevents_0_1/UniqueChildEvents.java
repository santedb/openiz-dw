// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package openiz.uniquechildevents_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: UniqueChildEvents Purpose: M&E Report - Child Events<br>
 * Description: Each child event is represented as a list of objects. <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class UniqueChildEvents implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(resultOutput != null){
				
					this.setProperty("resultOutput", resultOutput.toString());
				
			}
			
			if(dbName != null){
				
					this.setProperty("dbName", dbName.toString());
				
			}
			
			if(dbPassword != null){
				
					this.setProperty("dbPassword", dbPassword.toString());
				
			}
			
			if(dbPort != null){
				
					this.setProperty("dbPort", dbPort.toString());
				
			}
			
			if(dbServer != null){
				
					this.setProperty("dbServer", dbServer.toString());
				
			}
			
			if(dbUser != null){
				
					this.setProperty("dbUser", dbUser.toString());
				
			}
			
			if(dwName != null){
				
					this.setProperty("dwName", dwName.toString());
				
			}
			
			if(dwPassword != null){
				
					this.setProperty("dwPassword", dwPassword.toString());
				
			}
			
			if(dwPort != null){
				
					this.setProperty("dwPort", dwPort.toString());
				
			}
			
			if(dwServer != null){
				
					this.setProperty("dwServer", dwServer.toString());
				
			}
			
			if(dwUser != null){
				
					this.setProperty("dwUser", dwUser.toString());
				
			}
			
		}

public String resultOutput;
public String getResultOutput(){
	return this.resultOutput;
}
public String dbName;
public String getDbName(){
	return this.dbName;
}
public String dbPassword;
public String getDbPassword(){
	return this.dbPassword;
}
public String dbPort;
public String getDbPort(){
	return this.dbPort;
}
public String dbServer;
public String getDbServer(){
	return this.dbServer;
}
public String dbUser;
public String getDbUser(){
	return this.dbUser;
}
public String dwName;
public String getDwName(){
	return this.dwName;
}
public String dwPassword;
public String getDwPassword(){
	return this.dwPassword;
}
public String dwPort;
public String getDwPort(){
	return this.dwPort;
}
public String dwServer;
public String getDwServer(){
	return this.dwServer;
}
public String dwUser;
public String getDwUser(){
	return this.dwUser;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "UniqueChildEvents";
	private final String projectName = "OPENIZ";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				UniqueChildEvents.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(UniqueChildEvents.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostgresqlConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_encounter1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPostgresqlConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_1", false);
		start_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_1";

	
		int tos_count_tPostgresqlConnection_1 = 0;
		


	
		String url_tPostgresqlConnection_1 = "jdbc:postgresql://"+context.dwServer+":"+context.dwPort+"/"+context.dwName; 
		String dbUser_tPostgresqlConnection_1 = context.dwUser;
		
		
			
	final String decryptedPassword_tPostgresqlConnection_1 = context.dwPassword; 
			String dbPwd_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;
		
	java.sql.Connection conn_tPostgresqlConnection_1 = null;
	
		java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_1 =  java.sql.DriverManager.getDrivers();
    while (drivers_tPostgresqlConnection_1.hasMoreElements()) {
        java.sql.Driver d_tPostgresqlConnection_1 = drivers_tPostgresqlConnection_1.nextElement();
        java.util.List<String> driverList_tPostgresqlConnection_1 = java.util.Arrays.<String>asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver");
        if (driverList_tPostgresqlConnection_1.contains(d_tPostgresqlConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tPostgresqlConnection_1);
                java.sql.DriverManager.registerDriver(d_tPostgresqlConnection_1);
            } catch (java.lang.Exception e_tPostgresqlConnection_1) {
            		//do nothing
            }
        }
    }
					String driverClass_tPostgresqlConnection_1 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tPostgresqlConnection_1);
		
				conn_tPostgresqlConnection_1 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_1,dbUser_tPostgresqlConnection_1,dbPwd_tPostgresqlConnection_1);

		globalMap.put("conn_tPostgresqlConnection_1", conn_tPostgresqlConnection_1);
	if (null != conn_tPostgresqlConnection_1) {
		
			conn_tPostgresqlConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_1","public");

	globalMap.put("conn_" + "tPostgresqlConnection_1",conn_tPostgresqlConnection_1);

 



/**
 * [tPostgresqlConnection_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 


	tos_count_tPostgresqlConnection_1++;

/**
 * [tPostgresqlConnection_1 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 

ok_Hash.put("tPostgresqlConnection_1", true);
end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());




/**
 * [tPostgresqlConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tPostgresqlInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class outputUniqeChildEventsStruct implements routines.system.IPersistableRow<outputUniqeChildEventsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_UniqueChildEvents = new byte[0];
    static byte[] commonByteArray_OPENIZ_UniqueChildEvents = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object enc_id;

				public Object getEnc_id () {
					return this.enc_id;
				}
				
			    public Object pat_id;

				public Object getPat_id () {
					return this.pat_id;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				
			    public Object mother_id;

				public Object getMother_id () {
					return this.mother_id;
				}
				
			    public Object tel;

				public Object getTel () {
					return this.tel;
				}
				
			    public Object pmtct;

				public Object getPmtct () {
					return this.pmtct;
				}
				
			    public Object place_id;

				public Object getPlace_id () {
					return this.place_id;
				}
				
			    public String place_name;

				public String getPlace_name () {
					return this.place_name;
				}
				
			    public String place_region;

				public String getPlace_region () {
					return this.place_region;
				}
				
			    public String place_district;

				public String getPlace_district () {
					return this.place_district;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public java.util.Date dob;

				public java.util.Date getDob () {
					return this.dob;
				}
				
			    public java.util.Date bcg_plan;

				public java.util.Date getBcg_plan () {
					return this.bcg_plan;
				}
				
			    public java.util.Date bcg_given;

				public java.util.Date getBcg_given () {
					return this.bcg_given;
				}
				
			    public java.util.Date opv0_plan;

				public java.util.Date getOpv0_plan () {
					return this.opv0_plan;
				}
				
			    public java.util.Date opv0_given;

				public java.util.Date getOpv0_given () {
					return this.opv0_given;
				}
				
			    public java.util.Date opv1_plan;

				public java.util.Date getOpv1_plan () {
					return this.opv1_plan;
				}
				
			    public java.util.Date opv1_given;

				public java.util.Date getOpv1_given () {
					return this.opv1_given;
				}
				
			    public java.util.Date opv2_plan;

				public java.util.Date getOpv2_plan () {
					return this.opv2_plan;
				}
				
			    public java.util.Date opv2_given;

				public java.util.Date getOpv2_given () {
					return this.opv2_given;
				}
				
			    public java.util.Date opv3_plan;

				public java.util.Date getOpv3_plan () {
					return this.opv3_plan;
				}
				
			    public java.util.Date opv3_given;

				public java.util.Date getOpv3_given () {
					return this.opv3_given;
				}
				
			    public java.util.Date dtp1_plan;

				public java.util.Date getDtp1_plan () {
					return this.dtp1_plan;
				}
				
			    public java.util.Date dtp1_given;

				public java.util.Date getDtp1_given () {
					return this.dtp1_given;
				}
				
			    public java.util.Date dtp2_plan;

				public java.util.Date getDtp2_plan () {
					return this.dtp2_plan;
				}
				
			    public java.util.Date dtp2_given;

				public java.util.Date getDtp2_given () {
					return this.dtp2_given;
				}
				
			    public java.util.Date dtp3_plan;

				public java.util.Date getDtp3_plan () {
					return this.dtp3_plan;
				}
				
			    public java.util.Date dtp3_given;

				public java.util.Date getDtp3_given () {
					return this.dtp3_given;
				}
				
			    public java.util.Date pcv1_plan;

				public java.util.Date getPcv1_plan () {
					return this.pcv1_plan;
				}
				
			    public java.util.Date pcv1_given;

				public java.util.Date getPcv1_given () {
					return this.pcv1_given;
				}
				
			    public java.util.Date pcv2_plan;

				public java.util.Date getPcv2_plan () {
					return this.pcv2_plan;
				}
				
			    public java.util.Date pcv2_given;

				public java.util.Date getPcv2_given () {
					return this.pcv2_given;
				}
				
			    public java.util.Date pcv3_plan;

				public java.util.Date getPcv3_plan () {
					return this.pcv3_plan;
				}
				
			    public java.util.Date pcv3_given;

				public java.util.Date getPcv3_given () {
					return this.pcv3_given;
				}
				
			    public java.util.Date mr1_plan;

				public java.util.Date getMr1_plan () {
					return this.mr1_plan;
				}
				
			    public java.util.Date mr1_given;

				public java.util.Date getMr1_given () {
					return this.mr1_given;
				}
				
			    public java.util.Date mr2_plan;

				public java.util.Date getMr2_plan () {
					return this.mr2_plan;
				}
				
			    public java.util.Date mr2_given;

				public java.util.Date getMr2_given () {
					return this.mr2_given;
				}
				
			    public java.util.Date rota1_plan;

				public java.util.Date getRota1_plan () {
					return this.rota1_plan;
				}
				
			    public java.util.Date rota1_given;

				public java.util.Date getRota1_given () {
					return this.rota1_given;
				}
				
			    public java.util.Date rota2_plan;

				public java.util.Date getRota2_plan () {
					return this.rota2_plan;
				}
				
			    public java.util.Date rota2_given;

				public java.util.Date getRota2_given () {
					return this.rota2_given;
				}
				
			    public BigDecimal weight;

				public BigDecimal getWeight () {
					return this.weight;
				}
				
			    public java.util.Date vitamina;

				public java.util.Date getVitamina () {
					return this.vitamina;
				}
				
			    public java.util.Date mebendezol;

				public java.util.Date getMebendezol () {
					return this.mebendezol;
				}
				
			    public String negated;

				public String getNegated () {
					return this.negated;
				}
				
			    public String reason;

				public String getReason () {
					return this.reason;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.enc_id == null) ? 0 : this.enc_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputUniqeChildEventsStruct other = (outputUniqeChildEventsStruct) obj;
		
						if (this.enc_id == null) {
							if (other.enc_id != null)
								return false;
						
						} else if (!this.enc_id.equals(other.enc_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputUniqeChildEventsStruct other) {

		other.enc_id = this.enc_id;
	            other.pat_id = this.pat_id;
	            other.gender = this.gender;
	            other.start_utc = this.start_utc;
	            other.stop_utc = this.stop_utc;
	            other.mother_id = this.mother_id;
	            other.tel = this.tel;
	            other.pmtct = this.pmtct;
	            other.place_id = this.place_id;
	            other.place_name = this.place_name;
	            other.place_region = this.place_region;
	            other.place_district = this.place_district;
	            other.usr_id = this.usr_id;
	            other.dob = this.dob;
	            other.bcg_plan = this.bcg_plan;
	            other.bcg_given = this.bcg_given;
	            other.opv0_plan = this.opv0_plan;
	            other.opv0_given = this.opv0_given;
	            other.opv1_plan = this.opv1_plan;
	            other.opv1_given = this.opv1_given;
	            other.opv2_plan = this.opv2_plan;
	            other.opv2_given = this.opv2_given;
	            other.opv3_plan = this.opv3_plan;
	            other.opv3_given = this.opv3_given;
	            other.dtp1_plan = this.dtp1_plan;
	            other.dtp1_given = this.dtp1_given;
	            other.dtp2_plan = this.dtp2_plan;
	            other.dtp2_given = this.dtp2_given;
	            other.dtp3_plan = this.dtp3_plan;
	            other.dtp3_given = this.dtp3_given;
	            other.pcv1_plan = this.pcv1_plan;
	            other.pcv1_given = this.pcv1_given;
	            other.pcv2_plan = this.pcv2_plan;
	            other.pcv2_given = this.pcv2_given;
	            other.pcv3_plan = this.pcv3_plan;
	            other.pcv3_given = this.pcv3_given;
	            other.mr1_plan = this.mr1_plan;
	            other.mr1_given = this.mr1_given;
	            other.mr2_plan = this.mr2_plan;
	            other.mr2_given = this.mr2_given;
	            other.rota1_plan = this.rota1_plan;
	            other.rota1_given = this.rota1_given;
	            other.rota2_plan = this.rota2_plan;
	            other.rota2_given = this.rota2_given;
	            other.weight = this.weight;
	            other.vitamina = this.vitamina;
	            other.mebendezol = this.mebendezol;
	            other.negated = this.negated;
	            other.reason = this.reason;
	            
	}

	public void copyKeysDataTo(outputUniqeChildEventsStruct other) {

		other.enc_id = this.enc_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_UniqueChildEvents.length) {
				if(length < 1024 && commonByteArray_OPENIZ_UniqueChildEvents.length == 0) {
   					commonByteArray_OPENIZ_UniqueChildEvents = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_UniqueChildEvents = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_UniqueChildEvents, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_UniqueChildEvents, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_UniqueChildEvents) {

        	try {

        		int length = 0;
		
						this.enc_id = (Object) dis.readObject();
					
						this.pat_id = (Object) dis.readObject();
					
					this.gender = readString(dis);
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
						this.mother_id = (Object) dis.readObject();
					
						this.tel = (Object) dis.readObject();
					
						this.pmtct = (Object) dis.readObject();
					
						this.place_id = (Object) dis.readObject();
					
					this.place_name = readString(dis);
					
					this.place_region = readString(dis);
					
					this.place_district = readString(dis);
					
						this.usr_id = (Object) dis.readObject();
					
					this.dob = readDate(dis);
					
					this.bcg_plan = readDate(dis);
					
					this.bcg_given = readDate(dis);
					
					this.opv0_plan = readDate(dis);
					
					this.opv0_given = readDate(dis);
					
					this.opv1_plan = readDate(dis);
					
					this.opv1_given = readDate(dis);
					
					this.opv2_plan = readDate(dis);
					
					this.opv2_given = readDate(dis);
					
					this.opv3_plan = readDate(dis);
					
					this.opv3_given = readDate(dis);
					
					this.dtp1_plan = readDate(dis);
					
					this.dtp1_given = readDate(dis);
					
					this.dtp2_plan = readDate(dis);
					
					this.dtp2_given = readDate(dis);
					
					this.dtp3_plan = readDate(dis);
					
					this.dtp3_given = readDate(dis);
					
					this.pcv1_plan = readDate(dis);
					
					this.pcv1_given = readDate(dis);
					
					this.pcv2_plan = readDate(dis);
					
					this.pcv2_given = readDate(dis);
					
					this.pcv3_plan = readDate(dis);
					
					this.pcv3_given = readDate(dis);
					
					this.mr1_plan = readDate(dis);
					
					this.mr1_given = readDate(dis);
					
					this.mr2_plan = readDate(dis);
					
					this.mr2_given = readDate(dis);
					
					this.rota1_plan = readDate(dis);
					
					this.rota1_given = readDate(dis);
					
					this.rota2_plan = readDate(dis);
					
					this.rota2_given = readDate(dis);
					
						this.weight = (BigDecimal) dis.readObject();
					
					this.vitamina = readDate(dis);
					
					this.mebendezol = readDate(dis);
					
					this.negated = readString(dis);
					
					this.reason = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.enc_id);
					
					// Object
				
       			    	dos.writeObject(this.pat_id);
					
					// String
				
						writeString(this.gender,dos);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.mother_id);
					
					// Object
				
       			    	dos.writeObject(this.tel);
					
					// Object
				
       			    	dos.writeObject(this.pmtct);
					
					// Object
				
       			    	dos.writeObject(this.place_id);
					
					// String
				
						writeString(this.place_name,dos);
					
					// String
				
						writeString(this.place_region,dos);
					
					// String
				
						writeString(this.place_district,dos);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// java.util.Date
				
						writeDate(this.dob,dos);
					
					// java.util.Date
				
						writeDate(this.bcg_plan,dos);
					
					// java.util.Date
				
						writeDate(this.bcg_given,dos);
					
					// java.util.Date
				
						writeDate(this.opv0_plan,dos);
					
					// java.util.Date
				
						writeDate(this.opv0_given,dos);
					
					// java.util.Date
				
						writeDate(this.opv1_plan,dos);
					
					// java.util.Date
				
						writeDate(this.opv1_given,dos);
					
					// java.util.Date
				
						writeDate(this.opv2_plan,dos);
					
					// java.util.Date
				
						writeDate(this.opv2_given,dos);
					
					// java.util.Date
				
						writeDate(this.opv3_plan,dos);
					
					// java.util.Date
				
						writeDate(this.opv3_given,dos);
					
					// java.util.Date
				
						writeDate(this.dtp1_plan,dos);
					
					// java.util.Date
				
						writeDate(this.dtp1_given,dos);
					
					// java.util.Date
				
						writeDate(this.dtp2_plan,dos);
					
					// java.util.Date
				
						writeDate(this.dtp2_given,dos);
					
					// java.util.Date
				
						writeDate(this.dtp3_plan,dos);
					
					// java.util.Date
				
						writeDate(this.dtp3_given,dos);
					
					// java.util.Date
				
						writeDate(this.pcv1_plan,dos);
					
					// java.util.Date
				
						writeDate(this.pcv1_given,dos);
					
					// java.util.Date
				
						writeDate(this.pcv2_plan,dos);
					
					// java.util.Date
				
						writeDate(this.pcv2_given,dos);
					
					// java.util.Date
				
						writeDate(this.pcv3_plan,dos);
					
					// java.util.Date
				
						writeDate(this.pcv3_given,dos);
					
					// java.util.Date
				
						writeDate(this.mr1_plan,dos);
					
					// java.util.Date
				
						writeDate(this.mr1_given,dos);
					
					// java.util.Date
				
						writeDate(this.mr2_plan,dos);
					
					// java.util.Date
				
						writeDate(this.mr2_given,dos);
					
					// java.util.Date
				
						writeDate(this.rota1_plan,dos);
					
					// java.util.Date
				
						writeDate(this.rota1_given,dos);
					
					// java.util.Date
				
						writeDate(this.rota2_plan,dos);
					
					// java.util.Date
				
						writeDate(this.rota2_given,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.weight);
					
					// java.util.Date
				
						writeDate(this.vitamina,dos);
					
					// java.util.Date
				
						writeDate(this.mebendezol,dos);
					
					// String
				
						writeString(this.negated,dos);
					
					// String
				
						writeString(this.reason,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("enc_id="+String.valueOf(enc_id));
		sb.append(",pat_id="+String.valueOf(pat_id));
		sb.append(",gender="+gender);
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
		sb.append(",mother_id="+String.valueOf(mother_id));
		sb.append(",tel="+String.valueOf(tel));
		sb.append(",pmtct="+String.valueOf(pmtct));
		sb.append(",place_id="+String.valueOf(place_id));
		sb.append(",place_name="+place_name);
		sb.append(",place_region="+place_region);
		sb.append(",place_district="+place_district);
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",dob="+String.valueOf(dob));
		sb.append(",bcg_plan="+String.valueOf(bcg_plan));
		sb.append(",bcg_given="+String.valueOf(bcg_given));
		sb.append(",opv0_plan="+String.valueOf(opv0_plan));
		sb.append(",opv0_given="+String.valueOf(opv0_given));
		sb.append(",opv1_plan="+String.valueOf(opv1_plan));
		sb.append(",opv1_given="+String.valueOf(opv1_given));
		sb.append(",opv2_plan="+String.valueOf(opv2_plan));
		sb.append(",opv2_given="+String.valueOf(opv2_given));
		sb.append(",opv3_plan="+String.valueOf(opv3_plan));
		sb.append(",opv3_given="+String.valueOf(opv3_given));
		sb.append(",dtp1_plan="+String.valueOf(dtp1_plan));
		sb.append(",dtp1_given="+String.valueOf(dtp1_given));
		sb.append(",dtp2_plan="+String.valueOf(dtp2_plan));
		sb.append(",dtp2_given="+String.valueOf(dtp2_given));
		sb.append(",dtp3_plan="+String.valueOf(dtp3_plan));
		sb.append(",dtp3_given="+String.valueOf(dtp3_given));
		sb.append(",pcv1_plan="+String.valueOf(pcv1_plan));
		sb.append(",pcv1_given="+String.valueOf(pcv1_given));
		sb.append(",pcv2_plan="+String.valueOf(pcv2_plan));
		sb.append(",pcv2_given="+String.valueOf(pcv2_given));
		sb.append(",pcv3_plan="+String.valueOf(pcv3_plan));
		sb.append(",pcv3_given="+String.valueOf(pcv3_given));
		sb.append(",mr1_plan="+String.valueOf(mr1_plan));
		sb.append(",mr1_given="+String.valueOf(mr1_given));
		sb.append(",mr2_plan="+String.valueOf(mr2_plan));
		sb.append(",mr2_given="+String.valueOf(mr2_given));
		sb.append(",rota1_plan="+String.valueOf(rota1_plan));
		sb.append(",rota1_given="+String.valueOf(rota1_given));
		sb.append(",rota2_plan="+String.valueOf(rota2_plan));
		sb.append(",rota2_given="+String.valueOf(rota2_given));
		sb.append(",weight="+String.valueOf(weight));
		sb.append(",vitamina="+String.valueOf(vitamina));
		sb.append(",mebendezol="+String.valueOf(mebendezol));
		sb.append(",negated="+negated);
		sb.append(",reason="+reason);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputUniqeChildEventsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.enc_id, other.enc_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_UniqueChildEvents = new byte[0];
    static byte[] commonByteArray_OPENIZ_UniqueChildEvents = new byte[0];

	
			    public Object enc_id_master;

				public Object getEnc_id_master () {
					return this.enc_id_master;
				}
				
			    public Object enc_id;

				public Object getEnc_id () {
					return this.enc_id;
				}
				
			    public java.util.Date VaccineType_BCG0;

				public java.util.Date getVaccineType_BCG0 () {
					return this.VaccineType_BCG0;
				}
				
			    public java.util.Date VaccineType_BCG1;

				public java.util.Date getVaccineType_BCG1 () {
					return this.VaccineType_BCG1;
				}
				
			    public java.util.Date VaccineType_BCG2;

				public java.util.Date getVaccineType_BCG2 () {
					return this.VaccineType_BCG2;
				}
				
			    public java.util.Date VaccineType_BCG3;

				public java.util.Date getVaccineType_BCG3 () {
					return this.VaccineType_BCG3;
				}
				
			    public java.util.Date VaccineType_DTP_Hib_HepB0;

				public java.util.Date getVaccineType_DTP_Hib_HepB0 () {
					return this.VaccineType_DTP_Hib_HepB0;
				}
				
			    public java.util.Date VaccineType_DTP_Hib_HepB1;

				public java.util.Date getVaccineType_DTP_Hib_HepB1 () {
					return this.VaccineType_DTP_Hib_HepB1;
				}
				
			    public java.util.Date VaccineType_DTP_Hib_HepB2;

				public java.util.Date getVaccineType_DTP_Hib_HepB2 () {
					return this.VaccineType_DTP_Hib_HepB2;
				}
				
			    public java.util.Date VaccineType_DTP_Hib_HepB3;

				public java.util.Date getVaccineType_DTP_Hib_HepB3 () {
					return this.VaccineType_DTP_Hib_HepB3;
				}
				
			    public java.util.Date VaccineType_Measles0;

				public java.util.Date getVaccineType_Measles0 () {
					return this.VaccineType_Measles0;
				}
				
			    public java.util.Date VaccineType_Measles1;

				public java.util.Date getVaccineType_Measles1 () {
					return this.VaccineType_Measles1;
				}
				
			    public java.util.Date VaccineType_Measles2;

				public java.util.Date getVaccineType_Measles2 () {
					return this.VaccineType_Measles2;
				}
				
			    public java.util.Date VaccineType_Measles3;

				public java.util.Date getVaccineType_Measles3 () {
					return this.VaccineType_Measles3;
				}
				
			    public java.util.Date VaccineType_MR0;

				public java.util.Date getVaccineType_MR0 () {
					return this.VaccineType_MR0;
				}
				
			    public java.util.Date VaccineType_MR1;

				public java.util.Date getVaccineType_MR1 () {
					return this.VaccineType_MR1;
				}
				
			    public java.util.Date VaccineType_MR2;

				public java.util.Date getVaccineType_MR2 () {
					return this.VaccineType_MR2;
				}
				
			    public java.util.Date VaccineType_MR3;

				public java.util.Date getVaccineType_MR3 () {
					return this.VaccineType_MR3;
				}
				
			    public java.util.Date VaccineType_OPV0;

				public java.util.Date getVaccineType_OPV0 () {
					return this.VaccineType_OPV0;
				}
				
			    public java.util.Date VaccineType_OPV1;

				public java.util.Date getVaccineType_OPV1 () {
					return this.VaccineType_OPV1;
				}
				
			    public java.util.Date VaccineType_OPV2;

				public java.util.Date getVaccineType_OPV2 () {
					return this.VaccineType_OPV2;
				}
				
			    public java.util.Date VaccineType_OPV3;

				public java.util.Date getVaccineType_OPV3 () {
					return this.VaccineType_OPV3;
				}
				
			    public java.util.Date VaccineType_PCV130;

				public java.util.Date getVaccineType_PCV130 () {
					return this.VaccineType_PCV130;
				}
				
			    public java.util.Date VaccineType_PCV131;

				public java.util.Date getVaccineType_PCV131 () {
					return this.VaccineType_PCV131;
				}
				
			    public java.util.Date VaccineType_PCV132;

				public java.util.Date getVaccineType_PCV132 () {
					return this.VaccineType_PCV132;
				}
				
			    public java.util.Date VaccineType_PCV133;

				public java.util.Date getVaccineType_PCV133 () {
					return this.VaccineType_PCV133;
				}
				
			    public java.util.Date VaccineType_rotavirus0;

				public java.util.Date getVaccineType_rotavirus0 () {
					return this.VaccineType_rotavirus0;
				}
				
			    public java.util.Date VaccineType_rotavirus1;

				public java.util.Date getVaccineType_rotavirus1 () {
					return this.VaccineType_rotavirus1;
				}
				
			    public java.util.Date VaccineType_rotavirus2;

				public java.util.Date getVaccineType_rotavirus2 () {
					return this.VaccineType_rotavirus2;
				}
				
			    public java.util.Date VaccineType_rotavirus3;

				public java.util.Date getVaccineType_rotavirus3 () {
					return this.VaccineType_rotavirus3;
				}
				
			    public java.util.Date VaccineType_tetanustoxoid0;

				public java.util.Date getVaccineType_tetanustoxoid0 () {
					return this.VaccineType_tetanustoxoid0;
				}
				
			    public java.util.Date VaccineType_tetanustoxoid1;

				public java.util.Date getVaccineType_tetanustoxoid1 () {
					return this.VaccineType_tetanustoxoid1;
				}
				
			    public java.util.Date VaccineType_tetanustoxoid2;

				public java.util.Date getVaccineType_tetanustoxoid2 () {
					return this.VaccineType_tetanustoxoid2;
				}
				
			    public java.util.Date VaccineType_tetanustoxoid3;

				public java.util.Date getVaccineType_tetanustoxoid3 () {
					return this.VaccineType_tetanustoxoid3;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public Object pat_id;

				public Object getPat_id () {
					return this.pat_id;
				}
				
			    public String gender_mnemonic;

				public String getGender_mnemonic () {
					return this.gender_mnemonic;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				
			    public Object mth_id;

				public Object getMth_id () {
					return this.mth_id;
				}
				
			    public String tel;

				public String getTel () {
					return this.tel;
				}
				
			    public String pmtct;

				public String getPmtct () {
					return this.pmtct;
				}
				
			    public java.util.Date dob;

				public java.util.Date getDob () {
					return this.dob;
				}
				
			    public String loc_name;

				public String getLoc_name () {
					return this.loc_name;
				}
				
			    public String county;

				public String getCounty () {
					return this.county;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_UniqueChildEvents.length) {
				if(length < 1024 && commonByteArray_OPENIZ_UniqueChildEvents.length == 0) {
   					commonByteArray_OPENIZ_UniqueChildEvents = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_UniqueChildEvents = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_UniqueChildEvents, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_UniqueChildEvents, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_UniqueChildEvents) {

        	try {

        		int length = 0;
		
						this.enc_id_master = (Object) dis.readObject();
					
						this.enc_id = (Object) dis.readObject();
					
					this.VaccineType_BCG0 = readDate(dis);
					
					this.VaccineType_BCG1 = readDate(dis);
					
					this.VaccineType_BCG2 = readDate(dis);
					
					this.VaccineType_BCG3 = readDate(dis);
					
					this.VaccineType_DTP_Hib_HepB0 = readDate(dis);
					
					this.VaccineType_DTP_Hib_HepB1 = readDate(dis);
					
					this.VaccineType_DTP_Hib_HepB2 = readDate(dis);
					
					this.VaccineType_DTP_Hib_HepB3 = readDate(dis);
					
					this.VaccineType_Measles0 = readDate(dis);
					
					this.VaccineType_Measles1 = readDate(dis);
					
					this.VaccineType_Measles2 = readDate(dis);
					
					this.VaccineType_Measles3 = readDate(dis);
					
					this.VaccineType_MR0 = readDate(dis);
					
					this.VaccineType_MR1 = readDate(dis);
					
					this.VaccineType_MR2 = readDate(dis);
					
					this.VaccineType_MR3 = readDate(dis);
					
					this.VaccineType_OPV0 = readDate(dis);
					
					this.VaccineType_OPV1 = readDate(dis);
					
					this.VaccineType_OPV2 = readDate(dis);
					
					this.VaccineType_OPV3 = readDate(dis);
					
					this.VaccineType_PCV130 = readDate(dis);
					
					this.VaccineType_PCV131 = readDate(dis);
					
					this.VaccineType_PCV132 = readDate(dis);
					
					this.VaccineType_PCV133 = readDate(dis);
					
					this.VaccineType_rotavirus0 = readDate(dis);
					
					this.VaccineType_rotavirus1 = readDate(dis);
					
					this.VaccineType_rotavirus2 = readDate(dis);
					
					this.VaccineType_rotavirus3 = readDate(dis);
					
					this.VaccineType_tetanustoxoid0 = readDate(dis);
					
					this.VaccineType_tetanustoxoid1 = readDate(dis);
					
					this.VaccineType_tetanustoxoid2 = readDate(dis);
					
					this.VaccineType_tetanustoxoid3 = readDate(dis);
					
						this.usr_id = (Object) dis.readObject();
					
						this.fac_id = (Object) dis.readObject();
					
						this.pat_id = (Object) dis.readObject();
					
					this.gender_mnemonic = readString(dis);
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
						this.mth_id = (Object) dis.readObject();
					
					this.tel = readString(dis);
					
					this.pmtct = readString(dis);
					
					this.dob = readDate(dis);
					
					this.loc_name = readString(dis);
					
					this.county = readString(dis);
					
					this.state = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.enc_id_master);
					
					// Object
				
       			    	dos.writeObject(this.enc_id);
					
					// java.util.Date
				
						writeDate(this.VaccineType_BCG0,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_BCG1,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_BCG2,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_BCG3,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_DTP_Hib_HepB0,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_DTP_Hib_HepB1,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_DTP_Hib_HepB2,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_DTP_Hib_HepB3,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_Measles0,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_Measles1,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_Measles2,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_Measles3,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_MR0,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_MR1,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_MR2,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_MR3,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_OPV0,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_OPV1,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_OPV2,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_OPV3,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_PCV130,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_PCV131,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_PCV132,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_PCV133,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_rotavirus0,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_rotavirus1,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_rotavirus2,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_rotavirus3,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_tetanustoxoid0,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_tetanustoxoid1,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_tetanustoxoid2,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_tetanustoxoid3,dos);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// Object
				
       			    	dos.writeObject(this.pat_id);
					
					// String
				
						writeString(this.gender_mnemonic,dos);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.mth_id);
					
					// String
				
						writeString(this.tel,dos);
					
					// String
				
						writeString(this.pmtct,dos);
					
					// java.util.Date
				
						writeDate(this.dob,dos);
					
					// String
				
						writeString(this.loc_name,dos);
					
					// String
				
						writeString(this.county,dos);
					
					// String
				
						writeString(this.state,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("enc_id_master="+String.valueOf(enc_id_master));
		sb.append(",enc_id="+String.valueOf(enc_id));
		sb.append(",VaccineType_BCG0="+String.valueOf(VaccineType_BCG0));
		sb.append(",VaccineType_BCG1="+String.valueOf(VaccineType_BCG1));
		sb.append(",VaccineType_BCG2="+String.valueOf(VaccineType_BCG2));
		sb.append(",VaccineType_BCG3="+String.valueOf(VaccineType_BCG3));
		sb.append(",VaccineType_DTP_Hib_HepB0="+String.valueOf(VaccineType_DTP_Hib_HepB0));
		sb.append(",VaccineType_DTP_Hib_HepB1="+String.valueOf(VaccineType_DTP_Hib_HepB1));
		sb.append(",VaccineType_DTP_Hib_HepB2="+String.valueOf(VaccineType_DTP_Hib_HepB2));
		sb.append(",VaccineType_DTP_Hib_HepB3="+String.valueOf(VaccineType_DTP_Hib_HepB3));
		sb.append(",VaccineType_Measles0="+String.valueOf(VaccineType_Measles0));
		sb.append(",VaccineType_Measles1="+String.valueOf(VaccineType_Measles1));
		sb.append(",VaccineType_Measles2="+String.valueOf(VaccineType_Measles2));
		sb.append(",VaccineType_Measles3="+String.valueOf(VaccineType_Measles3));
		sb.append(",VaccineType_MR0="+String.valueOf(VaccineType_MR0));
		sb.append(",VaccineType_MR1="+String.valueOf(VaccineType_MR1));
		sb.append(",VaccineType_MR2="+String.valueOf(VaccineType_MR2));
		sb.append(",VaccineType_MR3="+String.valueOf(VaccineType_MR3));
		sb.append(",VaccineType_OPV0="+String.valueOf(VaccineType_OPV0));
		sb.append(",VaccineType_OPV1="+String.valueOf(VaccineType_OPV1));
		sb.append(",VaccineType_OPV2="+String.valueOf(VaccineType_OPV2));
		sb.append(",VaccineType_OPV3="+String.valueOf(VaccineType_OPV3));
		sb.append(",VaccineType_PCV130="+String.valueOf(VaccineType_PCV130));
		sb.append(",VaccineType_PCV131="+String.valueOf(VaccineType_PCV131));
		sb.append(",VaccineType_PCV132="+String.valueOf(VaccineType_PCV132));
		sb.append(",VaccineType_PCV133="+String.valueOf(VaccineType_PCV133));
		sb.append(",VaccineType_rotavirus0="+String.valueOf(VaccineType_rotavirus0));
		sb.append(",VaccineType_rotavirus1="+String.valueOf(VaccineType_rotavirus1));
		sb.append(",VaccineType_rotavirus2="+String.valueOf(VaccineType_rotavirus2));
		sb.append(",VaccineType_rotavirus3="+String.valueOf(VaccineType_rotavirus3));
		sb.append(",VaccineType_tetanustoxoid0="+String.valueOf(VaccineType_tetanustoxoid0));
		sb.append(",VaccineType_tetanustoxoid1="+String.valueOf(VaccineType_tetanustoxoid1));
		sb.append(",VaccineType_tetanustoxoid2="+String.valueOf(VaccineType_tetanustoxoid2));
		sb.append(",VaccineType_tetanustoxoid3="+String.valueOf(VaccineType_tetanustoxoid3));
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",fac_id="+String.valueOf(fac_id));
		sb.append(",pat_id="+String.valueOf(pat_id));
		sb.append(",gender_mnemonic="+gender_mnemonic);
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
		sb.append(",mth_id="+String.valueOf(mth_id));
		sb.append(",tel="+tel);
		sb.append(",pmtct="+pmtct);
		sb.append(",dob="+String.valueOf(dob));
		sb.append(",loc_name="+loc_name);
		sb.append(",county="+county);
		sb.append(",state="+state);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_2Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_2Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_UniqueChildEvents = new byte[0];
    static byte[] commonByteArray_OPENIZ_UniqueChildEvents = new byte[0];

	
			    public Object enc_id_master;

				public Object getEnc_id_master () {
					return this.enc_id_master;
				}
				
			    public Object enc_id;

				public Object getEnc_id () {
					return this.enc_id;
				}
				
			    public java.util.Date VaccineType_BCG0;

				public java.util.Date getVaccineType_BCG0 () {
					return this.VaccineType_BCG0;
				}
				
			    public java.util.Date VaccineType_BCG1;

				public java.util.Date getVaccineType_BCG1 () {
					return this.VaccineType_BCG1;
				}
				
			    public java.util.Date VaccineType_BCG2;

				public java.util.Date getVaccineType_BCG2 () {
					return this.VaccineType_BCG2;
				}
				
			    public java.util.Date VaccineType_BCG3;

				public java.util.Date getVaccineType_BCG3 () {
					return this.VaccineType_BCG3;
				}
				
			    public java.util.Date VaccineType_DTP_Hib_HepB0;

				public java.util.Date getVaccineType_DTP_Hib_HepB0 () {
					return this.VaccineType_DTP_Hib_HepB0;
				}
				
			    public java.util.Date VaccineType_DTP_Hib_HepB1;

				public java.util.Date getVaccineType_DTP_Hib_HepB1 () {
					return this.VaccineType_DTP_Hib_HepB1;
				}
				
			    public java.util.Date VaccineType_DTP_Hib_HepB2;

				public java.util.Date getVaccineType_DTP_Hib_HepB2 () {
					return this.VaccineType_DTP_Hib_HepB2;
				}
				
			    public java.util.Date VaccineType_DTP_Hib_HepB3;

				public java.util.Date getVaccineType_DTP_Hib_HepB3 () {
					return this.VaccineType_DTP_Hib_HepB3;
				}
				
			    public java.util.Date VaccineType_Measles0;

				public java.util.Date getVaccineType_Measles0 () {
					return this.VaccineType_Measles0;
				}
				
			    public java.util.Date VaccineType_Measles1;

				public java.util.Date getVaccineType_Measles1 () {
					return this.VaccineType_Measles1;
				}
				
			    public java.util.Date VaccineType_Measles2;

				public java.util.Date getVaccineType_Measles2 () {
					return this.VaccineType_Measles2;
				}
				
			    public java.util.Date VaccineType_Measles3;

				public java.util.Date getVaccineType_Measles3 () {
					return this.VaccineType_Measles3;
				}
				
			    public java.util.Date VaccineType_MR0;

				public java.util.Date getVaccineType_MR0 () {
					return this.VaccineType_MR0;
				}
				
			    public java.util.Date VaccineType_MR1;

				public java.util.Date getVaccineType_MR1 () {
					return this.VaccineType_MR1;
				}
				
			    public java.util.Date VaccineType_MR2;

				public java.util.Date getVaccineType_MR2 () {
					return this.VaccineType_MR2;
				}
				
			    public java.util.Date VaccineType_MR3;

				public java.util.Date getVaccineType_MR3 () {
					return this.VaccineType_MR3;
				}
				
			    public java.util.Date VaccineType_OPV0;

				public java.util.Date getVaccineType_OPV0 () {
					return this.VaccineType_OPV0;
				}
				
			    public java.util.Date VaccineType_OPV1;

				public java.util.Date getVaccineType_OPV1 () {
					return this.VaccineType_OPV1;
				}
				
			    public java.util.Date VaccineType_OPV2;

				public java.util.Date getVaccineType_OPV2 () {
					return this.VaccineType_OPV2;
				}
				
			    public java.util.Date VaccineType_OPV3;

				public java.util.Date getVaccineType_OPV3 () {
					return this.VaccineType_OPV3;
				}
				
			    public java.util.Date VaccineType_PCV130;

				public java.util.Date getVaccineType_PCV130 () {
					return this.VaccineType_PCV130;
				}
				
			    public java.util.Date VaccineType_PCV131;

				public java.util.Date getVaccineType_PCV131 () {
					return this.VaccineType_PCV131;
				}
				
			    public java.util.Date VaccineType_PCV132;

				public java.util.Date getVaccineType_PCV132 () {
					return this.VaccineType_PCV132;
				}
				
			    public java.util.Date VaccineType_PCV133;

				public java.util.Date getVaccineType_PCV133 () {
					return this.VaccineType_PCV133;
				}
				
			    public java.util.Date VaccineType_rotavirus0;

				public java.util.Date getVaccineType_rotavirus0 () {
					return this.VaccineType_rotavirus0;
				}
				
			    public java.util.Date VaccineType_rotavirus1;

				public java.util.Date getVaccineType_rotavirus1 () {
					return this.VaccineType_rotavirus1;
				}
				
			    public java.util.Date VaccineType_rotavirus2;

				public java.util.Date getVaccineType_rotavirus2 () {
					return this.VaccineType_rotavirus2;
				}
				
			    public java.util.Date VaccineType_rotavirus3;

				public java.util.Date getVaccineType_rotavirus3 () {
					return this.VaccineType_rotavirus3;
				}
				
			    public java.util.Date VaccineType_tetanustoxoid0;

				public java.util.Date getVaccineType_tetanustoxoid0 () {
					return this.VaccineType_tetanustoxoid0;
				}
				
			    public java.util.Date VaccineType_tetanustoxoid1;

				public java.util.Date getVaccineType_tetanustoxoid1 () {
					return this.VaccineType_tetanustoxoid1;
				}
				
			    public java.util.Date VaccineType_tetanustoxoid2;

				public java.util.Date getVaccineType_tetanustoxoid2 () {
					return this.VaccineType_tetanustoxoid2;
				}
				
			    public java.util.Date VaccineType_tetanustoxoid3;

				public java.util.Date getVaccineType_tetanustoxoid3 () {
					return this.VaccineType_tetanustoxoid3;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public Object pat_id;

				public Object getPat_id () {
					return this.pat_id;
				}
				
			    public String gender_mnemonic;

				public String getGender_mnemonic () {
					return this.gender_mnemonic;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				
			    public Object mth_id;

				public Object getMth_id () {
					return this.mth_id;
				}
				
			    public String tel;

				public String getTel () {
					return this.tel;
				}
				
			    public String pmtct;

				public String getPmtct () {
					return this.pmtct;
				}
				
			    public java.util.Date dob;

				public java.util.Date getDob () {
					return this.dob;
				}
				
			    public String loc_name;

				public String getLoc_name () {
					return this.loc_name;
				}
				
			    public String county;

				public String getCounty () {
					return this.county;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_UniqueChildEvents.length) {
				if(length < 1024 && commonByteArray_OPENIZ_UniqueChildEvents.length == 0) {
   					commonByteArray_OPENIZ_UniqueChildEvents = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_UniqueChildEvents = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_UniqueChildEvents, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_UniqueChildEvents, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_UniqueChildEvents) {

        	try {

        		int length = 0;
		
						this.enc_id_master = (Object) dis.readObject();
					
						this.enc_id = (Object) dis.readObject();
					
					this.VaccineType_BCG0 = readDate(dis);
					
					this.VaccineType_BCG1 = readDate(dis);
					
					this.VaccineType_BCG2 = readDate(dis);
					
					this.VaccineType_BCG3 = readDate(dis);
					
					this.VaccineType_DTP_Hib_HepB0 = readDate(dis);
					
					this.VaccineType_DTP_Hib_HepB1 = readDate(dis);
					
					this.VaccineType_DTP_Hib_HepB2 = readDate(dis);
					
					this.VaccineType_DTP_Hib_HepB3 = readDate(dis);
					
					this.VaccineType_Measles0 = readDate(dis);
					
					this.VaccineType_Measles1 = readDate(dis);
					
					this.VaccineType_Measles2 = readDate(dis);
					
					this.VaccineType_Measles3 = readDate(dis);
					
					this.VaccineType_MR0 = readDate(dis);
					
					this.VaccineType_MR1 = readDate(dis);
					
					this.VaccineType_MR2 = readDate(dis);
					
					this.VaccineType_MR3 = readDate(dis);
					
					this.VaccineType_OPV0 = readDate(dis);
					
					this.VaccineType_OPV1 = readDate(dis);
					
					this.VaccineType_OPV2 = readDate(dis);
					
					this.VaccineType_OPV3 = readDate(dis);
					
					this.VaccineType_PCV130 = readDate(dis);
					
					this.VaccineType_PCV131 = readDate(dis);
					
					this.VaccineType_PCV132 = readDate(dis);
					
					this.VaccineType_PCV133 = readDate(dis);
					
					this.VaccineType_rotavirus0 = readDate(dis);
					
					this.VaccineType_rotavirus1 = readDate(dis);
					
					this.VaccineType_rotavirus2 = readDate(dis);
					
					this.VaccineType_rotavirus3 = readDate(dis);
					
					this.VaccineType_tetanustoxoid0 = readDate(dis);
					
					this.VaccineType_tetanustoxoid1 = readDate(dis);
					
					this.VaccineType_tetanustoxoid2 = readDate(dis);
					
					this.VaccineType_tetanustoxoid3 = readDate(dis);
					
						this.usr_id = (Object) dis.readObject();
					
						this.fac_id = (Object) dis.readObject();
					
						this.pat_id = (Object) dis.readObject();
					
					this.gender_mnemonic = readString(dis);
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
						this.mth_id = (Object) dis.readObject();
					
					this.tel = readString(dis);
					
					this.pmtct = readString(dis);
					
					this.dob = readDate(dis);
					
					this.loc_name = readString(dis);
					
					this.county = readString(dis);
					
					this.state = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.enc_id_master);
					
					// Object
				
       			    	dos.writeObject(this.enc_id);
					
					// java.util.Date
				
						writeDate(this.VaccineType_BCG0,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_BCG1,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_BCG2,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_BCG3,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_DTP_Hib_HepB0,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_DTP_Hib_HepB1,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_DTP_Hib_HepB2,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_DTP_Hib_HepB3,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_Measles0,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_Measles1,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_Measles2,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_Measles3,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_MR0,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_MR1,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_MR2,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_MR3,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_OPV0,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_OPV1,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_OPV2,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_OPV3,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_PCV130,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_PCV131,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_PCV132,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_PCV133,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_rotavirus0,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_rotavirus1,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_rotavirus2,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_rotavirus3,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_tetanustoxoid0,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_tetanustoxoid1,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_tetanustoxoid2,dos);
					
					// java.util.Date
				
						writeDate(this.VaccineType_tetanustoxoid3,dos);
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// Object
				
       			    	dos.writeObject(this.pat_id);
					
					// String
				
						writeString(this.gender_mnemonic,dos);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.mth_id);
					
					// String
				
						writeString(this.tel,dos);
					
					// String
				
						writeString(this.pmtct,dos);
					
					// java.util.Date
				
						writeDate(this.dob,dos);
					
					// String
				
						writeString(this.loc_name,dos);
					
					// String
				
						writeString(this.county,dos);
					
					// String
				
						writeString(this.state,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("enc_id_master="+String.valueOf(enc_id_master));
		sb.append(",enc_id="+String.valueOf(enc_id));
		sb.append(",VaccineType_BCG0="+String.valueOf(VaccineType_BCG0));
		sb.append(",VaccineType_BCG1="+String.valueOf(VaccineType_BCG1));
		sb.append(",VaccineType_BCG2="+String.valueOf(VaccineType_BCG2));
		sb.append(",VaccineType_BCG3="+String.valueOf(VaccineType_BCG3));
		sb.append(",VaccineType_DTP_Hib_HepB0="+String.valueOf(VaccineType_DTP_Hib_HepB0));
		sb.append(",VaccineType_DTP_Hib_HepB1="+String.valueOf(VaccineType_DTP_Hib_HepB1));
		sb.append(",VaccineType_DTP_Hib_HepB2="+String.valueOf(VaccineType_DTP_Hib_HepB2));
		sb.append(",VaccineType_DTP_Hib_HepB3="+String.valueOf(VaccineType_DTP_Hib_HepB3));
		sb.append(",VaccineType_Measles0="+String.valueOf(VaccineType_Measles0));
		sb.append(",VaccineType_Measles1="+String.valueOf(VaccineType_Measles1));
		sb.append(",VaccineType_Measles2="+String.valueOf(VaccineType_Measles2));
		sb.append(",VaccineType_Measles3="+String.valueOf(VaccineType_Measles3));
		sb.append(",VaccineType_MR0="+String.valueOf(VaccineType_MR0));
		sb.append(",VaccineType_MR1="+String.valueOf(VaccineType_MR1));
		sb.append(",VaccineType_MR2="+String.valueOf(VaccineType_MR2));
		sb.append(",VaccineType_MR3="+String.valueOf(VaccineType_MR3));
		sb.append(",VaccineType_OPV0="+String.valueOf(VaccineType_OPV0));
		sb.append(",VaccineType_OPV1="+String.valueOf(VaccineType_OPV1));
		sb.append(",VaccineType_OPV2="+String.valueOf(VaccineType_OPV2));
		sb.append(",VaccineType_OPV3="+String.valueOf(VaccineType_OPV3));
		sb.append(",VaccineType_PCV130="+String.valueOf(VaccineType_PCV130));
		sb.append(",VaccineType_PCV131="+String.valueOf(VaccineType_PCV131));
		sb.append(",VaccineType_PCV132="+String.valueOf(VaccineType_PCV132));
		sb.append(",VaccineType_PCV133="+String.valueOf(VaccineType_PCV133));
		sb.append(",VaccineType_rotavirus0="+String.valueOf(VaccineType_rotavirus0));
		sb.append(",VaccineType_rotavirus1="+String.valueOf(VaccineType_rotavirus1));
		sb.append(",VaccineType_rotavirus2="+String.valueOf(VaccineType_rotavirus2));
		sb.append(",VaccineType_rotavirus3="+String.valueOf(VaccineType_rotavirus3));
		sb.append(",VaccineType_tetanustoxoid0="+String.valueOf(VaccineType_tetanustoxoid0));
		sb.append(",VaccineType_tetanustoxoid1="+String.valueOf(VaccineType_tetanustoxoid1));
		sb.append(",VaccineType_tetanustoxoid2="+String.valueOf(VaccineType_tetanustoxoid2));
		sb.append(",VaccineType_tetanustoxoid3="+String.valueOf(VaccineType_tetanustoxoid3));
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",fac_id="+String.valueOf(fac_id));
		sb.append(",pat_id="+String.valueOf(pat_id));
		sb.append(",gender_mnemonic="+gender_mnemonic);
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
		sb.append(",mth_id="+String.valueOf(mth_id));
		sb.append(",tel="+tel);
		sb.append(",pmtct="+pmtct);
		sb.append(",dob="+String.valueOf(dob));
		sb.append(",loc_name="+loc_name);
		sb.append(",county="+county);
		sb.append(",state="+state);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_3Process(globalMap);
		tPostgresqlInput_4Process(globalMap);
		tPostgresqlInput_1Process(globalMap);

		row1Struct row1 = new row1Struct();
outputUniqeChildEventsStruct outputUniqeChildEvents = new outputUniqeChildEventsStruct();





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputUniqeChildEvents" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.resultOutput + "/uniquechildevents-" + TalendDate.getDate("CCYY-MM-DD") + ".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */","/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("enc_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pat_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("gender");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("start_utc");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("stop_utc");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("mother_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("tel");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pmtct");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("place_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("place_name");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("place_region");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("place_district");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("usr_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("dob");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("bcg_plan");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("bcg_given");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("opv0_plan");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("opv0_given");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("opv1_plan");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("opv1_given");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("opv2_plan");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("opv2_given");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("opv3_plan");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("opv3_given");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("dtp1_plan");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("dtp1_given");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("dtp2_plan");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("dtp2_given");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("dtp3_plan");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("dtp3_given");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pcv1_plan");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pcv1_given");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pcv2_plan");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pcv2_given");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pcv3_plan");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pcv3_given");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("mr1_plan");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("mr1_given");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("mr2_plan");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("mr2_given");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("rota1_plan");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("rota1_given");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("rota2_plan");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("rota2_given");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("weight");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("vitamina");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("mebendezol");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("negated");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("reason");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<encounter1Struct> tHash_Lookup_encounter1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<encounter1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<encounter1Struct>) 
					globalMap.get( "tHash_Lookup_encounter1" ))
					;					
					
	

encounter1Struct encounter1HashKey = new encounter1Struct();
encounter1Struct encounter1Default = new encounter1Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputUniqeChildEventsStruct outputUniqeChildEvents_tmp = new outputUniqeChildEventsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
		        conn_tPostgresqlInput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "with encounter_crosstab as (\n	select * from crosstab(\n		'select enc_id, mat_tbl.type_mnemonic || seq_id, sbadm_tbl.ac"
+"t_utc from  sbadm_tbl inner join enc_tbl using (enc_id) inner join mat_tbl using (mat_id) where mmat_id is not null orde"
+"r by 1, 2',\n		'select distinct type_mnemonic || dose_seq from mat_tbl, (select distinct dose_seq from oizcp) as doses w"
+"here mat_tbl.type_mnemonic ilike ''VaccineType%'' order by 1'\n	) as ct (\n	enc_id uuid, \n	\"VaccineType-BCG0\" date,\n"
+"	\"VaccineType-BCG1\" date,\n	\"VaccineType-BCG2\" date,\n	\"VaccineType-BCG3\" date,\n	\"VaccineType-DTP-Hib-HepB0\" da"
+"te,\n	\"VaccineType-DTP-Hib-HepB1\" date,\n	\"VaccineType-DTP-Hib-HepB2\" date,\n	\"VaccineType-DTP-Hib-HepB3\" date,\n	"
+"\"VaccineType-Measles0\" date,\n	\"VaccineType-Measles1\" date,\n	\"VaccineType-Measles2\" date,\n	\"VaccineType-Measles"
+"3\" date,\n	\"VaccineType-MR0\" date,\n	\"VaccineType-MR1\" date,\n	\"VaccineType-MR2\" date,\n	\"VaccineType-MR3\" date"
+",\n	\"VaccineType-OPV0\" date,\n	\"VaccineType-OPV1\" date,\n	\"VaccineType-OPV2\" date,\n	\"VaccineType-OPV3\" date,\n	"
+"\"VaccineType-PCV130\" date,\n	\"VaccineType-PCV131\" date,\n	\"VaccineType-PCV132\" date,\n	\"VaccineType-PCV133\" date"
+",\n	\"VaccineType-rotavirus0\" date,\n	\"VaccineType-rotavirus1\" date,\n	\"VaccineType-rotavirus2\" date,\n	\"VaccineTy"
+"pe-rotavirus3\" date,\n	\"VaccineType-tetanustoxoid0\" date,\n	\"VaccineType-tetanustoxoid1\" date,\n	\"VaccineType-teta"
+"nustoxoid2\" date,\n	\"VaccineType-tetanustoxoid3\" date)\n)\nselect enc_tbl.enc_id as enc_id_master, encounter_crosstab"
+".*, enc_tbl.usr_id, enc_tbl.fac_id, pat_tbl.pat_id, gender_mnemonic, coalesce(start_utc, act_utc) as start_utc, stop_utc"
+", mth_id, psn_tbl.tel, ext_value as pmtct, pat_psn.dob, fac_vw.loc_name, fac_vw.county, fac_vw.state from \n	enc_tbl lef"
+"t join encounter_crosstab using (enc_id)\n	inner join pat_tbl using (pat_id)\n	inner join psn_tbl as pat_psn on (pat_tbl"
+".pat_id = pat_psn.psn_id)\n	left join psn_tbl on (pat_tbl.mth_id = psn_tbl.psn_id)\n	inner join fac_vw using (fac_id)\n	"
+"left join pat_ext_tbl on (pat_ext_tbl.pat_id = pat_tbl.pat_id and ext_typ='http://openiz.org/extensions/patient/contrib/"
+"timr/pctmtStatus')\n";
			

            	globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);
		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;

		    try {
		    	rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								row1.enc_id_master = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(1) != null) {
                row1.enc_id_master = rs_tPostgresqlInput_2.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 2) {
								row1.enc_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(2) != null) {
                row1.enc_id = rs_tPostgresqlInput_2.getObject(2);
            } else {
                    row1.enc_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 3) {
								row1.VaccineType_BCG0 = null;
							} else {
										
			row1.VaccineType_BCG0 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 3);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 4) {
								row1.VaccineType_BCG1 = null;
							} else {
										
			row1.VaccineType_BCG1 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 4);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 5) {
								row1.VaccineType_BCG2 = null;
							} else {
										
			row1.VaccineType_BCG2 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 5);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 6) {
								row1.VaccineType_BCG3 = null;
							} else {
										
			row1.VaccineType_BCG3 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 6);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 7) {
								row1.VaccineType_DTP_Hib_HepB0 = null;
							} else {
										
			row1.VaccineType_DTP_Hib_HepB0 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 7);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 8) {
								row1.VaccineType_DTP_Hib_HepB1 = null;
							} else {
										
			row1.VaccineType_DTP_Hib_HepB1 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 8);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 9) {
								row1.VaccineType_DTP_Hib_HepB2 = null;
							} else {
										
			row1.VaccineType_DTP_Hib_HepB2 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 9);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 10) {
								row1.VaccineType_DTP_Hib_HepB3 = null;
							} else {
										
			row1.VaccineType_DTP_Hib_HepB3 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 10);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 11) {
								row1.VaccineType_Measles0 = null;
							} else {
										
			row1.VaccineType_Measles0 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 11);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 12) {
								row1.VaccineType_Measles1 = null;
							} else {
										
			row1.VaccineType_Measles1 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 12);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 13) {
								row1.VaccineType_Measles2 = null;
							} else {
										
			row1.VaccineType_Measles2 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 13);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 14) {
								row1.VaccineType_Measles3 = null;
							} else {
										
			row1.VaccineType_Measles3 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 14);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 15) {
								row1.VaccineType_MR0 = null;
							} else {
										
			row1.VaccineType_MR0 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 15);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 16) {
								row1.VaccineType_MR1 = null;
							} else {
										
			row1.VaccineType_MR1 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 16);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 17) {
								row1.VaccineType_MR2 = null;
							} else {
										
			row1.VaccineType_MR2 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 17);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 18) {
								row1.VaccineType_MR3 = null;
							} else {
										
			row1.VaccineType_MR3 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 18);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 19) {
								row1.VaccineType_OPV0 = null;
							} else {
										
			row1.VaccineType_OPV0 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 19);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 20) {
								row1.VaccineType_OPV1 = null;
							} else {
										
			row1.VaccineType_OPV1 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 20);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 21) {
								row1.VaccineType_OPV2 = null;
							} else {
										
			row1.VaccineType_OPV2 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 21);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 22) {
								row1.VaccineType_OPV3 = null;
							} else {
										
			row1.VaccineType_OPV3 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 22);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 23) {
								row1.VaccineType_PCV130 = null;
							} else {
										
			row1.VaccineType_PCV130 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 23);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 24) {
								row1.VaccineType_PCV131 = null;
							} else {
										
			row1.VaccineType_PCV131 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 24);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 25) {
								row1.VaccineType_PCV132 = null;
							} else {
										
			row1.VaccineType_PCV132 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 25);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 26) {
								row1.VaccineType_PCV133 = null;
							} else {
										
			row1.VaccineType_PCV133 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 26);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 27) {
								row1.VaccineType_rotavirus0 = null;
							} else {
										
			row1.VaccineType_rotavirus0 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 27);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 28) {
								row1.VaccineType_rotavirus1 = null;
							} else {
										
			row1.VaccineType_rotavirus1 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 28);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 29) {
								row1.VaccineType_rotavirus2 = null;
							} else {
										
			row1.VaccineType_rotavirus2 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 29);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 30) {
								row1.VaccineType_rotavirus3 = null;
							} else {
										
			row1.VaccineType_rotavirus3 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 30);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 31) {
								row1.VaccineType_tetanustoxoid0 = null;
							} else {
										
			row1.VaccineType_tetanustoxoid0 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 31);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 32) {
								row1.VaccineType_tetanustoxoid1 = null;
							} else {
										
			row1.VaccineType_tetanustoxoid1 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 32);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 33) {
								row1.VaccineType_tetanustoxoid2 = null;
							} else {
										
			row1.VaccineType_tetanustoxoid2 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 33);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 34) {
								row1.VaccineType_tetanustoxoid3 = null;
							} else {
										
			row1.VaccineType_tetanustoxoid3 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 34);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 35) {
								row1.usr_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(35) != null) {
                row1.usr_id = rs_tPostgresqlInput_2.getObject(35);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 36) {
								row1.fac_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(36) != null) {
                row1.fac_id = rs_tPostgresqlInput_2.getObject(36);
            } else {
                    row1.fac_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 37) {
								row1.pat_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(37) != null) {
                row1.pat_id = rs_tPostgresqlInput_2.getObject(37);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 38) {
								row1.gender_mnemonic = null;
							} else {
	                         		
        	row1.gender_mnemonic = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 38, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 39) {
								row1.start_utc = null;
							} else {
										
			row1.start_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 39);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 40) {
								row1.stop_utc = null;
							} else {
										
			row1.stop_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 40);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 41) {
								row1.mth_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(41) != null) {
                row1.mth_id = rs_tPostgresqlInput_2.getObject(41);
            } else {
                    row1.mth_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 42) {
								row1.tel = null;
							} else {
	                         		
        	row1.tel = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 42, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 43) {
								row1.pmtct = null;
							} else {
	                         		
        	row1.pmtct = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 43, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 44) {
								row1.dob = null;
							} else {
										
			row1.dob = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 44);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 45) {
								row1.loc_name = null;
							} else {
	                         		
        	row1.loc_name = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 45, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 46) {
								row1.county = null;
							} else {
	                         		
        	row1.county = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 46, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 47) {
								row1.state = null;
							} else {
	                         		
        	row1.state = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 47, false);
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row2HashKey.enc_id = row1.enc_id ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.enc_id = '" + row2HashKey.enc_id + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row3HashKey.enc_id = row1.enc_id ;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.enc_id = '" + row3HashKey.enc_id + "'");
								} // G 071
							

							row3Struct row3 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								 
							
							
								if (tHash_Lookup_row3 !=null && tHash_Lookup_row3.hasNext()) { // G 099
								
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							
							
								} // G 099
							
							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "encounter1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopencounter1 = false;
       		  	    	
       		  	    	
 							encounter1Struct encounter1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		encounter1HashKey.patient_id = row1.pat_id ;
                        		    		

								
		                        	encounter1HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_encounter1.lookup( encounter1HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_encounter1.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							encounter1Struct encounter1 = null;
                    		  	 
							   
                    		  	 
	       		  	    	encounter1Struct fromLookup_encounter1 = null;
							encounter1 = encounter1Default;
										 
							
								 
							
							
								if (tHash_Lookup_encounter1 !=null && tHash_Lookup_encounter1.hasNext()) { // G 099
								
							
								
								fromLookup_encounter1 = tHash_Lookup_encounter1.next();

							
							
								} // G 099
							
							

							if(fromLookup_encounter1 != null) {
								encounter1 = fromLookup_encounter1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

outputUniqeChildEvents = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'outputUniqeChildEvents'
outputUniqeChildEvents_tmp.enc_id = row1.enc_id_master ;
outputUniqeChildEvents_tmp.pat_id = row1.pat_id;
outputUniqeChildEvents_tmp.gender = row1.gender_mnemonic ;
outputUniqeChildEvents_tmp.start_utc = row1.start_utc;
outputUniqeChildEvents_tmp.stop_utc = row1.stop_utc;
outputUniqeChildEvents_tmp.mother_id = row1.mth_id ;
outputUniqeChildEvents_tmp.tel = row1.tel;
outputUniqeChildEvents_tmp.pmtct = row1.pmtct;
outputUniqeChildEvents_tmp.place_id = row1.fac_id ;
outputUniqeChildEvents_tmp.place_name = row1.loc_name ;
outputUniqeChildEvents_tmp.place_region = row1.state ;
outputUniqeChildEvents_tmp.place_district = row1.county ;
outputUniqeChildEvents_tmp.usr_id = row1.usr_id ;
outputUniqeChildEvents_tmp.dob = row1.dob;
outputUniqeChildEvents_tmp.bcg_plan = encounter1.VaccineType_BCG0 ;
outputUniqeChildEvents_tmp.bcg_given = row1.VaccineType_BCG0 ;
outputUniqeChildEvents_tmp.opv0_plan = encounter1.VaccineType_OPV0 ;
outputUniqeChildEvents_tmp.opv0_given = row1.VaccineType_OPV0 ;
outputUniqeChildEvents_tmp.opv1_plan = encounter1.VaccineType_OPV1 ;
outputUniqeChildEvents_tmp.opv1_given = row1.VaccineType_OPV1 ;
outputUniqeChildEvents_tmp.opv2_plan = encounter1.VaccineType_OPV2 ;
outputUniqeChildEvents_tmp.opv2_given = row1.VaccineType_OPV2 ;
outputUniqeChildEvents_tmp.opv3_plan = encounter1.VaccineType_OPV3;
outputUniqeChildEvents_tmp.opv3_given = row1.VaccineType_OPV3 ;
outputUniqeChildEvents_tmp.dtp1_plan = encounter1.VaccineType_DTP_Hib_HepB1 ;
outputUniqeChildEvents_tmp.dtp1_given = row1.VaccineType_DTP_Hib_HepB1 ;
outputUniqeChildEvents_tmp.dtp2_plan = encounter1.VaccineType_DTP_Hib_HepB2 ;
outputUniqeChildEvents_tmp.dtp2_given = row1.VaccineType_DTP_Hib_HepB2 ;
outputUniqeChildEvents_tmp.dtp3_plan = encounter1.VaccineType_DTP_Hib_HepB3 ;
outputUniqeChildEvents_tmp.dtp3_given = row1.VaccineType_DTP_Hib_HepB3 ;
outputUniqeChildEvents_tmp.pcv1_plan = encounter1.VaccineType_PCV131 ;
outputUniqeChildEvents_tmp.pcv1_given = row1.VaccineType_PCV131 ;
outputUniqeChildEvents_tmp.pcv2_plan = encounter1.VaccineType_PCV132 ;
outputUniqeChildEvents_tmp.pcv2_given = row1.VaccineType_PCV132 ;
outputUniqeChildEvents_tmp.pcv3_plan = encounter1.VaccineType_PCV133 ;
outputUniqeChildEvents_tmp.pcv3_given = row1.VaccineType_PCV133 ;
outputUniqeChildEvents_tmp.mr1_plan = encounter1.VaccineType_MR1 ;
outputUniqeChildEvents_tmp.mr1_given = row1.VaccineType_Measles1 == null ? row1.VaccineType_MR1  : row1.VaccineType_Measles1 ;
outputUniqeChildEvents_tmp.mr2_plan = encounter1.VaccineType_MR2 ;
outputUniqeChildEvents_tmp.mr2_given = row1.VaccineType_Measles2 == null ? row1.VaccineType_MR2  : row1.VaccineType_Measles2 ;
outputUniqeChildEvents_tmp.rota1_plan = encounter1.VaccineType_rotavirus1 ;
outputUniqeChildEvents_tmp.rota1_given = row1.VaccineType_rotavirus1 ;
outputUniqeChildEvents_tmp.rota2_plan = encounter1.VaccineType_rotavirus2 ;
outputUniqeChildEvents_tmp.rota2_given = row1.VaccineType_rotavirus2 ;
outputUniqeChildEvents_tmp.weight = row3.qty ;
outputUniqeChildEvents_tmp.vitamina = row2.Supplement_VitaminA ;
outputUniqeChildEvents_tmp.mebendezol = row2.Supplement_Mebendazole ;
outputUniqeChildEvents_tmp.negated = null;
outputUniqeChildEvents_tmp.reason = null;
outputUniqeChildEvents = outputUniqeChildEvents_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "outputUniqeChildEvents"
if(outputUniqeChildEvents != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//outputUniqeChildEvents
			//outputUniqeChildEvents


			
				if(execStat){
					runStat.updateStatOnConnection("outputUniqeChildEvents"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(outputUniqeChildEvents.enc_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            outputUniqeChildEvents.enc_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.pat_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            outputUniqeChildEvents.pat_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.gender != null) {
                        sb_tFileOutputDelimited_1.append(
                            outputUniqeChildEvents.gender
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.start_utc != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.start_utc, "dd-MM-yyyy HH:mm")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.stop_utc != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.stop_utc, "dd-MM-yyyy HH:mm")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.mother_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            outputUniqeChildEvents.mother_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.tel != null) {
                        sb_tFileOutputDelimited_1.append(
                            outputUniqeChildEvents.tel
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.pmtct != null) {
                        sb_tFileOutputDelimited_1.append(
                            outputUniqeChildEvents.pmtct
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.place_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            outputUniqeChildEvents.place_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.place_name != null) {
                        sb_tFileOutputDelimited_1.append(
                            outputUniqeChildEvents.place_name
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.place_region != null) {
                        sb_tFileOutputDelimited_1.append(
                            outputUniqeChildEvents.place_region
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.place_district != null) {
                        sb_tFileOutputDelimited_1.append(
                            outputUniqeChildEvents.place_district
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.usr_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            outputUniqeChildEvents.usr_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.dob != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.dob, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.bcg_plan != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.bcg_plan, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.bcg_given != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.bcg_given, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.opv0_plan != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.opv0_plan, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.opv0_given != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.opv0_given, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.opv1_plan != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.opv1_plan, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.opv1_given != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.opv1_given, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.opv2_plan != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.opv2_plan, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.opv2_given != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.opv2_given, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.opv3_plan != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.opv3_plan, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.opv3_given != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.opv3_given, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.dtp1_plan != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.dtp1_plan, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.dtp1_given != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.dtp1_given, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.dtp2_plan != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.dtp2_plan, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.dtp2_given != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.dtp2_given, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.dtp3_plan != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.dtp3_plan, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.dtp3_given != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.dtp3_given, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.pcv1_plan != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.pcv1_plan, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.pcv1_given != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.pcv1_given, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.pcv2_plan != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.pcv2_plan, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.pcv2_given != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.pcv2_given, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.pcv3_plan != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.pcv3_plan, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.pcv3_given != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.pcv3_given, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.mr1_plan != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.mr1_plan, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.mr1_given != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.mr1_given, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.mr2_plan != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.mr2_plan, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.mr2_given != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.mr2_given, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.rota1_plan != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.rota1_plan, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.rota1_given != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.rota1_given, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.rota2_plan != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.rota2_plan, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.rota2_given != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.rota2_given, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.weight != null) {
                        sb_tFileOutputDelimited_1.append(
                            outputUniqeChildEvents.weight.toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.vitamina != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.vitamina, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.mebendezol != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(outputUniqeChildEvents.mebendezol, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.negated != null) {
                        sb_tFileOutputDelimited_1.append(
                            outputUniqeChildEvents.negated
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(outputUniqeChildEvents.reason != null) {
                        sb_tFileOutputDelimited_1.append(
                            outputUniqeChildEvents.reason
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "outputUniqeChildEvents"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	if (rs_tPostgresqlInput_2 != null) {
		rs_tPostgresqlInput_2.close();
	}
	if (stmt_tPostgresqlInput_2 != null) {
		stmt_tPostgresqlInput_2.close();
	}
}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
					if(tHash_Lookup_encounter1 != null) {
						tHash_Lookup_encounter1.endGet();
					}
					globalMap.remove( "tHash_Lookup_encounter1" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputUniqeChildEvents"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_encounter1"); 
				     			
				try{
					
	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_UniqueChildEvents = new byte[0];
    static byte[] commonByteArray_OPENIZ_UniqueChildEvents = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object enc_id;

				public Object getEnc_id () {
					return this.enc_id;
				}
				
			    public java.util.Date Supplement_Mebendazole;

				public java.util.Date getSupplement_Mebendazole () {
					return this.Supplement_Mebendazole;
				}
				
			    public java.util.Date Supplement_VitaminA;

				public java.util.Date getSupplement_VitaminA () {
					return this.Supplement_VitaminA;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.enc_id == null) ? 0 : this.enc_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.enc_id == null) {
							if (other.enc_id != null)
								return false;
						
						} else if (!this.enc_id.equals(other.enc_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.enc_id = this.enc_id;
	            other.Supplement_Mebendazole = this.Supplement_Mebendazole;
	            other.Supplement_VitaminA = this.Supplement_VitaminA;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.enc_id = this.enc_id;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_UniqueChildEvents) {

        	try {

        		int length = 0;
		
						this.enc_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.enc_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Supplement_Mebendazole = readDate(dis,ois);
					
						this.Supplement_VitaminA = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.Supplement_Mebendazole, dos, oos);
					
						writeDate(this.Supplement_VitaminA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("enc_id="+String.valueOf(enc_id));
		sb.append(",Supplement_Mebendazole="+String.valueOf(Supplement_Mebendazole));
		sb.append(",Supplement_VitaminA="+String.valueOf(Supplement_VitaminA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.enc_id, other.enc_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tPostgresqlInput_3 - inputs:(after_tPostgresqlInput_2) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,encounter1) outputs:(outputUniqeChildEvents)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_3", false);
		start_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_3";

	
		int tos_count_tPostgresqlInput_3 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_3 = 0;
		    java.sql.Connection conn_tPostgresqlInput_3 = null;
		        conn_tPostgresqlInput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3.createStatement();

		    String dbquery_tPostgresqlInput_3 = "select * from crosstab (\n$$\n	select enc_id, mat_tbl.type_mnemonic, sbadm_tbl.act_utc from  sbadm_tbl inner join enc_t"
+"bl using (enc_id) inner join mat_tbl using (mat_id) where sbadm_tbl.type_mnemonic ilike '%DrugTherapy%' order by 1, 2\n$"
+"$,\n$$\n	select distinct type_mnemonic from mat_tbl where mat_tbl.type_mnemonic ilike 'Supplement%' order by 1\n$$) as c"
+"t\n(\nenc_id uuid, \n\"Supplement-Mebendazole\" date,\n\"Supplement-VitaminA\" date\n)\n";
			

            	globalMap.put("tPostgresqlInput_3_QUERY",dbquery_tPostgresqlInput_3);
		    java.sql.ResultSet rs_tPostgresqlInput_3 = null;

		    try {
		    	rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3.executeQuery(dbquery_tPostgresqlInput_3);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3.getColumnCount();

		    String tmpContent_tPostgresqlInput_3 = null;
		    
		    
		    while (rs_tPostgresqlInput_3.next()) {
		        nb_line_tPostgresqlInput_3++;
		        
							if(colQtyInRs_tPostgresqlInput_3 < 1) {
								row2.enc_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(1) != null) {
                row2.enc_id = rs_tPostgresqlInput_3.getObject(1);
            } else {
                    row2.enc_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 2) {
								row2.Supplement_Mebendazole = null;
							} else {
										
			row2.Supplement_Mebendazole = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_3, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 3) {
								row2.Supplement_VitaminA = null;
							} else {
										
			row2.Supplement_VitaminA = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_3, 3);
		                    }
					


 



/**
 * [tPostgresqlInput_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 


	tos_count_tPostgresqlInput_3++;

/**
 * [tPostgresqlInput_3 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.enc_id = row2.enc_id;
				
				row2_HashRow.Supplement_Mebendazole = row2.Supplement_Mebendazole;
				
				row2_HashRow.Supplement_VitaminA = row2.Supplement_VitaminA;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

	}
}finally{
	if (rs_tPostgresqlInput_3 != null) {
		rs_tPostgresqlInput_3.close();
	}
	if (stmt_tPostgresqlInput_3 != null) {
		stmt_tPostgresqlInput_3.close();
	}
}
globalMap.put("tPostgresqlInput_3_NB_LINE",nb_line_tPostgresqlInput_3);
 

ok_Hash.put("tPostgresqlInput_3", true);
end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());




/**
 * [tPostgresqlInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_UniqueChildEvents = new byte[0];
    static byte[] commonByteArray_OPENIZ_UniqueChildEvents = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object act_id;

				public Object getAct_id () {
					return this.act_id;
				}
				
			    public Object enc_id;

				public Object getEnc_id () {
					return this.enc_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public java.util.Date act_utc;

				public java.util.Date getAct_utc () {
					return this.act_utc;
				}
				
			    public String typ_cs;

				public String getTyp_cs () {
					return this.typ_cs;
				}
				
			    public String int_cs;

				public String getInt_cs () {
					return this.int_cs;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public BigDecimal qty;

				public BigDecimal getQty () {
					return this.qty;
				}
				
			    public String uom;

				public String getUom () {
					return this.uom;
				}
				
			    public Object pat_id;

				public Object getPat_id () {
					return this.pat_id;
				}
				
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.enc_id == null) ? 0 : this.enc_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.enc_id == null) {
							if (other.enc_id != null)
								return false;
						
						} else if (!this.enc_id.equals(other.enc_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.act_id = this.act_id;
	            other.enc_id = this.enc_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            other.act_utc = this.act_utc;
	            other.typ_cs = this.typ_cs;
	            other.int_cs = this.int_cs;
	            other.usr_id = this.usr_id;
	            other.qty = this.qty;
	            other.uom = this.uom;
	            other.pat_id = this.pat_id;
	            other.fac_id = this.fac_id;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.enc_id = this.enc_id;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_UniqueChildEvents) {

        	try {

        		int length = 0;
		
						this.enc_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.enc_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.act_id = (Object) ois.readObject();
					
       			    	this.crt_etl_id = (Object) ois.readObject();
					
       			    	this.upd_etl_id = (Object) ois.readObject();
					
						this.crt_utc = readDate(dis,ois);
					
						this.upd_utc = readDate(dis,ois);
					
						this.obslt_utc = readDate(dis,ois);
					
						this.act_utc = readDate(dis,ois);
					
						this.typ_cs = readString(dis,ois);
					
						this.int_cs = readString(dis,ois);
					
       			    	this.usr_id = (Object) ois.readObject();
					
       			    	this.qty = (BigDecimal) ois.readObject();
					
						this.uom = readString(dis,ois);
					
       			    	this.pat_id = (Object) ois.readObject();
					
       			    	this.fac_id = (Object) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.act_id);
					
       			    	oos.writeObject(this.crt_etl_id);
					
       			    	oos.writeObject(this.upd_etl_id);
					
						writeDate(this.crt_utc, dos, oos);
					
						writeDate(this.upd_utc, dos, oos);
					
						writeDate(this.obslt_utc, dos, oos);
					
						writeDate(this.act_utc, dos, oos);
					
						writeString(this.typ_cs, dos, oos);
					
						writeString(this.int_cs, dos, oos);
					
       			    	oos.writeObject(this.usr_id);
					
       			    	oos.writeObject(this.qty);
					
						writeString(this.uom, dos, oos);
					
       			    	oos.writeObject(this.pat_id);
					
       			    	oos.writeObject(this.fac_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("act_id="+String.valueOf(act_id));
		sb.append(",enc_id="+String.valueOf(enc_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",act_utc="+String.valueOf(act_utc));
		sb.append(",typ_cs="+typ_cs);
		sb.append(",int_cs="+int_cs);
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",uom="+uom);
		sb.append(",pat_id="+String.valueOf(pat_id));
		sb.append(",fac_id="+String.valueOf(fac_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.enc_id, other.enc_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tPostgresqlInput_4 - inputs:(after_tPostgresqlInput_2) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,encounter1) outputs:(outputUniqeChildEvents)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_4", false);
		start_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_4";

	
		int tos_count_tPostgresqlInput_4 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_4 = 0;
		    java.sql.Connection conn_tPostgresqlInput_4 = null;
		        conn_tPostgresqlInput_4 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4.createStatement();

		    String dbquery_tPostgresqlInput_4 = "select * from qty_obs_tbl where enc_id is not null";
			

            	globalMap.put("tPostgresqlInput_4_QUERY",dbquery_tPostgresqlInput_4);
		    java.sql.ResultSet rs_tPostgresqlInput_4 = null;

		    try {
		    	rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4.executeQuery(dbquery_tPostgresqlInput_4);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4.getColumnCount();

		    String tmpContent_tPostgresqlInput_4 = null;
		    
		    
		    while (rs_tPostgresqlInput_4.next()) {
		        nb_line_tPostgresqlInput_4++;
		        
							if(colQtyInRs_tPostgresqlInput_4 < 1) {
								row3.act_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_4.getObject(1) != null) {
                row3.act_id = rs_tPostgresqlInput_4.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 2) {
								row3.enc_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_4.getObject(2) != null) {
                row3.enc_id = rs_tPostgresqlInput_4.getObject(2);
            } else {
                    row3.enc_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 3) {
								row3.crt_etl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_4.getObject(3) != null) {
                row3.crt_etl_id = rs_tPostgresqlInput_4.getObject(3);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 4) {
								row3.upd_etl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_4.getObject(4) != null) {
                row3.upd_etl_id = rs_tPostgresqlInput_4.getObject(4);
            } else {
                    row3.upd_etl_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 5) {
								row3.crt_utc = null;
							} else {
										
			row3.crt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_4, 5);
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 6) {
								row3.upd_utc = null;
							} else {
										
			row3.upd_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_4, 6);
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 7) {
								row3.obslt_utc = null;
							} else {
										
			row3.obslt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_4, 7);
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 8) {
								row3.act_utc = null;
							} else {
										
			row3.act_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_4, 8);
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 9) {
								row3.typ_cs = null;
							} else {
	                         		
        	row3.typ_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_4, 9, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 10) {
								row3.int_cs = null;
							} else {
	                         		
        	row3.int_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_4, 10, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 11) {
								row3.usr_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_4.getObject(11) != null) {
                row3.usr_id = rs_tPostgresqlInput_4.getObject(11);
            } else {
                    row3.usr_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 12) {
								row3.qty = null;
							} else {
		                          
            if(rs_tPostgresqlInput_4.getObject(12) != null) {
                row3.qty = rs_tPostgresqlInput_4.getBigDecimal(12);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 13) {
								row3.uom = null;
							} else {
	                         		
        	row3.uom = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_4, 13, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 14) {
								row3.pat_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_4.getObject(14) != null) {
                row3.pat_id = rs_tPostgresqlInput_4.getObject(14);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 15) {
								row3.fac_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_4.getObject(15) != null) {
                row3.fac_id = rs_tPostgresqlInput_4.getObject(15);
            } else {
                    row3.fac_id = null;
            }
		                    }
					


 



/**
 * [tPostgresqlInput_4 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 


	tos_count_tPostgresqlInput_4++;

/**
 * [tPostgresqlInput_4 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.act_id = row3.act_id;
				
				row3_HashRow.enc_id = row3.enc_id;
				
				row3_HashRow.crt_etl_id = row3.crt_etl_id;
				
				row3_HashRow.upd_etl_id = row3.upd_etl_id;
				
				row3_HashRow.crt_utc = row3.crt_utc;
				
				row3_HashRow.upd_utc = row3.upd_utc;
				
				row3_HashRow.obslt_utc = row3.obslt_utc;
				
				row3_HashRow.act_utc = row3.act_utc;
				
				row3_HashRow.typ_cs = row3.typ_cs;
				
				row3_HashRow.int_cs = row3.int_cs;
				
				row3_HashRow.usr_id = row3.usr_id;
				
				row3_HashRow.qty = row3.qty;
				
				row3_HashRow.uom = row3.uom;
				
				row3_HashRow.pat_id = row3.pat_id;
				
				row3_HashRow.fac_id = row3.fac_id;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

	}
}finally{
	if (rs_tPostgresqlInput_4 != null) {
		rs_tPostgresqlInput_4.close();
	}
	if (stmt_tPostgresqlInput_4 != null) {
		stmt_tPostgresqlInput_4.close();
	}
}
globalMap.put("tPostgresqlInput_4_NB_LINE",nb_line_tPostgresqlInput_4);
 

ok_Hash.put("tPostgresqlInput_4", true);
end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());




/**
 * [tPostgresqlInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

tHash_Lookup_row3.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class encounter1Struct implements routines.system.IPersistableComparableLookupRow<encounter1Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_UniqueChildEvents = new byte[0];
    static byte[] commonByteArray_OPENIZ_UniqueChildEvents = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object patient_id;

				public Object getPatient_id () {
					return this.patient_id;
				}
				
			    public java.util.Date VaccineType_BCG0;

				public java.util.Date getVaccineType_BCG0 () {
					return this.VaccineType_BCG0;
				}
				
			    public java.util.Date VaccineType_BCG1;

				public java.util.Date getVaccineType_BCG1 () {
					return this.VaccineType_BCG1;
				}
				
			    public java.util.Date VaccineType_BCG2;

				public java.util.Date getVaccineType_BCG2 () {
					return this.VaccineType_BCG2;
				}
				
			    public java.util.Date VaccineType_BCG3;

				public java.util.Date getVaccineType_BCG3 () {
					return this.VaccineType_BCG3;
				}
				
			    public java.util.Date VaccineType_DTP_Hib_HepB0;

				public java.util.Date getVaccineType_DTP_Hib_HepB0 () {
					return this.VaccineType_DTP_Hib_HepB0;
				}
				
			    public java.util.Date VaccineType_DTP_Hib_HepB1;

				public java.util.Date getVaccineType_DTP_Hib_HepB1 () {
					return this.VaccineType_DTP_Hib_HepB1;
				}
				
			    public java.util.Date VaccineType_DTP_Hib_HepB2;

				public java.util.Date getVaccineType_DTP_Hib_HepB2 () {
					return this.VaccineType_DTP_Hib_HepB2;
				}
				
			    public java.util.Date VaccineType_DTP_Hib_HepB3;

				public java.util.Date getVaccineType_DTP_Hib_HepB3 () {
					return this.VaccineType_DTP_Hib_HepB3;
				}
				
			    public java.util.Date VaccineType_Measles0;

				public java.util.Date getVaccineType_Measles0 () {
					return this.VaccineType_Measles0;
				}
				
			    public java.util.Date VaccineType_Measles1;

				public java.util.Date getVaccineType_Measles1 () {
					return this.VaccineType_Measles1;
				}
				
			    public java.util.Date VaccineType_Measles2;

				public java.util.Date getVaccineType_Measles2 () {
					return this.VaccineType_Measles2;
				}
				
			    public java.util.Date VaccineType_Measles3;

				public java.util.Date getVaccineType_Measles3 () {
					return this.VaccineType_Measles3;
				}
				
			    public java.util.Date VaccineType_MR0;

				public java.util.Date getVaccineType_MR0 () {
					return this.VaccineType_MR0;
				}
				
			    public java.util.Date VaccineType_MR1;

				public java.util.Date getVaccineType_MR1 () {
					return this.VaccineType_MR1;
				}
				
			    public java.util.Date VaccineType_MR2;

				public java.util.Date getVaccineType_MR2 () {
					return this.VaccineType_MR2;
				}
				
			    public java.util.Date VaccineType_MR3;

				public java.util.Date getVaccineType_MR3 () {
					return this.VaccineType_MR3;
				}
				
			    public java.util.Date VaccineType_OPV0;

				public java.util.Date getVaccineType_OPV0 () {
					return this.VaccineType_OPV0;
				}
				
			    public java.util.Date VaccineType_OPV1;

				public java.util.Date getVaccineType_OPV1 () {
					return this.VaccineType_OPV1;
				}
				
			    public java.util.Date VaccineType_OPV2;

				public java.util.Date getVaccineType_OPV2 () {
					return this.VaccineType_OPV2;
				}
				
			    public java.util.Date VaccineType_OPV3;

				public java.util.Date getVaccineType_OPV3 () {
					return this.VaccineType_OPV3;
				}
				
			    public java.util.Date VaccineType_PCV130;

				public java.util.Date getVaccineType_PCV130 () {
					return this.VaccineType_PCV130;
				}
				
			    public java.util.Date VaccineType_PCV131;

				public java.util.Date getVaccineType_PCV131 () {
					return this.VaccineType_PCV131;
				}
				
			    public java.util.Date VaccineType_PCV132;

				public java.util.Date getVaccineType_PCV132 () {
					return this.VaccineType_PCV132;
				}
				
			    public java.util.Date VaccineType_PCV133;

				public java.util.Date getVaccineType_PCV133 () {
					return this.VaccineType_PCV133;
				}
				
			    public java.util.Date VaccineType_rotavirus0;

				public java.util.Date getVaccineType_rotavirus0 () {
					return this.VaccineType_rotavirus0;
				}
				
			    public java.util.Date VaccineType_rotavirus1;

				public java.util.Date getVaccineType_rotavirus1 () {
					return this.VaccineType_rotavirus1;
				}
				
			    public java.util.Date VaccineType_rotavirus2;

				public java.util.Date getVaccineType_rotavirus2 () {
					return this.VaccineType_rotavirus2;
				}
				
			    public java.util.Date VaccineType_rotavirus3;

				public java.util.Date getVaccineType_rotavirus3 () {
					return this.VaccineType_rotavirus3;
				}
				
			    public java.util.Date VaccineType_tetanustoxoid0;

				public java.util.Date getVaccineType_tetanustoxoid0 () {
					return this.VaccineType_tetanustoxoid0;
				}
				
			    public java.util.Date VaccineType_tetanustoxoid1;

				public java.util.Date getVaccineType_tetanustoxoid1 () {
					return this.VaccineType_tetanustoxoid1;
				}
				
			    public java.util.Date VaccineType_tetanustoxoid2;

				public java.util.Date getVaccineType_tetanustoxoid2 () {
					return this.VaccineType_tetanustoxoid2;
				}
				
			    public java.util.Date VaccineType_tetanustoxoid3;

				public java.util.Date getVaccineType_tetanustoxoid3 () {
					return this.VaccineType_tetanustoxoid3;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patient_id == null) ? 0 : this.patient_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final encounter1Struct other = (encounter1Struct) obj;
		
						if (this.patient_id == null) {
							if (other.patient_id != null)
								return false;
						
						} else if (!this.patient_id.equals(other.patient_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(encounter1Struct other) {

		other.patient_id = this.patient_id;
	            other.VaccineType_BCG0 = this.VaccineType_BCG0;
	            other.VaccineType_BCG1 = this.VaccineType_BCG1;
	            other.VaccineType_BCG2 = this.VaccineType_BCG2;
	            other.VaccineType_BCG3 = this.VaccineType_BCG3;
	            other.VaccineType_DTP_Hib_HepB0 = this.VaccineType_DTP_Hib_HepB0;
	            other.VaccineType_DTP_Hib_HepB1 = this.VaccineType_DTP_Hib_HepB1;
	            other.VaccineType_DTP_Hib_HepB2 = this.VaccineType_DTP_Hib_HepB2;
	            other.VaccineType_DTP_Hib_HepB3 = this.VaccineType_DTP_Hib_HepB3;
	            other.VaccineType_Measles0 = this.VaccineType_Measles0;
	            other.VaccineType_Measles1 = this.VaccineType_Measles1;
	            other.VaccineType_Measles2 = this.VaccineType_Measles2;
	            other.VaccineType_Measles3 = this.VaccineType_Measles3;
	            other.VaccineType_MR0 = this.VaccineType_MR0;
	            other.VaccineType_MR1 = this.VaccineType_MR1;
	            other.VaccineType_MR2 = this.VaccineType_MR2;
	            other.VaccineType_MR3 = this.VaccineType_MR3;
	            other.VaccineType_OPV0 = this.VaccineType_OPV0;
	            other.VaccineType_OPV1 = this.VaccineType_OPV1;
	            other.VaccineType_OPV2 = this.VaccineType_OPV2;
	            other.VaccineType_OPV3 = this.VaccineType_OPV3;
	            other.VaccineType_PCV130 = this.VaccineType_PCV130;
	            other.VaccineType_PCV131 = this.VaccineType_PCV131;
	            other.VaccineType_PCV132 = this.VaccineType_PCV132;
	            other.VaccineType_PCV133 = this.VaccineType_PCV133;
	            other.VaccineType_rotavirus0 = this.VaccineType_rotavirus0;
	            other.VaccineType_rotavirus1 = this.VaccineType_rotavirus1;
	            other.VaccineType_rotavirus2 = this.VaccineType_rotavirus2;
	            other.VaccineType_rotavirus3 = this.VaccineType_rotavirus3;
	            other.VaccineType_tetanustoxoid0 = this.VaccineType_tetanustoxoid0;
	            other.VaccineType_tetanustoxoid1 = this.VaccineType_tetanustoxoid1;
	            other.VaccineType_tetanustoxoid2 = this.VaccineType_tetanustoxoid2;
	            other.VaccineType_tetanustoxoid3 = this.VaccineType_tetanustoxoid3;
	            
	}

	public void copyKeysDataTo(encounter1Struct other) {

		other.patient_id = this.patient_id;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_UniqueChildEvents) {

        	try {

        		int length = 0;
		
						this.patient_id = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.patient_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VaccineType_BCG0 = readDate(dis,ois);
					
						this.VaccineType_BCG1 = readDate(dis,ois);
					
						this.VaccineType_BCG2 = readDate(dis,ois);
					
						this.VaccineType_BCG3 = readDate(dis,ois);
					
						this.VaccineType_DTP_Hib_HepB0 = readDate(dis,ois);
					
						this.VaccineType_DTP_Hib_HepB1 = readDate(dis,ois);
					
						this.VaccineType_DTP_Hib_HepB2 = readDate(dis,ois);
					
						this.VaccineType_DTP_Hib_HepB3 = readDate(dis,ois);
					
						this.VaccineType_Measles0 = readDate(dis,ois);
					
						this.VaccineType_Measles1 = readDate(dis,ois);
					
						this.VaccineType_Measles2 = readDate(dis,ois);
					
						this.VaccineType_Measles3 = readDate(dis,ois);
					
						this.VaccineType_MR0 = readDate(dis,ois);
					
						this.VaccineType_MR1 = readDate(dis,ois);
					
						this.VaccineType_MR2 = readDate(dis,ois);
					
						this.VaccineType_MR3 = readDate(dis,ois);
					
						this.VaccineType_OPV0 = readDate(dis,ois);
					
						this.VaccineType_OPV1 = readDate(dis,ois);
					
						this.VaccineType_OPV2 = readDate(dis,ois);
					
						this.VaccineType_OPV3 = readDate(dis,ois);
					
						this.VaccineType_PCV130 = readDate(dis,ois);
					
						this.VaccineType_PCV131 = readDate(dis,ois);
					
						this.VaccineType_PCV132 = readDate(dis,ois);
					
						this.VaccineType_PCV133 = readDate(dis,ois);
					
						this.VaccineType_rotavirus0 = readDate(dis,ois);
					
						this.VaccineType_rotavirus1 = readDate(dis,ois);
					
						this.VaccineType_rotavirus2 = readDate(dis,ois);
					
						this.VaccineType_rotavirus3 = readDate(dis,ois);
					
						this.VaccineType_tetanustoxoid0 = readDate(dis,ois);
					
						this.VaccineType_tetanustoxoid1 = readDate(dis,ois);
					
						this.VaccineType_tetanustoxoid2 = readDate(dis,ois);
					
						this.VaccineType_tetanustoxoid3 = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.VaccineType_BCG0, dos, oos);
					
						writeDate(this.VaccineType_BCG1, dos, oos);
					
						writeDate(this.VaccineType_BCG2, dos, oos);
					
						writeDate(this.VaccineType_BCG3, dos, oos);
					
						writeDate(this.VaccineType_DTP_Hib_HepB0, dos, oos);
					
						writeDate(this.VaccineType_DTP_Hib_HepB1, dos, oos);
					
						writeDate(this.VaccineType_DTP_Hib_HepB2, dos, oos);
					
						writeDate(this.VaccineType_DTP_Hib_HepB3, dos, oos);
					
						writeDate(this.VaccineType_Measles0, dos, oos);
					
						writeDate(this.VaccineType_Measles1, dos, oos);
					
						writeDate(this.VaccineType_Measles2, dos, oos);
					
						writeDate(this.VaccineType_Measles3, dos, oos);
					
						writeDate(this.VaccineType_MR0, dos, oos);
					
						writeDate(this.VaccineType_MR1, dos, oos);
					
						writeDate(this.VaccineType_MR2, dos, oos);
					
						writeDate(this.VaccineType_MR3, dos, oos);
					
						writeDate(this.VaccineType_OPV0, dos, oos);
					
						writeDate(this.VaccineType_OPV1, dos, oos);
					
						writeDate(this.VaccineType_OPV2, dos, oos);
					
						writeDate(this.VaccineType_OPV3, dos, oos);
					
						writeDate(this.VaccineType_PCV130, dos, oos);
					
						writeDate(this.VaccineType_PCV131, dos, oos);
					
						writeDate(this.VaccineType_PCV132, dos, oos);
					
						writeDate(this.VaccineType_PCV133, dos, oos);
					
						writeDate(this.VaccineType_rotavirus0, dos, oos);
					
						writeDate(this.VaccineType_rotavirus1, dos, oos);
					
						writeDate(this.VaccineType_rotavirus2, dos, oos);
					
						writeDate(this.VaccineType_rotavirus3, dos, oos);
					
						writeDate(this.VaccineType_tetanustoxoid0, dos, oos);
					
						writeDate(this.VaccineType_tetanustoxoid1, dos, oos);
					
						writeDate(this.VaccineType_tetanustoxoid2, dos, oos);
					
						writeDate(this.VaccineType_tetanustoxoid3, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_id="+String.valueOf(patient_id));
		sb.append(",VaccineType_BCG0="+String.valueOf(VaccineType_BCG0));
		sb.append(",VaccineType_BCG1="+String.valueOf(VaccineType_BCG1));
		sb.append(",VaccineType_BCG2="+String.valueOf(VaccineType_BCG2));
		sb.append(",VaccineType_BCG3="+String.valueOf(VaccineType_BCG3));
		sb.append(",VaccineType_DTP_Hib_HepB0="+String.valueOf(VaccineType_DTP_Hib_HepB0));
		sb.append(",VaccineType_DTP_Hib_HepB1="+String.valueOf(VaccineType_DTP_Hib_HepB1));
		sb.append(",VaccineType_DTP_Hib_HepB2="+String.valueOf(VaccineType_DTP_Hib_HepB2));
		sb.append(",VaccineType_DTP_Hib_HepB3="+String.valueOf(VaccineType_DTP_Hib_HepB3));
		sb.append(",VaccineType_Measles0="+String.valueOf(VaccineType_Measles0));
		sb.append(",VaccineType_Measles1="+String.valueOf(VaccineType_Measles1));
		sb.append(",VaccineType_Measles2="+String.valueOf(VaccineType_Measles2));
		sb.append(",VaccineType_Measles3="+String.valueOf(VaccineType_Measles3));
		sb.append(",VaccineType_MR0="+String.valueOf(VaccineType_MR0));
		sb.append(",VaccineType_MR1="+String.valueOf(VaccineType_MR1));
		sb.append(",VaccineType_MR2="+String.valueOf(VaccineType_MR2));
		sb.append(",VaccineType_MR3="+String.valueOf(VaccineType_MR3));
		sb.append(",VaccineType_OPV0="+String.valueOf(VaccineType_OPV0));
		sb.append(",VaccineType_OPV1="+String.valueOf(VaccineType_OPV1));
		sb.append(",VaccineType_OPV2="+String.valueOf(VaccineType_OPV2));
		sb.append(",VaccineType_OPV3="+String.valueOf(VaccineType_OPV3));
		sb.append(",VaccineType_PCV130="+String.valueOf(VaccineType_PCV130));
		sb.append(",VaccineType_PCV131="+String.valueOf(VaccineType_PCV131));
		sb.append(",VaccineType_PCV132="+String.valueOf(VaccineType_PCV132));
		sb.append(",VaccineType_PCV133="+String.valueOf(VaccineType_PCV133));
		sb.append(",VaccineType_rotavirus0="+String.valueOf(VaccineType_rotavirus0));
		sb.append(",VaccineType_rotavirus1="+String.valueOf(VaccineType_rotavirus1));
		sb.append(",VaccineType_rotavirus2="+String.valueOf(VaccineType_rotavirus2));
		sb.append(",VaccineType_rotavirus3="+String.valueOf(VaccineType_rotavirus3));
		sb.append(",VaccineType_tetanustoxoid0="+String.valueOf(VaccineType_tetanustoxoid0));
		sb.append(",VaccineType_tetanustoxoid1="+String.valueOf(VaccineType_tetanustoxoid1));
		sb.append(",VaccineType_tetanustoxoid2="+String.valueOf(VaccineType_tetanustoxoid2));
		sb.append(",VaccineType_tetanustoxoid3="+String.valueOf(VaccineType_tetanustoxoid3));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(encounter1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_id, other.patient_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		encounter1Struct encounter1 = new encounter1Struct();




	
	/**
	 * [tAdvancedHash_encounter1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_encounter1", false);
		start_Hash.put("tAdvancedHash_encounter1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_encounter1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("encounter1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_encounter1 = 0;
		

			   		// connection name:encounter1
			   		// source node:tPostgresqlInput_1 - inputs:(after_tPostgresqlInput_2) outputs:(encounter1,encounter1) | target node:tAdvancedHash_encounter1 - inputs:(encounter1) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,encounter1) outputs:(outputUniqeChildEvents)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_encounter1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<encounter1Struct> tHash_Lookup_encounter1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<encounter1Struct>getLookup(matchingModeEnum_encounter1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_encounter1", tHash_Lookup_encounter1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_encounter1 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
		        conn_tPostgresqlInput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "\nselect * from crosstab(\n	'select patient_id, type_mnemonic || dose_seq, act_date from oizcp inner join mat_tbl on (p"
+"roduct_id = mat_id) order by 1, 2',\n	'select distinct type_mnemonic || dose_seq from mat_tbl, (select distinct dose_seq"
+" from oizcp) as doses where mat_tbl.type_mnemonic ilike ''VaccineType%'' order by 1'\n) as ct (\npatient_id uuid, \n\"Va"
+"ccineType-BCG0\" date,\n\"VaccineType-BCG1\" date,\n\"VaccineType-BCG2\" date,\n\"VaccineType-BCG3\" date,\n\"VaccineTyp"
+"e-DTP-Hib-HepB0\" date,\n\"VaccineType-DTP-Hib-HepB1\" date,\n\"VaccineType-DTP-Hib-HepB2\" date,\n\"VaccineType-DTP-Hib"
+"-HepB3\" date,\n\"VaccineType-Measles0\" date,\n\"VaccineType-Measles1\" date,\n\"VaccineType-Measles2\" date,\n\"Vaccin"
+"eType-Measles3\" date,\n\"VaccineType-MR0\" date,\n\"VaccineType-MR1\" date,\n\"VaccineType-MR2\" date,\n\"VaccineType-M"
+"R3\" date,\n\"VaccineType-OPV0\" date,\n\"VaccineType-OPV1\" date,\n\"VaccineType-OPV2\" date,\n\"VaccineType-OPV3\" dat"
+"e,\n\"VaccineType-PCV130\" date,\n\"VaccineType-PCV131\" date,\n\"VaccineType-PCV132\" date,\n\"VaccineType-PCV133\" dat"
+"e,\n\"VaccineType-rotavirus0\" date,\n\"VaccineType-rotavirus1\" date,\n\"VaccineType-rotavirus2\" date,\n\"VaccineType-"
+"rotavirus3\" date,\n\"VaccineType-tetanustoxoid0\" date,\n\"VaccineType-tetanustoxoid1\" date,\n\"VaccineType-tetanustox"
+"oid2\" date,\n\"VaccineType-tetanustoxoid3\" date)\n";
			

            	globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);
		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;

		    try {
		    	rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								encounter1.patient_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(1) != null) {
                encounter1.patient_id = rs_tPostgresqlInput_1.getObject(1);
            } else {
                    encounter1.patient_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								encounter1.VaccineType_BCG0 = null;
							} else {
										
			encounter1.VaccineType_BCG0 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 3) {
								encounter1.VaccineType_BCG1 = null;
							} else {
										
			encounter1.VaccineType_BCG1 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 3);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 4) {
								encounter1.VaccineType_BCG2 = null;
							} else {
										
			encounter1.VaccineType_BCG2 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 4);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 5) {
								encounter1.VaccineType_BCG3 = null;
							} else {
										
			encounter1.VaccineType_BCG3 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 5);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 6) {
								encounter1.VaccineType_DTP_Hib_HepB0 = null;
							} else {
										
			encounter1.VaccineType_DTP_Hib_HepB0 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 6);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 7) {
								encounter1.VaccineType_DTP_Hib_HepB1 = null;
							} else {
										
			encounter1.VaccineType_DTP_Hib_HepB1 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 7);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 8) {
								encounter1.VaccineType_DTP_Hib_HepB2 = null;
							} else {
										
			encounter1.VaccineType_DTP_Hib_HepB2 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 8);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 9) {
								encounter1.VaccineType_DTP_Hib_HepB3 = null;
							} else {
										
			encounter1.VaccineType_DTP_Hib_HepB3 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 9);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 10) {
								encounter1.VaccineType_Measles0 = null;
							} else {
										
			encounter1.VaccineType_Measles0 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 10);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 11) {
								encounter1.VaccineType_Measles1 = null;
							} else {
										
			encounter1.VaccineType_Measles1 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 11);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 12) {
								encounter1.VaccineType_Measles2 = null;
							} else {
										
			encounter1.VaccineType_Measles2 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 12);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 13) {
								encounter1.VaccineType_Measles3 = null;
							} else {
										
			encounter1.VaccineType_Measles3 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 13);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 14) {
								encounter1.VaccineType_MR0 = null;
							} else {
										
			encounter1.VaccineType_MR0 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 14);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 15) {
								encounter1.VaccineType_MR1 = null;
							} else {
										
			encounter1.VaccineType_MR1 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 15);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 16) {
								encounter1.VaccineType_MR2 = null;
							} else {
										
			encounter1.VaccineType_MR2 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 16);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 17) {
								encounter1.VaccineType_MR3 = null;
							} else {
										
			encounter1.VaccineType_MR3 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 17);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 18) {
								encounter1.VaccineType_OPV0 = null;
							} else {
										
			encounter1.VaccineType_OPV0 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 18);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 19) {
								encounter1.VaccineType_OPV1 = null;
							} else {
										
			encounter1.VaccineType_OPV1 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 19);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 20) {
								encounter1.VaccineType_OPV2 = null;
							} else {
										
			encounter1.VaccineType_OPV2 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 20);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 21) {
								encounter1.VaccineType_OPV3 = null;
							} else {
										
			encounter1.VaccineType_OPV3 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 21);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 22) {
								encounter1.VaccineType_PCV130 = null;
							} else {
										
			encounter1.VaccineType_PCV130 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 22);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 23) {
								encounter1.VaccineType_PCV131 = null;
							} else {
										
			encounter1.VaccineType_PCV131 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 23);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 24) {
								encounter1.VaccineType_PCV132 = null;
							} else {
										
			encounter1.VaccineType_PCV132 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 24);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 25) {
								encounter1.VaccineType_PCV133 = null;
							} else {
										
			encounter1.VaccineType_PCV133 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 25);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 26) {
								encounter1.VaccineType_rotavirus0 = null;
							} else {
										
			encounter1.VaccineType_rotavirus0 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 26);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 27) {
								encounter1.VaccineType_rotavirus1 = null;
							} else {
										
			encounter1.VaccineType_rotavirus1 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 27);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 28) {
								encounter1.VaccineType_rotavirus2 = null;
							} else {
										
			encounter1.VaccineType_rotavirus2 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 28);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 29) {
								encounter1.VaccineType_rotavirus3 = null;
							} else {
										
			encounter1.VaccineType_rotavirus3 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 29);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 30) {
								encounter1.VaccineType_tetanustoxoid0 = null;
							} else {
										
			encounter1.VaccineType_tetanustoxoid0 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 30);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 31) {
								encounter1.VaccineType_tetanustoxoid1 = null;
							} else {
										
			encounter1.VaccineType_tetanustoxoid1 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 31);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 32) {
								encounter1.VaccineType_tetanustoxoid2 = null;
							} else {
										
			encounter1.VaccineType_tetanustoxoid2 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 32);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 33) {
								encounter1.VaccineType_tetanustoxoid3 = null;
							} else {
										
			encounter1.VaccineType_tetanustoxoid3 = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 33);
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_encounter1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_encounter1";

	

			//encounter1
			//encounter1


			
				if(execStat){
					runStat.updateStatOnConnection("encounter1"+iterateId,1, 1);
				} 
			

		


			   
			   

					encounter1Struct encounter1_HashRow = new encounter1Struct();
		   	   	   
				
				encounter1_HashRow.patient_id = encounter1.patient_id;
				
				encounter1_HashRow.VaccineType_BCG0 = encounter1.VaccineType_BCG0;
				
				encounter1_HashRow.VaccineType_BCG1 = encounter1.VaccineType_BCG1;
				
				encounter1_HashRow.VaccineType_BCG2 = encounter1.VaccineType_BCG2;
				
				encounter1_HashRow.VaccineType_BCG3 = encounter1.VaccineType_BCG3;
				
				encounter1_HashRow.VaccineType_DTP_Hib_HepB0 = encounter1.VaccineType_DTP_Hib_HepB0;
				
				encounter1_HashRow.VaccineType_DTP_Hib_HepB1 = encounter1.VaccineType_DTP_Hib_HepB1;
				
				encounter1_HashRow.VaccineType_DTP_Hib_HepB2 = encounter1.VaccineType_DTP_Hib_HepB2;
				
				encounter1_HashRow.VaccineType_DTP_Hib_HepB3 = encounter1.VaccineType_DTP_Hib_HepB3;
				
				encounter1_HashRow.VaccineType_Measles0 = encounter1.VaccineType_Measles0;
				
				encounter1_HashRow.VaccineType_Measles1 = encounter1.VaccineType_Measles1;
				
				encounter1_HashRow.VaccineType_Measles2 = encounter1.VaccineType_Measles2;
				
				encounter1_HashRow.VaccineType_Measles3 = encounter1.VaccineType_Measles3;
				
				encounter1_HashRow.VaccineType_MR0 = encounter1.VaccineType_MR0;
				
				encounter1_HashRow.VaccineType_MR1 = encounter1.VaccineType_MR1;
				
				encounter1_HashRow.VaccineType_MR2 = encounter1.VaccineType_MR2;
				
				encounter1_HashRow.VaccineType_MR3 = encounter1.VaccineType_MR3;
				
				encounter1_HashRow.VaccineType_OPV0 = encounter1.VaccineType_OPV0;
				
				encounter1_HashRow.VaccineType_OPV1 = encounter1.VaccineType_OPV1;
				
				encounter1_HashRow.VaccineType_OPV2 = encounter1.VaccineType_OPV2;
				
				encounter1_HashRow.VaccineType_OPV3 = encounter1.VaccineType_OPV3;
				
				encounter1_HashRow.VaccineType_PCV130 = encounter1.VaccineType_PCV130;
				
				encounter1_HashRow.VaccineType_PCV131 = encounter1.VaccineType_PCV131;
				
				encounter1_HashRow.VaccineType_PCV132 = encounter1.VaccineType_PCV132;
				
				encounter1_HashRow.VaccineType_PCV133 = encounter1.VaccineType_PCV133;
				
				encounter1_HashRow.VaccineType_rotavirus0 = encounter1.VaccineType_rotavirus0;
				
				encounter1_HashRow.VaccineType_rotavirus1 = encounter1.VaccineType_rotavirus1;
				
				encounter1_HashRow.VaccineType_rotavirus2 = encounter1.VaccineType_rotavirus2;
				
				encounter1_HashRow.VaccineType_rotavirus3 = encounter1.VaccineType_rotavirus3;
				
				encounter1_HashRow.VaccineType_tetanustoxoid0 = encounter1.VaccineType_tetanustoxoid0;
				
				encounter1_HashRow.VaccineType_tetanustoxoid1 = encounter1.VaccineType_tetanustoxoid1;
				
				encounter1_HashRow.VaccineType_tetanustoxoid2 = encounter1.VaccineType_tetanustoxoid2;
				
				encounter1_HashRow.VaccineType_tetanustoxoid3 = encounter1.VaccineType_tetanustoxoid3;
				
			tHash_Lookup_encounter1.put(encounter1_HashRow);
			
            




 


	tos_count_tAdvancedHash_encounter1++;

/**
 * [tAdvancedHash_encounter1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_encounter1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_encounter1";

	

 



/**
 * [tAdvancedHash_encounter1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_encounter1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_encounter1";

	

 



/**
 * [tAdvancedHash_encounter1 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	if (rs_tPostgresqlInput_1 != null) {
		rs_tPostgresqlInput_1.close();
	}
	if (stmt_tPostgresqlInput_1 != null) {
		stmt_tPostgresqlInput_1.close();
	}
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_encounter1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_encounter1";

	

tHash_Lookup_encounter1.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("encounter1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_encounter1", true);
end_Hash.put("tAdvancedHash_encounter1", System.currentTimeMillis());




/**
 * [tAdvancedHash_encounter1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_encounter1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_encounter1";

	

 



/**
 * [tAdvancedHash_encounter1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final UniqueChildEvents UniqueChildEventsClass = new UniqueChildEvents();

        int exitCode = UniqueChildEventsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = UniqueChildEvents.class.getClassLoader().getResourceAsStream("openiz/uniquechildevents_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = UniqueChildEvents.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("resultOutput", "id_String");
				
                context.resultOutput=(String) context.getProperty("resultOutput");
				    context.setContextType("dbName", "id_String");
				
                context.dbName=(String) context.getProperty("dbName");
				    context.setContextType("dbPassword", "id_String");
				
                context.dbPassword=(String) context.getProperty("dbPassword");
				    context.setContextType("dbPort", "id_String");
				
                context.dbPort=(String) context.getProperty("dbPort");
				    context.setContextType("dbServer", "id_String");
				
                context.dbServer=(String) context.getProperty("dbServer");
				    context.setContextType("dbUser", "id_String");
				
                context.dbUser=(String) context.getProperty("dbUser");
				    context.setContextType("dwName", "id_String");
				
                context.dwName=(String) context.getProperty("dwName");
				    context.setContextType("dwPassword", "id_String");
				
                context.dwPassword=(String) context.getProperty("dwPassword");
				    context.setContextType("dwPort", "id_String");
				
                context.dwPort=(String) context.getProperty("dwPort");
				    context.setContextType("dwServer", "id_String");
				
                context.dwServer=(String) context.getProperty("dwServer");
				    context.setContextType("dwUser", "id_String");
				
                context.dwUser=(String) context.getProperty("dwUser");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("resultOutput")) {
                context.resultOutput = (String) parentContextMap.get("resultOutput");
            }if (parentContextMap.containsKey("dbName")) {
                context.dbName = (String) parentContextMap.get("dbName");
            }if (parentContextMap.containsKey("dbPassword")) {
                context.dbPassword = (String) parentContextMap.get("dbPassword");
            }if (parentContextMap.containsKey("dbPort")) {
                context.dbPort = (String) parentContextMap.get("dbPort");
            }if (parentContextMap.containsKey("dbServer")) {
                context.dbServer = (String) parentContextMap.get("dbServer");
            }if (parentContextMap.containsKey("dbUser")) {
                context.dbUser = (String) parentContextMap.get("dbUser");
            }if (parentContextMap.containsKey("dwName")) {
                context.dwName = (String) parentContextMap.get("dwName");
            }if (parentContextMap.containsKey("dwPassword")) {
                context.dwPassword = (String) parentContextMap.get("dwPassword");
            }if (parentContextMap.containsKey("dwPort")) {
                context.dwPort = (String) parentContextMap.get("dwPort");
            }if (parentContextMap.containsKey("dwServer")) {
                context.dwServer = (String) parentContextMap.get("dwServer");
            }if (parentContextMap.containsKey("dwUser")) {
                context.dwUser = (String) parentContextMap.get("dwUser");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tPostgresqlConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostgresqlConnection_1) {
globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", -1);

e_tPostgresqlConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : UniqueChildEvents");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tPostgresqlConnection_1", globalMap.get("conn_tPostgresqlConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     242572 characters generated by Talend Open Studio for Data Integration 
 *     on the September 9, 2020 5:44:50 EDT PM
 ************************************************************************************************/