// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package openiz.warehouse_stockdata_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Warehouse_StockData Purpose: Warehouses Stock Data<br>
 * Description: Copies and replays stock transactions <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class Warehouse_StockData implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(dbName != null){
				
					this.setProperty("dbName", dbName.toString());
				
			}
			
			if(dbPassword != null){
				
					this.setProperty("dbPassword", dbPassword.toString());
				
			}
			
			if(dbPort != null){
				
					this.setProperty("dbPort", dbPort.toString());
				
			}
			
			if(dbServer != null){
				
					this.setProperty("dbServer", dbServer.toString());
				
			}
			
			if(dbUser != null){
				
					this.setProperty("dbUser", dbUser.toString());
				
			}
			
			if(dwName != null){
				
					this.setProperty("dwName", dwName.toString());
				
			}
			
			if(dwPassword != null){
				
					this.setProperty("dwPassword", dwPassword.toString());
				
			}
			
			if(dwPort != null){
				
					this.setProperty("dwPort", dwPort.toString());
				
			}
			
			if(dwServer != null){
				
					this.setProperty("dwServer", dwServer.toString());
				
			}
			
			if(dwUser != null){
				
					this.setProperty("dwUser", dwUser.toString());
				
			}
			
			if(dwTemplate != null){
				
					this.setProperty("dwTemplate", dwTemplate.toString());
				
			}
			
			if(dwWorking != null){
				
					this.setProperty("dwWorking", dwWorking.toString());
				
			}
			
		}

public String dbName;
public String getDbName(){
	return this.dbName;
}
public String dbPassword;
public String getDbPassword(){
	return this.dbPassword;
}
public String dbPort;
public String getDbPort(){
	return this.dbPort;
}
public String dbServer;
public String getDbServer(){
	return this.dbServer;
}
public String dbUser;
public String getDbUser(){
	return this.dbUser;
}
public String dwName;
public String getDwName(){
	return this.dwName;
}
public String dwPassword;
public String getDwPassword(){
	return this.dwPassword;
}
public String dwPort;
public String getDwPort(){
	return this.dwPort;
}
public String dwServer;
public String getDwServer(){
	return this.dwServer;
}
public String dwUser;
public String getDwUser(){
	return this.dwUser;
}
public String dwTemplate;
public String getDwTemplate(){
	return this.dwTemplate;
}
public String dwWorking;
public String getDwWorking(){
	return this.dwWorking;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Warehouse_StockData";
	private final String projectName = "OPENIZ";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Warehouse_StockData.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Warehouse_StockData.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostgresqlConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError3", 0, "error");
								}
							
							
								errorCode = null;
								tPostgresqlRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError2", 0, "error");
								}
							
							
								errorCode = null;
								tPostgresqlRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tPostgresqlRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRollback_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRollback_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRollback_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPostgresqlConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_2", false);
		start_Hash.put("tPostgresqlConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_2";

	
		int tos_count_tPostgresqlConnection_2 = 0;
		


	
		String url_tPostgresqlConnection_2 = "jdbc:postgresql://"+context.dwServer+":"+context.dwPort+"/"+context.dwWorking; 
		String dbUser_tPostgresqlConnection_2 = context.dwUser;
		
		
			
	final String decryptedPassword_tPostgresqlConnection_2 = context.dwPassword; 
			String dbPwd_tPostgresqlConnection_2 = decryptedPassword_tPostgresqlConnection_2;
		
	java.sql.Connection conn_tPostgresqlConnection_2 = null;
	
		java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_2 =  java.sql.DriverManager.getDrivers();
    while (drivers_tPostgresqlConnection_2.hasMoreElements()) {
        java.sql.Driver d_tPostgresqlConnection_2 = drivers_tPostgresqlConnection_2.nextElement();
        java.util.List<String> driverList_tPostgresqlConnection_2 = java.util.Arrays.<String>asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver");
        if (driverList_tPostgresqlConnection_2.contains(d_tPostgresqlConnection_2.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tPostgresqlConnection_2);
                java.sql.DriverManager.registerDriver(d_tPostgresqlConnection_2);
            } catch (java.lang.Exception e_tPostgresqlConnection_2) {
            		//do nothing
            }
        }
    }
					String driverClass_tPostgresqlConnection_2 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tPostgresqlConnection_2);
		
				conn_tPostgresqlConnection_2 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_2,dbUser_tPostgresqlConnection_2,dbPwd_tPostgresqlConnection_2);

		globalMap.put("conn_tPostgresqlConnection_2", conn_tPostgresqlConnection_2);
	if (null != conn_tPostgresqlConnection_2) {
		
			conn_tPostgresqlConnection_2.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_2","public");

	globalMap.put("conn_" + "tPostgresqlConnection_2",conn_tPostgresqlConnection_2);

 



/**
 * [tPostgresqlConnection_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 


	tos_count_tPostgresqlConnection_2++;

/**
 * [tPostgresqlConnection_2 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 



/**
 * [tPostgresqlConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 



/**
 * [tPostgresqlConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlConnection_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 

ok_Hash.put("tPostgresqlConnection_2", true);
end_Hash.put("tPostgresqlConnection_2", System.currentTimeMillis());




/**
 * [tPostgresqlConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tPostgresqlConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_2";

	

 



/**
 * [tPostgresqlConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_1", false);
		start_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_1";

	
		int tos_count_tPostgresqlConnection_1 = 0;
		


	
		String url_tPostgresqlConnection_1 = "jdbc:postgresql://"+context.dbServer+":"+context.dbPort+"/"+context.dbName; 
		String dbUser_tPostgresqlConnection_1 = context.dbUser;
		
		
			
	final String decryptedPassword_tPostgresqlConnection_1 = context.dbPassword; 
			String dbPwd_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;
		
	java.sql.Connection conn_tPostgresqlConnection_1 = null;
	
		java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_1 =  java.sql.DriverManager.getDrivers();
    while (drivers_tPostgresqlConnection_1.hasMoreElements()) {
        java.sql.Driver d_tPostgresqlConnection_1 = drivers_tPostgresqlConnection_1.nextElement();
        java.util.List<String> driverList_tPostgresqlConnection_1 = java.util.Arrays.<String>asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver");
        if (driverList_tPostgresqlConnection_1.contains(d_tPostgresqlConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tPostgresqlConnection_1);
                java.sql.DriverManager.registerDriver(d_tPostgresqlConnection_1);
            } catch (java.lang.Exception e_tPostgresqlConnection_1) {
            		//do nothing
            }
        }
    }
					String driverClass_tPostgresqlConnection_1 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tPostgresqlConnection_1);
		
				conn_tPostgresqlConnection_1 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_1,dbUser_tPostgresqlConnection_1,dbPwd_tPostgresqlConnection_1);

		globalMap.put("conn_tPostgresqlConnection_1", conn_tPostgresqlConnection_1);
	if (null != conn_tPostgresqlConnection_1) {
		
			conn_tPostgresqlConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_1","public");

	globalMap.put("conn_" + "tPostgresqlConnection_1",conn_tPostgresqlConnection_1);

 



/**
 * [tPostgresqlConnection_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 


	tos_count_tPostgresqlConnection_1++;

/**
 * [tPostgresqlConnection_1 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 

ok_Hash.put("tPostgresqlConnection_1", true);
end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());




/**
 * [tPostgresqlConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tWarn_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Transforming Materials","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 3, "Transforming Materials", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_1_WARN_MESSAGES", "Transforming Materials"); 
	globalMap.put("tWarn_1_WARN_PRIORITY", 3);
	globalMap.put("tWarn_1_WARN_CODE", 42);
	
} catch (Exception e_tWarn_1) {
	logIgnoredError(String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1), e_tWarn_1);
}


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_end ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tPostgresqlInput_3Process(globalMap);



/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	


public static class outputMaterialsStruct implements routines.system.IPersistableRow<outputMaterialsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_StockData = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_StockData = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object mat_id;

				public Object getMat_id () {
					return this.mat_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public String type_mnemonic;

				public String getType_mnemonic () {
					return this.type_mnemonic;
				}
				
			    public String dose_unit;

				public String getDose_unit () {
					return this.dose_unit;
				}
				
			    public String form_code;

				public String getForm_code () {
					return this.form_code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.mat_id == null) ? 0 : this.mat_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputMaterialsStruct other = (outputMaterialsStruct) obj;
		
						if (this.mat_id == null) {
							if (other.mat_id != null)
								return false;
						
						} else if (!this.mat_id.equals(other.mat_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputMaterialsStruct other) {

		other.mat_id = this.mat_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            other.type_mnemonic = this.type_mnemonic;
	            other.dose_unit = this.dose_unit;
	            other.form_code = this.form_code;
	            
	}

	public void copyKeysDataTo(outputMaterialsStruct other) {

		other.mat_id = this.mat_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_StockData.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_StockData.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_StockData, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_StockData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_StockData) {

        	try {

        		int length = 0;
		
						this.mat_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.type_mnemonic = readString(dis);
					
					this.dose_unit = readString(dis);
					
					this.form_code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.mat_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// String
				
						writeString(this.type_mnemonic,dos);
					
					// String
				
						writeString(this.dose_unit,dos);
					
					// String
				
						writeString(this.form_code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("mat_id="+String.valueOf(mat_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",type_mnemonic="+type_mnemonic);
		sb.append(",dose_unit="+dose_unit);
		sb.append(",form_code="+form_code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputMaterialsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.mat_id, other.mat_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_StockData = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_StockData = new byte[0];

	
			    public Object ent_vrsn_id;

				public Object getEnt_vrsn_id () {
					return this.ent_vrsn_id;
				}
				
			    public Object cls_cd_id;

				public Object getCls_cd_id () {
					return this.cls_cd_id;
				}
				
			    public Object dtr_cd_id;

				public Object getDtr_cd_id () {
					return this.dtr_cd_id;
				}
				
			    public Object tpl_id;

				public Object getTpl_id () {
					return this.tpl_id;
				}
				
			    public Double vrsn_seq_id;

				public Double getVrsn_seq_id () {
					return this.vrsn_seq_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public Object rplc_vrsn_id;

				public Object getRplc_vrsn_id () {
					return this.rplc_vrsn_id;
				}
				
			    public Object sts_cd_id;

				public Object getSts_cd_id () {
					return this.sts_cd_id;
				}
				
			    public Object typ_cd_id;

				public Object getTyp_cd_id () {
					return this.typ_cd_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public Object crt_usr_id;

				public Object getCrt_usr_id () {
					return this.crt_usr_id;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object obslt_usr_id;

				public Object getObslt_usr_id () {
					return this.obslt_usr_id;
				}
				
			    public String sts_cs;

				public String getSts_cs () {
					return this.sts_cs;
				}
				
			    public java.util.Date exp_utc;

				public java.util.Date getExp_utc () {
					return this.exp_utc;
				}
				
			    public Object frm_cd_id;

				public Object getFrm_cd_id () {
					return this.frm_cd_id;
				}
				
			    public Double qty;

				public Double getQty () {
					return this.qty;
				}
				
			    public Object qty_cd_id;

				public Object getQty_cd_id () {
					return this.qty_cd_id;
				}
				
			    public Boolean is_adm;

				public Boolean getIs_adm () {
					return this.is_adm;
				}
				
			    public String type_cs;

				public String getType_cs () {
					return this.type_cs;
				}
				
			    public String form;

				public String getForm () {
					return this.form;
				}
				
			    public String qty1;

				public String getQty1 () {
					return this.qty1;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_StockData.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_StockData.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_StockData, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_StockData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_StockData) {

        	try {

        		int length = 0;
		
						this.ent_vrsn_id = (Object) dis.readObject();
					
						this.cls_cd_id = (Object) dis.readObject();
					
						this.dtr_cd_id = (Object) dis.readObject();
					
						this.tpl_id = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.vrsn_seq_id = null;
           				} else {
           			    	this.vrsn_seq_id = dis.readDouble();
           				}
					
						this.ent_id = (Object) dis.readObject();
					
						this.rplc_vrsn_id = (Object) dis.readObject();
					
						this.sts_cd_id = (Object) dis.readObject();
					
						this.typ_cd_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
						this.crt_usr_id = (Object) dis.readObject();
					
					this.obslt_utc = readDate(dis);
					
						this.obslt_usr_id = (Object) dis.readObject();
					
					this.sts_cs = readString(dis);
					
					this.exp_utc = readDate(dis);
					
						this.frm_cd_id = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qty = null;
           				} else {
           			    	this.qty = dis.readDouble();
           				}
					
						this.qty_cd_id = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_adm = null;
           				} else {
           			    	this.is_adm = dis.readBoolean();
           				}
					
					this.type_cs = readString(dis);
					
					this.form = readString(dis);
					
					this.qty1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.cls_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.dtr_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.tpl_id);
					
					// Double
				
						if(this.vrsn_seq_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.vrsn_seq_id);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// Object
				
       			    	dos.writeObject(this.rplc_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.sts_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.typ_cd_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.crt_usr_id);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.obslt_usr_id);
					
					// String
				
						writeString(this.sts_cs,dos);
					
					// java.util.Date
				
						writeDate(this.exp_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.frm_cd_id);
					
					// Double
				
						if(this.qty == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.qty);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.qty_cd_id);
					
					// Boolean
				
						if(this.is_adm == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_adm);
		            	}
					
					// String
				
						writeString(this.type_cs,dos);
					
					// String
				
						writeString(this.form,dos);
					
					// String
				
						writeString(this.qty1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_vrsn_id="+String.valueOf(ent_vrsn_id));
		sb.append(",cls_cd_id="+String.valueOf(cls_cd_id));
		sb.append(",dtr_cd_id="+String.valueOf(dtr_cd_id));
		sb.append(",tpl_id="+String.valueOf(tpl_id));
		sb.append(",vrsn_seq_id="+String.valueOf(vrsn_seq_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",rplc_vrsn_id="+String.valueOf(rplc_vrsn_id));
		sb.append(",sts_cd_id="+String.valueOf(sts_cd_id));
		sb.append(",typ_cd_id="+String.valueOf(typ_cd_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",crt_usr_id="+String.valueOf(crt_usr_id));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",obslt_usr_id="+String.valueOf(obslt_usr_id));
		sb.append(",sts_cs="+sts_cs);
		sb.append(",exp_utc="+String.valueOf(exp_utc));
		sb.append(",frm_cd_id="+String.valueOf(frm_cd_id));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",qty_cd_id="+String.valueOf(qty_cd_id));
		sb.append(",is_adm="+String.valueOf(is_adm));
		sb.append(",type_cs="+type_cs);
		sb.append(",form="+form);
		sb.append(",qty1="+qty1);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_3Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_3Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_StockData = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_StockData = new byte[0];

	
			    public Object ent_vrsn_id;

				public Object getEnt_vrsn_id () {
					return this.ent_vrsn_id;
				}
				
			    public Object cls_cd_id;

				public Object getCls_cd_id () {
					return this.cls_cd_id;
				}
				
			    public Object dtr_cd_id;

				public Object getDtr_cd_id () {
					return this.dtr_cd_id;
				}
				
			    public Object tpl_id;

				public Object getTpl_id () {
					return this.tpl_id;
				}
				
			    public Double vrsn_seq_id;

				public Double getVrsn_seq_id () {
					return this.vrsn_seq_id;
				}
				
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public Object rplc_vrsn_id;

				public Object getRplc_vrsn_id () {
					return this.rplc_vrsn_id;
				}
				
			    public Object sts_cd_id;

				public Object getSts_cd_id () {
					return this.sts_cd_id;
				}
				
			    public Object typ_cd_id;

				public Object getTyp_cd_id () {
					return this.typ_cd_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public Object crt_usr_id;

				public Object getCrt_usr_id () {
					return this.crt_usr_id;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public Object obslt_usr_id;

				public Object getObslt_usr_id () {
					return this.obslt_usr_id;
				}
				
			    public String sts_cs;

				public String getSts_cs () {
					return this.sts_cs;
				}
				
			    public java.util.Date exp_utc;

				public java.util.Date getExp_utc () {
					return this.exp_utc;
				}
				
			    public Object frm_cd_id;

				public Object getFrm_cd_id () {
					return this.frm_cd_id;
				}
				
			    public Double qty;

				public Double getQty () {
					return this.qty;
				}
				
			    public Object qty_cd_id;

				public Object getQty_cd_id () {
					return this.qty_cd_id;
				}
				
			    public Boolean is_adm;

				public Boolean getIs_adm () {
					return this.is_adm;
				}
				
			    public String type_cs;

				public String getType_cs () {
					return this.type_cs;
				}
				
			    public String form;

				public String getForm () {
					return this.form;
				}
				
			    public String qty1;

				public String getQty1 () {
					return this.qty1;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_StockData.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_StockData.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_StockData, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_StockData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_StockData) {

        	try {

        		int length = 0;
		
						this.ent_vrsn_id = (Object) dis.readObject();
					
						this.cls_cd_id = (Object) dis.readObject();
					
						this.dtr_cd_id = (Object) dis.readObject();
					
						this.tpl_id = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.vrsn_seq_id = null;
           				} else {
           			    	this.vrsn_seq_id = dis.readDouble();
           				}
					
						this.ent_id = (Object) dis.readObject();
					
						this.rplc_vrsn_id = (Object) dis.readObject();
					
						this.sts_cd_id = (Object) dis.readObject();
					
						this.typ_cd_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
						this.crt_usr_id = (Object) dis.readObject();
					
					this.obslt_utc = readDate(dis);
					
						this.obslt_usr_id = (Object) dis.readObject();
					
					this.sts_cs = readString(dis);
					
					this.exp_utc = readDate(dis);
					
						this.frm_cd_id = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qty = null;
           				} else {
           			    	this.qty = dis.readDouble();
           				}
					
						this.qty_cd_id = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_adm = null;
           				} else {
           			    	this.is_adm = dis.readBoolean();
           				}
					
					this.type_cs = readString(dis);
					
					this.form = readString(dis);
					
					this.qty1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.cls_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.dtr_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.tpl_id);
					
					// Double
				
						if(this.vrsn_seq_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.vrsn_seq_id);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// Object
				
       			    	dos.writeObject(this.rplc_vrsn_id);
					
					// Object
				
       			    	dos.writeObject(this.sts_cd_id);
					
					// Object
				
       			    	dos.writeObject(this.typ_cd_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.crt_usr_id);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.obslt_usr_id);
					
					// String
				
						writeString(this.sts_cs,dos);
					
					// java.util.Date
				
						writeDate(this.exp_utc,dos);
					
					// Object
				
       			    	dos.writeObject(this.frm_cd_id);
					
					// Double
				
						if(this.qty == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.qty);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.qty_cd_id);
					
					// Boolean
				
						if(this.is_adm == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_adm);
		            	}
					
					// String
				
						writeString(this.type_cs,dos);
					
					// String
				
						writeString(this.form,dos);
					
					// String
				
						writeString(this.qty1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_vrsn_id="+String.valueOf(ent_vrsn_id));
		sb.append(",cls_cd_id="+String.valueOf(cls_cd_id));
		sb.append(",dtr_cd_id="+String.valueOf(dtr_cd_id));
		sb.append(",tpl_id="+String.valueOf(tpl_id));
		sb.append(",vrsn_seq_id="+String.valueOf(vrsn_seq_id));
		sb.append(",ent_id="+String.valueOf(ent_id));
		sb.append(",rplc_vrsn_id="+String.valueOf(rplc_vrsn_id));
		sb.append(",sts_cd_id="+String.valueOf(sts_cd_id));
		sb.append(",typ_cd_id="+String.valueOf(typ_cd_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",crt_usr_id="+String.valueOf(crt_usr_id));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",obslt_usr_id="+String.valueOf(obslt_usr_id));
		sb.append(",sts_cs="+sts_cs);
		sb.append(",exp_utc="+String.valueOf(exp_utc));
		sb.append(",frm_cd_id="+String.valueOf(frm_cd_id));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",qty_cd_id="+String.valueOf(qty_cd_id));
		sb.append(",is_adm="+String.valueOf(is_adm));
		sb.append(",type_cs="+type_cs);
		sb.append(",form="+form);
		sb.append(",qty1="+qty1);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_4Process(globalMap);

		row9Struct row9 = new row9Struct();
outputMaterialsStruct outputMaterials = new outputMaterialsStruct();





	
	/**
	 * [tPostgresqlOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_2", false);
		start_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputMaterials" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_2 = 0;
		





String dbschema_tPostgresqlOutput_2 = null;
	dbschema_tPostgresqlOutput_2 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_2 = null;
if(dbschema_tPostgresqlOutput_2 == null || dbschema_tPostgresqlOutput_2.trim().length() == 0) {
	tableName_tPostgresqlOutput_2 = "mat_tbl";
} else {
	tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2 + "\".\"" + "mat_tbl";
}

        int updateKeyCount_tPostgresqlOutput_2 = 1;
        if(updateKeyCount_tPostgresqlOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_2 = 0;
int nb_line_update_tPostgresqlOutput_2 = 0;
int nb_line_inserted_tPostgresqlOutput_2 = 0;
int nb_line_deleted_tPostgresqlOutput_2 = 0;
int nb_line_rejected_tPostgresqlOutput_2 = 0;

int deletedCount_tPostgresqlOutput_2=0;
int updatedCount_tPostgresqlOutput_2=0;
int insertedCount_tPostgresqlOutput_2=0;
int rejectedCount_tPostgresqlOutput_2=0;

boolean whetherReject_tPostgresqlOutput_2 = false;

java.sql.Connection conn_tPostgresqlOutput_2 = null;
String dbUser_tPostgresqlOutput_2 = null;

	conn_tPostgresqlOutput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	



int count_tPostgresqlOutput_2=0;
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tPostgresqlOutput_2 + "\" WHERE \"mat_id\" = ?");
	    resourceMap.put("pstmt_tPostgresqlOutput_2", pstmt_tPostgresqlOutput_2);
	    String insert_tPostgresqlOutput_2 = "INSERT INTO \"" + tableName_tPostgresqlOutput_2 + "\" (\"mat_id\",\"crt_etl_id\",\"upd_etl_id\",\"crt_utc\",\"upd_utc\",\"obslt_utc\",\"type_mnemonic\",\"dose_unit\",\"form_code\") VALUES (?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.prepareStatement(insert_tPostgresqlOutput_2);
	    resourceMap.put("pstmtInsert_tPostgresqlOutput_2", pstmtInsert_tPostgresqlOutput_2);
	    String update_tPostgresqlOutput_2 = "UPDATE \"" + tableName_tPostgresqlOutput_2 + "\" SET \"crt_etl_id\" = ?,\"upd_etl_id\" = ?,\"crt_utc\" = ?,\"upd_utc\" = ?,\"obslt_utc\" = ?,\"type_mnemonic\" = ?,\"dose_unit\" = ?,\"form_code\" = ? WHERE \"mat_id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.prepareStatement(update_tPostgresqlOutput_2);
	    resourceMap.put("pstmtUpdate_tPostgresqlOutput_2", pstmtUpdate_tPostgresqlOutput_2);
	    

 



/**
 * [tPostgresqlOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
					globalMap.get( "tHash_Lookup_row10" ))
					;					
					
	
		tHash_Lookup_row10.initGet();
	

row10Struct row10HashKey = new row10Struct();
row10Struct row10Default = new row10Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputMaterialsStruct outputMaterials_tmp = new outputMaterialsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_3", false);
		start_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_3";

	
		int tos_count_tPostgresqlInput_3 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_3 = 0;
		    java.sql.Connection conn_tPostgresqlInput_3 = null;
		        conn_tPostgresqlInput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3.createStatement();

		    String dbquery_tPostgresqlInput_3 = "\n\nSELECT mat_cur_vrsn_vw.*, typ.mnemonic as type_cs, frm.mnemonic as form, qty.mnemonic as qty \n	FROM MAT_CUR_VRSN_V"
+"W \n	INNER JOIN CD_CUR_VRSN_VW AS TYP ON (TYP.CD_ID = MAT_CUR_VRSN_VW.TYP_CD_ID)\n	INNER JOIN CD_CUR_VRSN_VW AS FRM ON ("
+"FRM.CD_ID = MAT_CUR_VRSN_VW.FRM_CD_ID)\n	INNER JOIN CD_CUR_VRSN_VW AS QTY ON (QTY.CD_ID = MAT_CUR_VRSN_VW.QTY_CD_ID)";
			

            	globalMap.put("tPostgresqlInput_3_QUERY",dbquery_tPostgresqlInput_3);
		    java.sql.ResultSet rs_tPostgresqlInput_3 = null;

		    try {
		    	rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3.executeQuery(dbquery_tPostgresqlInput_3);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3.getColumnCount();

		    String tmpContent_tPostgresqlInput_3 = null;
		    
		    
		    while (rs_tPostgresqlInput_3.next()) {
		        nb_line_tPostgresqlInput_3++;
		        
							if(colQtyInRs_tPostgresqlInput_3 < 1) {
								row9.ent_vrsn_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(1) != null) {
                row9.ent_vrsn_id = rs_tPostgresqlInput_3.getObject(1);
            } else {
                    row9.ent_vrsn_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 2) {
								row9.cls_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(2) != null) {
                row9.cls_cd_id = rs_tPostgresqlInput_3.getObject(2);
            } else {
                    row9.cls_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 3) {
								row9.dtr_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(3) != null) {
                row9.dtr_cd_id = rs_tPostgresqlInput_3.getObject(3);
            } else {
                    row9.dtr_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 4) {
								row9.tpl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(4) != null) {
                row9.tpl_id = rs_tPostgresqlInput_3.getObject(4);
            } else {
                    row9.tpl_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 5) {
								row9.vrsn_seq_id = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_3.getObject(5) != null) {
                row9.vrsn_seq_id = rs_tPostgresqlInput_3.getDouble(5);
            } else {
                    row9.vrsn_seq_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 6) {
								row9.ent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(6) != null) {
                row9.ent_id = rs_tPostgresqlInput_3.getObject(6);
            } else {
                    row9.ent_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 7) {
								row9.rplc_vrsn_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(7) != null) {
                row9.rplc_vrsn_id = rs_tPostgresqlInput_3.getObject(7);
            } else {
                    row9.rplc_vrsn_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 8) {
								row9.sts_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(8) != null) {
                row9.sts_cd_id = rs_tPostgresqlInput_3.getObject(8);
            } else {
                    row9.sts_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 9) {
								row9.typ_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(9) != null) {
                row9.typ_cd_id = rs_tPostgresqlInput_3.getObject(9);
            } else {
                    row9.typ_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 10) {
								row9.crt_utc = null;
							} else {
										
			row9.crt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_3, 10);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 11) {
								row9.crt_usr_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(11) != null) {
                row9.crt_usr_id = rs_tPostgresqlInput_3.getObject(11);
            } else {
                    row9.crt_usr_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 12) {
								row9.obslt_utc = null;
							} else {
										
			row9.obslt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_3, 12);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 13) {
								row9.obslt_usr_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(13) != null) {
                row9.obslt_usr_id = rs_tPostgresqlInput_3.getObject(13);
            } else {
                    row9.obslt_usr_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 14) {
								row9.sts_cs = null;
							} else {
	                         		
        	row9.sts_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 14, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 15) {
								row9.exp_utc = null;
							} else {
										
			row9.exp_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_3, 15);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 16) {
								row9.frm_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(16) != null) {
                row9.frm_cd_id = rs_tPostgresqlInput_3.getObject(16);
            } else {
                    row9.frm_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 17) {
								row9.qty = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_3.getObject(17) != null) {
                row9.qty = rs_tPostgresqlInput_3.getDouble(17);
            } else {
                    row9.qty = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 18) {
								row9.qty_cd_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(18) != null) {
                row9.qty_cd_id = rs_tPostgresqlInput_3.getObject(18);
            } else {
                    row9.qty_cd_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 19) {
								row9.is_adm = null;
							} else {
	                         		
            if(rs_tPostgresqlInput_3.getObject(19) != null) {
                row9.is_adm = rs_tPostgresqlInput_3.getBoolean(19);
            } else {
                    row9.is_adm = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 20) {
								row9.type_cs = null;
							} else {
	                         		
        	row9.type_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 20, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 21) {
								row9.form = null;
							} else {
	                         		
        	row9.form = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 21, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 22) {
								row9.qty1 = null;
							} else {
	                         		
        	row9.qty1 = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 22, false);
		                    }
					


 



/**
 * [tPostgresqlInput_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 


	tos_count_tPostgresqlInput_3++;

/**
 * [tPostgresqlInput_3 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row10" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow10 = false;
       		  	    	
       		  	    	
 							row10Struct row10ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row10.lookup( row10HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row10.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow10 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow10 = true;
			           		  	} // G 21
                    		  	
                    		

							row10Struct row10 = null;
                    		  	 
							

								while ((tHash_Lookup_row10 != null && tHash_Lookup_row10.hasNext()) || forceLooprow10) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row10'
									
                    		  	 
							   
                    		  	 
	       		  	    	row10Struct fromLookup_row10 = null;
							row10 = row10Default;
										 
							
								
								if(!forceLooprow10) { // G 46
								
							
								 
							
								
								fromLookup_row10 = tHash_Lookup_row10.next();

							

							if(fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow10 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

outputMaterials = null;


// # Output table : 'outputMaterials'
outputMaterials_tmp.mat_id = row9.ent_id ;
outputMaterials_tmp.crt_etl_id = row10.etl_id ;
outputMaterials_tmp.upd_etl_id = null;
outputMaterials_tmp.crt_utc = row9.crt_utc;
outputMaterials_tmp.upd_utc = null;
outputMaterials_tmp.obslt_utc = row9.obslt_utc;
outputMaterials_tmp.type_mnemonic = row9.type_cs ;
outputMaterials_tmp.dose_unit = row9.qty1 ;
outputMaterials_tmp.form_code = row9.form ;
outputMaterials = outputMaterials_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "outputMaterials"
if(outputMaterials != null) { 



	
	/**
	 * [tPostgresqlOutput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

			//outputMaterials
			//outputMaterials


			
				if(execStat){
					runStat.updateStatOnConnection("outputMaterials"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_2 = false;
                    if(outputMaterials.mat_id == null) {
pstmt_tPostgresqlOutput_2.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_2.setObject(1, outputMaterials.mat_id, java.sql.Types.OTHER);
}

            int checkCount_tPostgresqlOutput_2 = -1;
            try (java.sql.ResultSet rs_tPostgresqlOutput_2 = pstmt_tPostgresqlOutput_2.executeQuery()) {
                while(rs_tPostgresqlOutput_2.next()) {
                    checkCount_tPostgresqlOutput_2 = rs_tPostgresqlOutput_2.getInt(1);
                }
            }
            if(checkCount_tPostgresqlOutput_2 > 0) {
                        if(outputMaterials.crt_etl_id == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(1, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_2.setObject(1, outputMaterials.crt_etl_id, java.sql.Types.OTHER);
}

                        if(outputMaterials.upd_etl_id == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(2, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_2.setObject(2, outputMaterials.upd_etl_id, java.sql.Types.OTHER);
}

                        if(outputMaterials.crt_utc != null) {
pstmtUpdate_tPostgresqlOutput_2.setTimestamp(3, new java.sql.Timestamp(outputMaterials.crt_utc.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(outputMaterials.upd_utc != null) {
pstmtUpdate_tPostgresqlOutput_2.setTimestamp(4, new java.sql.Timestamp(outputMaterials.upd_utc.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_2.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(outputMaterials.obslt_utc != null) {
pstmtUpdate_tPostgresqlOutput_2.setTimestamp(5, new java.sql.Timestamp(outputMaterials.obslt_utc.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_2.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(outputMaterials.type_mnemonic == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_2.setString(6, outputMaterials.type_mnemonic);
}

                        if(outputMaterials.dose_unit == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_2.setString(7, outputMaterials.dose_unit);
}

                        if(outputMaterials.form_code == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_2.setString(8, outputMaterials.form_code);
}

                        if(outputMaterials.mat_id == null) {
pstmtUpdate_tPostgresqlOutput_2.setNull(9 + count_tPostgresqlOutput_2, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_2.setObject(9 + count_tPostgresqlOutput_2, outputMaterials.mat_id);
}

                try {
					
                    updatedCount_tPostgresqlOutput_2 = updatedCount_tPostgresqlOutput_2 + pstmtUpdate_tPostgresqlOutput_2.executeUpdate();
                    nb_line_tPostgresqlOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tPostgresqlOutput_2 = true;
                        nb_line_tPostgresqlOutput_2++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(outputMaterials.mat_id == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(1, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_2.setObject(1, outputMaterials.mat_id, java.sql.Types.OTHER);
}

                        if(outputMaterials.crt_etl_id == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(2, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_2.setObject(2, outputMaterials.crt_etl_id, java.sql.Types.OTHER);
}

                        if(outputMaterials.upd_etl_id == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(3, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_2.setObject(3, outputMaterials.upd_etl_id, java.sql.Types.OTHER);
}

                        if(outputMaterials.crt_utc != null) {
pstmtInsert_tPostgresqlOutput_2.setTimestamp(4, new java.sql.Timestamp(outputMaterials.crt_utc.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_2.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(outputMaterials.upd_utc != null) {
pstmtInsert_tPostgresqlOutput_2.setTimestamp(5, new java.sql.Timestamp(outputMaterials.upd_utc.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_2.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(outputMaterials.obslt_utc != null) {
pstmtInsert_tPostgresqlOutput_2.setTimestamp(6, new java.sql.Timestamp(outputMaterials.obslt_utc.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_2.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(outputMaterials.type_mnemonic == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_2.setString(7, outputMaterials.type_mnemonic);
}

                        if(outputMaterials.dose_unit == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_2.setString(8, outputMaterials.dose_unit);
}

                        if(outputMaterials.form_code == null) {
pstmtInsert_tPostgresqlOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_2.setString(9, outputMaterials.form_code);
}

                try {
					
                    insertedCount_tPostgresqlOutput_2 = insertedCount_tPostgresqlOutput_2 + pstmtInsert_tPostgresqlOutput_2.executeUpdate();
                    nb_line_tPostgresqlOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tPostgresqlOutput_2 = true;
                        nb_line_tPostgresqlOutput_2++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tPostgresqlOutput_2) {
            }

 


	tos_count_tPostgresqlOutput_2++;

/**
 * [tPostgresqlOutput_2 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

 



/**
 * [tPostgresqlOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

 



/**
 * [tPostgresqlOutput_2 process_data_end ] stop
 */

} // End of branch "outputMaterials"



	
		} // close loop of lookup 'row10' // G_TM_M_043
	
	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

	}
}finally{
	if (rs_tPostgresqlInput_3 != null) {
		rs_tPostgresqlInput_3.close();
	}
	if (stmt_tPostgresqlInput_3 != null) {
		stmt_tPostgresqlInput_3.close();
	}
}
globalMap.put("tPostgresqlInput_3_NB_LINE",nb_line_tPostgresqlInput_3);
 

ok_Hash.put("tPostgresqlInput_3", true);
end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());




/**
 * [tPostgresqlInput_3 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove( "tHash_Lookup_row10" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



        if(pstmtUpdate_tPostgresqlOutput_2 != null){
            pstmtUpdate_tPostgresqlOutput_2.close();
            resourceMap.remove("pstmtUpdate_tPostgresqlOutput_2");
        }
        if(pstmtInsert_tPostgresqlOutput_2 != null){
            pstmtInsert_tPostgresqlOutput_2.close();
            resourceMap.remove("pstmtInsert_tPostgresqlOutput_2");
        }
        if(pstmt_tPostgresqlOutput_2 != null) {
            pstmt_tPostgresqlOutput_2.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_2");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_2", true);

	nb_line_deleted_tPostgresqlOutput_2=nb_line_deleted_tPostgresqlOutput_2+ deletedCount_tPostgresqlOutput_2;
	nb_line_update_tPostgresqlOutput_2=nb_line_update_tPostgresqlOutput_2 + updatedCount_tPostgresqlOutput_2;
	nb_line_inserted_tPostgresqlOutput_2=nb_line_inserted_tPostgresqlOutput_2 + insertedCount_tPostgresqlOutput_2;
	nb_line_rejected_tPostgresqlOutput_2=nb_line_rejected_tPostgresqlOutput_2 + rejectedCount_tPostgresqlOutput_2;
	
        globalMap.put("tPostgresqlOutput_2_NB_LINE",nb_line_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_2);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputMaterials"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_2", true);
end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tPostgresqlInput_5Process(globalMap);



/**
 * [tPostgresqlOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row10"); 
				     			
				try{
					
	
	/**
	 * [tPostgresqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tPostgresqlOutput_2 = null;
                if ((pstmtUpdateToClose_tPostgresqlOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tPostgresqlOutput_2")) != null) {
                    pstmtUpdateToClose_tPostgresqlOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tPostgresqlOutput_2 = null;
                if ((pstmtInsertToClose_tPostgresqlOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tPostgresqlOutput_2")) != null) {
                    pstmtInsertToClose_tPostgresqlOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_2 = null;
                if ((pstmtToClose_tPostgresqlOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_2")) != null) {
                    pstmtToClose_tPostgresqlOutput_2.close();
                }
    }
 



/**
 * [tPostgresqlOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class outputManufacturedMaterialsStruct implements routines.system.IPersistableRow<outputManufacturedMaterialsStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_StockData = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_StockData = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object mmat_id;

				public Object getMmat_id () {
					return this.mmat_id;
				}
				
			    public Object mat_id;

				public Object getMat_id () {
					return this.mat_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public String type_mnemonic;

				public String getType_mnemonic () {
					return this.type_mnemonic;
				}
				
			    public java.util.Date expiry;

				public java.util.Date getExpiry () {
					return this.expiry;
				}
				
			    public String gtin;

				public String getGtin () {
					return this.gtin;
				}
				
			    public String lot;

				public String getLot () {
					return this.lot;
				}
				
			    public String manufacturer;

				public String getManufacturer () {
					return this.manufacturer;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.mmat_id == null) ? 0 : this.mmat_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputManufacturedMaterialsStruct other = (outputManufacturedMaterialsStruct) obj;
		
						if (this.mmat_id == null) {
							if (other.mmat_id != null)
								return false;
						
						} else if (!this.mmat_id.equals(other.mmat_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputManufacturedMaterialsStruct other) {

		other.mmat_id = this.mmat_id;
	            other.mat_id = this.mat_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            other.type_mnemonic = this.type_mnemonic;
	            other.expiry = this.expiry;
	            other.gtin = this.gtin;
	            other.lot = this.lot;
	            other.manufacturer = this.manufacturer;
	            
	}

	public void copyKeysDataTo(outputManufacturedMaterialsStruct other) {

		other.mmat_id = this.mmat_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_StockData.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_StockData.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_StockData, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_StockData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_StockData) {

        	try {

        		int length = 0;
		
						this.mmat_id = (Object) dis.readObject();
					
						this.mat_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.type_mnemonic = readString(dis);
					
					this.expiry = readDate(dis);
					
					this.gtin = readString(dis);
					
					this.lot = readString(dis);
					
					this.manufacturer = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.mmat_id);
					
					// Object
				
       			    	dos.writeObject(this.mat_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// String
				
						writeString(this.type_mnemonic,dos);
					
					// java.util.Date
				
						writeDate(this.expiry,dos);
					
					// String
				
						writeString(this.gtin,dos);
					
					// String
				
						writeString(this.lot,dos);
					
					// String
				
						writeString(this.manufacturer,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("mmat_id="+String.valueOf(mmat_id));
		sb.append(",mat_id="+String.valueOf(mat_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",type_mnemonic="+type_mnemonic);
		sb.append(",expiry="+String.valueOf(expiry));
		sb.append(",gtin="+gtin);
		sb.append(",lot="+lot);
		sb.append(",manufacturer="+manufacturer);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputManufacturedMaterialsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.mmat_id, other.mmat_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_StockData = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_StockData = new byte[0];

	
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public java.util.Date exp_utc;

				public java.util.Date getExp_utc () {
					return this.exp_utc;
				}
				
			    public String lot_no;

				public String getLot_no () {
					return this.lot_no;
				}
				
			    public String type_cs;

				public String getType_cs () {
					return this.type_cs;
				}
				
			    public String manufacturer;

				public String getManufacturer () {
					return this.manufacturer;
				}
				
			    public Object src_ent_id;

				public Object getSrc_ent_id () {
					return this.src_ent_id;
				}
				
			    public String gtin;

				public String getGtin () {
					return this.gtin;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_StockData.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_StockData.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_StockData, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_StockData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_StockData) {

        	try {

        		int length = 0;
		
						this.ent_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.exp_utc = readDate(dis);
					
					this.lot_no = readString(dis);
					
					this.type_cs = readString(dis);
					
					this.manufacturer = readString(dis);
					
						this.src_ent_id = (Object) dis.readObject();
					
					this.gtin = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.exp_utc,dos);
					
					// String
				
						writeString(this.lot_no,dos);
					
					// String
				
						writeString(this.type_cs,dos);
					
					// String
				
						writeString(this.manufacturer,dos);
					
					// Object
				
       			    	dos.writeObject(this.src_ent_id);
					
					// String
				
						writeString(this.gtin,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_id="+String.valueOf(ent_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",exp_utc="+String.valueOf(exp_utc));
		sb.append(",lot_no="+lot_no);
		sb.append(",type_cs="+type_cs);
		sb.append(",manufacturer="+manufacturer);
		sb.append(",src_ent_id="+String.valueOf(src_ent_id));
		sb.append(",gtin="+gtin);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_5Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_5Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_StockData = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_StockData = new byte[0];

	
			    public Object ent_id;

				public Object getEnt_id () {
					return this.ent_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public java.util.Date exp_utc;

				public java.util.Date getExp_utc () {
					return this.exp_utc;
				}
				
			    public String lot_no;

				public String getLot_no () {
					return this.lot_no;
				}
				
			    public String type_cs;

				public String getType_cs () {
					return this.type_cs;
				}
				
			    public String manufacturer;

				public String getManufacturer () {
					return this.manufacturer;
				}
				
			    public Object src_ent_id;

				public Object getSrc_ent_id () {
					return this.src_ent_id;
				}
				
			    public String gtin;

				public String getGtin () {
					return this.gtin;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_StockData.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_StockData.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_StockData, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_StockData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_StockData) {

        	try {

        		int length = 0;
		
						this.ent_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
					this.exp_utc = readDate(dis);
					
					this.lot_no = readString(dis);
					
					this.type_cs = readString(dis);
					
					this.manufacturer = readString(dis);
					
						this.src_ent_id = (Object) dis.readObject();
					
					this.gtin = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ent_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.exp_utc,dos);
					
					// String
				
						writeString(this.lot_no,dos);
					
					// String
				
						writeString(this.type_cs,dos);
					
					// String
				
						writeString(this.manufacturer,dos);
					
					// Object
				
       			    	dos.writeObject(this.src_ent_id);
					
					// String
				
						writeString(this.gtin,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ent_id="+String.valueOf(ent_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",exp_utc="+String.valueOf(exp_utc));
		sb.append(",lot_no="+lot_no);
		sb.append(",type_cs="+type_cs);
		sb.append(",manufacturer="+manufacturer);
		sb.append(",src_ent_id="+String.valueOf(src_ent_id));
		sb.append(",gtin="+gtin);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_6Process(globalMap);

		row11Struct row11 = new row11Struct();
outputManufacturedMaterialsStruct outputManufacturedMaterials = new outputManufacturedMaterialsStruct();





	
	/**
	 * [tPostgresqlOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_3", false);
		start_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputManufacturedMaterials" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_3 = 0;
		





String dbschema_tPostgresqlOutput_3 = null;
	dbschema_tPostgresqlOutput_3 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_3 = null;
if(dbschema_tPostgresqlOutput_3 == null || dbschema_tPostgresqlOutput_3.trim().length() == 0) {
	tableName_tPostgresqlOutput_3 = "mmat_tbl";
} else {
	tableName_tPostgresqlOutput_3 = dbschema_tPostgresqlOutput_3 + "\".\"" + "mmat_tbl";
}

        int updateKeyCount_tPostgresqlOutput_3 = 1;
        if(updateKeyCount_tPostgresqlOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_3 = 0;
int nb_line_update_tPostgresqlOutput_3 = 0;
int nb_line_inserted_tPostgresqlOutput_3 = 0;
int nb_line_deleted_tPostgresqlOutput_3 = 0;
int nb_line_rejected_tPostgresqlOutput_3 = 0;

int deletedCount_tPostgresqlOutput_3=0;
int updatedCount_tPostgresqlOutput_3=0;
int insertedCount_tPostgresqlOutput_3=0;
int rejectedCount_tPostgresqlOutput_3=0;

boolean whetherReject_tPostgresqlOutput_3 = false;

java.sql.Connection conn_tPostgresqlOutput_3 = null;
String dbUser_tPostgresqlOutput_3 = null;

	conn_tPostgresqlOutput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	



int count_tPostgresqlOutput_3=0;
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tPostgresqlOutput_3 + "\" WHERE \"mmat_id\" = ?");
	    resourceMap.put("pstmt_tPostgresqlOutput_3", pstmt_tPostgresqlOutput_3);
	    String insert_tPostgresqlOutput_3 = "INSERT INTO \"" + tableName_tPostgresqlOutput_3 + "\" (\"mmat_id\",\"mat_id\",\"crt_etl_id\",\"upd_etl_id\",\"crt_utc\",\"upd_utc\",\"obslt_utc\",\"type_mnemonic\",\"expiry\",\"gtin\",\"lot\",\"manufacturer\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.prepareStatement(insert_tPostgresqlOutput_3);
	    resourceMap.put("pstmtInsert_tPostgresqlOutput_3", pstmtInsert_tPostgresqlOutput_3);
	    String update_tPostgresqlOutput_3 = "UPDATE \"" + tableName_tPostgresqlOutput_3 + "\" SET \"mat_id\" = ?,\"crt_etl_id\" = ?,\"upd_etl_id\" = ?,\"crt_utc\" = ?,\"upd_utc\" = ?,\"obslt_utc\" = ?,\"type_mnemonic\" = ?,\"expiry\" = ?,\"gtin\" = ?,\"lot\" = ?,\"manufacturer\" = ? WHERE \"mmat_id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.prepareStatement(update_tPostgresqlOutput_3);
	    resourceMap.put("pstmtUpdate_tPostgresqlOutput_3", pstmtUpdate_tPostgresqlOutput_3);
	    

 



/**
 * [tPostgresqlOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	
		tHash_Lookup_row12.initGet();
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputManufacturedMaterialsStruct outputManufacturedMaterials_tmp = new outputManufacturedMaterialsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_5", false);
		start_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_5";

	
		int tos_count_tPostgresqlInput_5 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_5 = 0;
		    java.sql.Connection conn_tPostgresqlInput_5 = null;
		        conn_tPostgresqlInput_5 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_5 = conn_tPostgresqlInput_5.createStatement();

		    String dbquery_tPostgresqlInput_5 = "WITH manuf_rel AS (\n	select src_ent_id, trg_ent_id as ent_id, ent_cur_name_vw.val from ent_rel_tbl inner join ent_cur_"
+"name_vw on (ent_cur_name_vw.ent_id = src_ent_id) where rel_typ_cd_id = '6780DF3B-AFBD-44A3-8627-CBB3DC2F02F6' and obslt_"
+"vrsn_seq_id is null\n), mmat_rel AS (\n	select src_ent_id, trg_ent_id from ent_rel_tbl where rel_typ_cd_id = 'AC45A740-B"
+"0C7-4425-84D8-B3F8A41FEF9F' and obslt_vrsn_seq_id is null\n), gtin_rel AS (\n	select * from ent_cur_id_vw where nsid = '"
+"GTIN'\n)\nSELECT DISTINCT ent_vrsn_tbl.ent_id, ent_vrsn_tbl.crt_utc, ent_vrsn_tbl.obslt_utc, mat_tbl.exp_utc, mmat_tbl.l"
+"ot_no, typ.mnemonic as type_cs, manuf_rel.val AS manufacturer, mmat_rel.src_ent_id, gtin_rel.id_val as gtin\n	FROM mmat_"
+"tbl \n	INNER JOIN mat_tbl USING (ent_vrsn_id)\n	INNER JOIN ent_vrsn_tbl USING (ent_vrsn_id) \n	LEFT JOIN manuf_rel ON (e"
+"nt_vrsn_tbl.ent_id = manuf_rel.ent_id)\n	LEFT JOIN mmat_rel ON (mmat_rel.trg_ent_id = ent_vrsn_tbl.ent_id)\n	LEFT JOIN e"
+"nt_vrsn_tbl mat_vrsn ON (mmat_rel.src_ent_id = mat_vrsn.ent_id and mat_vrsn.obslt_utc is null)\n	LEFT JOIN gtin_rel ON ("
+"ent_vrsn_tbl.ent_id = gtin_rel.ent_id)\n	LEFT JOIN cd_vrsn_tbl AS TYP ON (TYP.CD_ID = COALESCE(ent_vrsn_tbl.TYP_CD_ID, M"
+"AT_VRSN.TYP_CD_ID) and TYP.obslt_utc is null)\nWHERE\n	ent_vrsn_tbl.obslt_utc is null\n";
			

            	globalMap.put("tPostgresqlInput_5_QUERY",dbquery_tPostgresqlInput_5);
		    java.sql.ResultSet rs_tPostgresqlInput_5 = null;

		    try {
		    	rs_tPostgresqlInput_5 = stmt_tPostgresqlInput_5.executeQuery(dbquery_tPostgresqlInput_5);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_5 = rs_tPostgresqlInput_5.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_5 = rsmd_tPostgresqlInput_5.getColumnCount();

		    String tmpContent_tPostgresqlInput_5 = null;
		    
		    
		    while (rs_tPostgresqlInput_5.next()) {
		        nb_line_tPostgresqlInput_5++;
		        
							if(colQtyInRs_tPostgresqlInput_5 < 1) {
								row11.ent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_5.getObject(1) != null) {
                row11.ent_id = rs_tPostgresqlInput_5.getObject(1);
            } else {
                    row11.ent_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 2) {
								row11.crt_utc = null;
							} else {
										
			row11.crt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_5, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 3) {
								row11.obslt_utc = null;
							} else {
										
			row11.obslt_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_5, 3);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 4) {
								row11.exp_utc = null;
							} else {
										
			row11.exp_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_5, 4);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 5) {
								row11.lot_no = null;
							} else {
	                         		
        	row11.lot_no = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 5, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 6) {
								row11.type_cs = null;
							} else {
	                         		
        	row11.type_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 6, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 7) {
								row11.manufacturer = null;
							} else {
	                         		
        	row11.manufacturer = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 7, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 8) {
								row11.src_ent_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_5.getObject(8) != null) {
                row11.src_ent_id = rs_tPostgresqlInput_5.getObject(8);
            } else {
                    row11.src_ent_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 9) {
								row11.gtin = null;
							} else {
	                         		
        	row11.gtin = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 9, false);
		                    }
					


 



/**
 * [tPostgresqlInput_5 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_5 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 


	tos_count_tPostgresqlInput_5++;

/**
 * [tPostgresqlInput_5 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 



/**
 * [tPostgresqlInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow12 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow12 = true;
			           		  	} // G 21
                    		  	
                    		

							row12Struct row12 = null;
                    		  	 
							

								while ((tHash_Lookup_row12 != null && tHash_Lookup_row12.hasNext()) || forceLooprow12) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row12'
									
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								
								if(!forceLooprow12) { // G 46
								
							
								 
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow12 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

outputManufacturedMaterials = null;


// # Output table : 'outputManufacturedMaterials'
outputManufacturedMaterials_tmp.mmat_id = row11.ent_id ;
outputManufacturedMaterials_tmp.mat_id = row11.src_ent_id ;
outputManufacturedMaterials_tmp.crt_etl_id = row12.etl_id ;
outputManufacturedMaterials_tmp.upd_etl_id = null;
outputManufacturedMaterials_tmp.crt_utc = row11.crt_utc;
outputManufacturedMaterials_tmp.upd_utc = null;
outputManufacturedMaterials_tmp.obslt_utc = row11.obslt_utc;
outputManufacturedMaterials_tmp.type_mnemonic = row11.type_cs ;
outputManufacturedMaterials_tmp.expiry = row11.exp_utc ;
outputManufacturedMaterials_tmp.gtin = row11.gtin ;
outputManufacturedMaterials_tmp.lot = row11.lot_no ;
outputManufacturedMaterials_tmp.manufacturer = row11.manufacturer;
outputManufacturedMaterials = outputManufacturedMaterials_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "outputManufacturedMaterials"
if(outputManufacturedMaterials != null) { 



	
	/**
	 * [tPostgresqlOutput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

			//outputManufacturedMaterials
			//outputManufacturedMaterials


			
				if(execStat){
					runStat.updateStatOnConnection("outputManufacturedMaterials"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_3 = false;
                    if(outputManufacturedMaterials.mmat_id == null) {
pstmt_tPostgresqlOutput_3.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_3.setObject(1, outputManufacturedMaterials.mmat_id, java.sql.Types.OTHER);
}

            int checkCount_tPostgresqlOutput_3 = -1;
            try (java.sql.ResultSet rs_tPostgresqlOutput_3 = pstmt_tPostgresqlOutput_3.executeQuery()) {
                while(rs_tPostgresqlOutput_3.next()) {
                    checkCount_tPostgresqlOutput_3 = rs_tPostgresqlOutput_3.getInt(1);
                }
            }
            if(checkCount_tPostgresqlOutput_3 > 0) {
                        if(outputManufacturedMaterials.mat_id == null) {
pstmtUpdate_tPostgresqlOutput_3.setNull(1, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_3.setObject(1, outputManufacturedMaterials.mat_id, java.sql.Types.OTHER);
}

                        if(outputManufacturedMaterials.crt_etl_id == null) {
pstmtUpdate_tPostgresqlOutput_3.setNull(2, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_3.setObject(2, outputManufacturedMaterials.crt_etl_id, java.sql.Types.OTHER);
}

                        if(outputManufacturedMaterials.upd_etl_id == null) {
pstmtUpdate_tPostgresqlOutput_3.setNull(3, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_3.setObject(3, outputManufacturedMaterials.upd_etl_id, java.sql.Types.OTHER);
}

                        if(outputManufacturedMaterials.crt_utc != null) {
pstmtUpdate_tPostgresqlOutput_3.setTimestamp(4, new java.sql.Timestamp(outputManufacturedMaterials.crt_utc.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_3.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(outputManufacturedMaterials.upd_utc != null) {
pstmtUpdate_tPostgresqlOutput_3.setTimestamp(5, new java.sql.Timestamp(outputManufacturedMaterials.upd_utc.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_3.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(outputManufacturedMaterials.obslt_utc != null) {
pstmtUpdate_tPostgresqlOutput_3.setTimestamp(6, new java.sql.Timestamp(outputManufacturedMaterials.obslt_utc.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_3.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(outputManufacturedMaterials.type_mnemonic == null) {
pstmtUpdate_tPostgresqlOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_3.setString(7, outputManufacturedMaterials.type_mnemonic);
}

                        if(outputManufacturedMaterials.expiry != null) {
pstmtUpdate_tPostgresqlOutput_3.setTimestamp(8, new java.sql.Timestamp(outputManufacturedMaterials.expiry.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_3.setNull(8, java.sql.Types.TIMESTAMP);
}

                        if(outputManufacturedMaterials.gtin == null) {
pstmtUpdate_tPostgresqlOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_3.setString(9, outputManufacturedMaterials.gtin);
}

                        if(outputManufacturedMaterials.lot == null) {
pstmtUpdate_tPostgresqlOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_3.setString(10, outputManufacturedMaterials.lot);
}

                        if(outputManufacturedMaterials.manufacturer == null) {
pstmtUpdate_tPostgresqlOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_3.setString(11, outputManufacturedMaterials.manufacturer);
}

                        if(outputManufacturedMaterials.mmat_id == null) {
pstmtUpdate_tPostgresqlOutput_3.setNull(12 + count_tPostgresqlOutput_3, java.sql.Types.OTHER);
} else {pstmtUpdate_tPostgresqlOutput_3.setObject(12 + count_tPostgresqlOutput_3, outputManufacturedMaterials.mmat_id);
}

                try {
					
                    updatedCount_tPostgresqlOutput_3 = updatedCount_tPostgresqlOutput_3 + pstmtUpdate_tPostgresqlOutput_3.executeUpdate();
                    nb_line_tPostgresqlOutput_3++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tPostgresqlOutput_3 = true;
                        nb_line_tPostgresqlOutput_3++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(outputManufacturedMaterials.mmat_id == null) {
pstmtInsert_tPostgresqlOutput_3.setNull(1, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_3.setObject(1, outputManufacturedMaterials.mmat_id, java.sql.Types.OTHER);
}

                        if(outputManufacturedMaterials.mat_id == null) {
pstmtInsert_tPostgresqlOutput_3.setNull(2, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_3.setObject(2, outputManufacturedMaterials.mat_id, java.sql.Types.OTHER);
}

                        if(outputManufacturedMaterials.crt_etl_id == null) {
pstmtInsert_tPostgresqlOutput_3.setNull(3, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_3.setObject(3, outputManufacturedMaterials.crt_etl_id, java.sql.Types.OTHER);
}

                        if(outputManufacturedMaterials.upd_etl_id == null) {
pstmtInsert_tPostgresqlOutput_3.setNull(4, java.sql.Types.OTHER);
} else {pstmtInsert_tPostgresqlOutput_3.setObject(4, outputManufacturedMaterials.upd_etl_id, java.sql.Types.OTHER);
}

                        if(outputManufacturedMaterials.crt_utc != null) {
pstmtInsert_tPostgresqlOutput_3.setTimestamp(5, new java.sql.Timestamp(outputManufacturedMaterials.crt_utc.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_3.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(outputManufacturedMaterials.upd_utc != null) {
pstmtInsert_tPostgresqlOutput_3.setTimestamp(6, new java.sql.Timestamp(outputManufacturedMaterials.upd_utc.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_3.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(outputManufacturedMaterials.obslt_utc != null) {
pstmtInsert_tPostgresqlOutput_3.setTimestamp(7, new java.sql.Timestamp(outputManufacturedMaterials.obslt_utc.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_3.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(outputManufacturedMaterials.type_mnemonic == null) {
pstmtInsert_tPostgresqlOutput_3.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_3.setString(8, outputManufacturedMaterials.type_mnemonic);
}

                        if(outputManufacturedMaterials.expiry != null) {
pstmtInsert_tPostgresqlOutput_3.setTimestamp(9, new java.sql.Timestamp(outputManufacturedMaterials.expiry.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_3.setNull(9, java.sql.Types.TIMESTAMP);
}

                        if(outputManufacturedMaterials.gtin == null) {
pstmtInsert_tPostgresqlOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_3.setString(10, outputManufacturedMaterials.gtin);
}

                        if(outputManufacturedMaterials.lot == null) {
pstmtInsert_tPostgresqlOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_3.setString(11, outputManufacturedMaterials.lot);
}

                        if(outputManufacturedMaterials.manufacturer == null) {
pstmtInsert_tPostgresqlOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_3.setString(12, outputManufacturedMaterials.manufacturer);
}

                try {
					
                    insertedCount_tPostgresqlOutput_3 = insertedCount_tPostgresqlOutput_3 + pstmtInsert_tPostgresqlOutput_3.executeUpdate();
                    nb_line_tPostgresqlOutput_3++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tPostgresqlOutput_3 = true;
                        nb_line_tPostgresqlOutput_3++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tPostgresqlOutput_3) {
            }

 


	tos_count_tPostgresqlOutput_3++;

/**
 * [tPostgresqlOutput_3 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

 



/**
 * [tPostgresqlOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

 



/**
 * [tPostgresqlOutput_3 process_data_end ] stop
 */

} // End of branch "outputManufacturedMaterials"



	
		} // close loop of lookup 'row12' // G_TM_M_043
	
	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 



/**
 * [tPostgresqlInput_5 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_5 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

	}
}finally{
	if (rs_tPostgresqlInput_5 != null) {
		rs_tPostgresqlInput_5.close();
	}
	if (stmt_tPostgresqlInput_5 != null) {
		stmt_tPostgresqlInput_5.close();
	}
}
globalMap.put("tPostgresqlInput_5_NB_LINE",nb_line_tPostgresqlInput_5);
 

ok_Hash.put("tPostgresqlInput_5", true);
end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());




/**
 * [tPostgresqlInput_5 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



        if(pstmtUpdate_tPostgresqlOutput_3 != null){
            pstmtUpdate_tPostgresqlOutput_3.close();
            resourceMap.remove("pstmtUpdate_tPostgresqlOutput_3");
        }
        if(pstmtInsert_tPostgresqlOutput_3 != null){
            pstmtInsert_tPostgresqlOutput_3.close();
            resourceMap.remove("pstmtInsert_tPostgresqlOutput_3");
        }
        if(pstmt_tPostgresqlOutput_3 != null) {
            pstmt_tPostgresqlOutput_3.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_3");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_3", true);

	nb_line_deleted_tPostgresqlOutput_3=nb_line_deleted_tPostgresqlOutput_3+ deletedCount_tPostgresqlOutput_3;
	nb_line_update_tPostgresqlOutput_3=nb_line_update_tPostgresqlOutput_3 + updatedCount_tPostgresqlOutput_3;
	nb_line_inserted_tPostgresqlOutput_3=nb_line_inserted_tPostgresqlOutput_3 + insertedCount_tPostgresqlOutput_3;
	nb_line_rejected_tPostgresqlOutput_3=nb_line_rejected_tPostgresqlOutput_3 + rejectedCount_tPostgresqlOutput_3;
	
        globalMap.put("tPostgresqlOutput_3_NB_LINE",nb_line_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_3);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputManufacturedMaterials"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_3", true);
end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tWarn_2Process(globalMap);



/**
 * [tPostgresqlOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
				try{
					
	
	/**
	 * [tPostgresqlInput_5 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 



/**
 * [tPostgresqlInput_5 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_3") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tPostgresqlOutput_3 = null;
                if ((pstmtUpdateToClose_tPostgresqlOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tPostgresqlOutput_3")) != null) {
                    pstmtUpdateToClose_tPostgresqlOutput_3.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tPostgresqlOutput_3 = null;
                if ((pstmtInsertToClose_tPostgresqlOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tPostgresqlOutput_3")) != null) {
                    pstmtInsertToClose_tPostgresqlOutput_3.close();
                }
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_3 = null;
                if ((pstmtToClose_tPostgresqlOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_3")) != null) {
                    pstmtToClose_tPostgresqlOutput_3.close();
                }
    }
 



/**
 * [tPostgresqlOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_2", false);
		start_Hash.put("tWarn_2", System.currentTimeMillis());
		
	
	currentComponent="tWarn_2";

	
		int tos_count_tWarn_2 = 0;
		

 



/**
 * [tWarn_2 begin ] stop
 */
	
	/**
	 * [tWarn_2 main ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread.currentThread().getId() + "", "INFO","","Transforming Materials","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_2", 3, "Transforming Materials", 42);
	tLogCatcher_1Process(globalMap);
	globalMap.put("tWarn_2_WARN_MESSAGES", "Transforming Materials"); 
	globalMap.put("tWarn_2_WARN_PRIORITY", 3);
	globalMap.put("tWarn_2_WARN_CODE", 42);
	
} catch (Exception e_tWarn_2) {
	logIgnoredError(String.format("tWarn_2 - tWarn failed to log message due to internal error: %s", e_tWarn_2), e_tWarn_2);
}


 


	tos_count_tWarn_2++;

/**
 * [tWarn_2 main ] stop
 */
	
	/**
	 * [tWarn_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 process_data_end ] stop
 */
	
	/**
	 * [tWarn_2 end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 

ok_Hash.put("tWarn_2", true);
end_Hash.put("tWarn_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tPostgresqlRow_1Process(globalMap);



/**
 * [tWarn_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_2 finally ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_1", false);
		start_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_1";

	
		int tos_count_tPostgresqlRow_1 = 0;
		

	java.sql.Connection conn_tPostgresqlRow_1 = null;
	String query_tPostgresqlRow_1 = "";
	boolean whetherReject_tPostgresqlRow_1 = false;
				conn_tPostgresqlRow_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
			
    resourceMap.put("conn_tPostgresqlRow_1", conn_tPostgresqlRow_1);
        java.sql.Statement stmt_tPostgresqlRow_1 = conn_tPostgresqlRow_1.createStatement();
        resourceMap.put("stmt_tPostgresqlRow_1", stmt_tPostgresqlRow_1);


 



/**
 * [tPostgresqlRow_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

query_tPostgresqlRow_1 = "create temporary table if not exists ledger (\n      ref_id uuid,\n      sort_time timestamptz,\n      act_date timesta"
+"mptz,\n      mat_id uuid,\n      typ_cs varchar(100),\n      rsn varchar(100),\n      loc_id uuid,\n      qty int,\n    "
+"  usr_id uuid,\n    seq_id serial\n) on commit preserve rows;\n\ndrop index if exists ledger_act_date;\ndrop index if ex"
+"ists ledger_mat_id;\ncreate index ledger_act_date on ledger(act_date);\ncreate index ledger_mat_id on ledger(mat_id);\nc"
+"reate index ledger_seq_id on ledger(seq_id);\ntruncate ledger;";
whetherReject_tPostgresqlRow_1 = false;
globalMap.put("tPostgresqlRow_1_QUERY",query_tPostgresqlRow_1);
try {
		stmt_tPostgresqlRow_1.execute(query_tPostgresqlRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_1 = true;
		
			throw(e);
			
	}
	
	if(!whetherReject_tPostgresqlRow_1) {
		
	}
	

 


	tos_count_tPostgresqlRow_1++;

/**
 * [tPostgresqlRow_1 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

 



/**
 * [tPostgresqlRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

 



/**
 * [tPostgresqlRow_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

	
        stmt_tPostgresqlRow_1.close();
        resourceMap.remove("stmt_tPostgresqlRow_1");
    resourceMap.put("statementClosed_tPostgresqlRow_1", true);
    resourceMap.put("finish_tPostgresqlRow_1", true);
 

ok_Hash.put("tPostgresqlRow_1", true);
end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tPostgresqlRow_2Process(globalMap);



/**
 * [tPostgresqlRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

    if (resourceMap.get("statementClosed_tPostgresqlRow_1") == null) {
            java.sql.Statement stmtToClose_tPostgresqlRow_1 = null;
            if ((stmtToClose_tPostgresqlRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tPostgresqlRow_1")) != null) {
                stmtToClose_tPostgresqlRow_1.close();
            }
    }
 



/**
 * [tPostgresqlRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_2", false);
		start_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_2";

	
		int tos_count_tPostgresqlRow_2 = 0;
		

	java.sql.Connection conn_tPostgresqlRow_2 = null;
	String query_tPostgresqlRow_2 = "";
	boolean whetherReject_tPostgresqlRow_2 = false;
				conn_tPostgresqlRow_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
			
    resourceMap.put("conn_tPostgresqlRow_2", conn_tPostgresqlRow_2);
        java.sql.Statement stmt_tPostgresqlRow_2 = conn_tPostgresqlRow_2.createStatement();
        resourceMap.put("stmt_tPostgresqlRow_2", stmt_tPostgresqlRow_2);


 



/**
 * [tPostgresqlRow_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

query_tPostgresqlRow_2 = "insert into ledger\n		select distinct \n		act_vrsn_tbl.act_id as ref_id, \n		max(act_vrsn_tbl.crt_utc) as sort_time, \n"
+"		coalesce(act_utc, act_stop_utc) as act_date, \n		act_ptcpt_tbl.ent_id as mat_id, \n		act_type.mnemonic as typ_cs, \n		"
+"rsn_type.mnemonic as rsn,\n		loc_ptcpt.ent_id as loc_id,\n		case when excl.tag_value is null then act_ptcpt_tbl.qty else"
+" 0 end as qty,\n		act_vrsn_tbl.crt_usr_id as usr_id\n	from \n		act_ptcpt_tbl inner join act_vrsn_tbl using (act_id)\n		-"
+"-inner join act_tbl on (act_tbl.act_id = act_vrsn_tbl.act_id)\n		inner join act_ptcpt_tbl as loc_ptcpt on (loc_ptcpt.act"
+"_id = act_vrsn_tbl.act_id and act_vrsn_tbl.obslt_utc is null and loc_ptcpt.rol_cd_id in ('61848557-d78d-40e5-954f-0b9c97"
+"307a04'))\n		left join cd_cur_vrsn_vw as act_type on (act_type.cd_id = act_vrsn_tbl.typ_cd_id)\n		left join cd_cur_vrsn_"
+"vw as rsn_type on (rsn_type.cd_id = act_vrsn_tbl.rsn_cd_id)\n		left join act_tag_tbl as excl on (act_vrsn_tbl.act_id = e"
+"xcl.act_id and tag_name = 'excludeFromLedger')\n	where\n		act_vrsn_tbl.sts_cd_id = 'afc33800-8225-4061-b168-bacc09cdbae3"
+"' and\n		act_ptcpt_tbl.rol_cd_id = 'a5cac7f7-e3b7-4dd8-872c-db0e7fcc2d84' and\n		--act_tbl.mod_cd_id = 'ec74541f-87c4-43"
+"27-a4b9-97f325501747' and \n		not(coalesce(act_vrsn_tbl.neg_ind, false)) and\n		act_vrsn_tbl.obslt_utc is null and\n		ac"
+"t_ptcpt_tbl.obslt_vrsn_seq_id is null\n	group by \n		ref_id, act_date, mat_id, typ_cs, rsn, loc_id, act_ptcpt_tbl.qty, u"
+"sr_id, excl.tag_value\n	order by \n		sort_time asc;\n";
whetherReject_tPostgresqlRow_2 = false;
globalMap.put("tPostgresqlRow_2_QUERY",query_tPostgresqlRow_2);
try {
		stmt_tPostgresqlRow_2.execute(query_tPostgresqlRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_2 = true;
		
			throw(e);
			
	}
	
	if(!whetherReject_tPostgresqlRow_2) {
		
	}
	

 


	tos_count_tPostgresqlRow_2++;

/**
 * [tPostgresqlRow_2 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

 



/**
 * [tPostgresqlRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

 



/**
 * [tPostgresqlRow_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlRow_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

	
        stmt_tPostgresqlRow_2.close();
        resourceMap.remove("stmt_tPostgresqlRow_2");
    resourceMap.put("statementClosed_tPostgresqlRow_2", true);
    resourceMap.put("finish_tPostgresqlRow_2", true);
 

ok_Hash.put("tPostgresqlRow_2", true);
end_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tPostgresqlInput_1Process(globalMap);



/**
 * [tPostgresqlRow_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

    if (resourceMap.get("statementClosed_tPostgresqlRow_2") == null) {
            java.sql.Statement stmtToClose_tPostgresqlRow_2 = null;
            if ((stmtToClose_tPostgresqlRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tPostgresqlRow_2")) != null) {
                stmtToClose_tPostgresqlRow_2.close();
            }
    }
 



/**
 * [tPostgresqlRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 1);
	}
	


public static class outputLedgerStruct implements routines.system.IPersistableRow<outputLedgerStruct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_StockData = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_StockData = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object ref_id;

				public Object getRef_id () {
					return this.ref_id;
				}
				
			    public Object fac_id;

				public Object getFac_id () {
					return this.fac_id;
				}
				
			    public Object mmat_id;

				public Object getMmat_id () {
					return this.mmat_id;
				}
				
			    public Object crt_etl_id;

				public Object getCrt_etl_id () {
					return this.crt_etl_id;
				}
				
			    public Object upd_etl_id;

				public Object getUpd_etl_id () {
					return this.upd_etl_id;
				}
				
			    public java.util.Date crt_utc;

				public java.util.Date getCrt_utc () {
					return this.crt_utc;
				}
				
			    public java.util.Date upd_utc;

				public java.util.Date getUpd_utc () {
					return this.upd_utc;
				}
				
			    public java.util.Date obslt_utc;

				public java.util.Date getObslt_utc () {
					return this.obslt_utc;
				}
				
			    public long bal_eol;

				public long getBal_eol () {
					return this.bal_eol;
				}
				
			    public int qty;

				public int getQty () {
					return this.qty;
				}
				
			    public String tx_desc;

				public String getTx_desc () {
					return this.tx_desc;
				}
				
			    public java.util.Date tx_utc;

				public java.util.Date getTx_utc () {
					return this.tx_utc;
				}
				
			    public String rsn_desc;

				public String getRsn_desc () {
					return this.rsn_desc;
				}
				
			    public String usr_name;

				public String getUsr_name () {
					return this.usr_name;
				}
				
			    public BigDecimal seq_id;

				public BigDecimal getSeq_id () {
					return this.seq_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ref_id == null) ? 0 : this.ref_id.hashCode());
					
						result = prime * result + ((this.fac_id == null) ? 0 : this.fac_id.hashCode());
					
						result = prime * result + ((this.mmat_id == null) ? 0 : this.mmat_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outputLedgerStruct other = (outputLedgerStruct) obj;
		
						if (this.ref_id == null) {
							if (other.ref_id != null)
								return false;
						
						} else if (!this.ref_id.equals(other.ref_id))
						
							return false;
					
						if (this.fac_id == null) {
							if (other.fac_id != null)
								return false;
						
						} else if (!this.fac_id.equals(other.fac_id))
						
							return false;
					
						if (this.mmat_id == null) {
							if (other.mmat_id != null)
								return false;
						
						} else if (!this.mmat_id.equals(other.mmat_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(outputLedgerStruct other) {

		other.ref_id = this.ref_id;
	            other.fac_id = this.fac_id;
	            other.mmat_id = this.mmat_id;
	            other.crt_etl_id = this.crt_etl_id;
	            other.upd_etl_id = this.upd_etl_id;
	            other.crt_utc = this.crt_utc;
	            other.upd_utc = this.upd_utc;
	            other.obslt_utc = this.obslt_utc;
	            other.bal_eol = this.bal_eol;
	            other.qty = this.qty;
	            other.tx_desc = this.tx_desc;
	            other.tx_utc = this.tx_utc;
	            other.rsn_desc = this.rsn_desc;
	            other.usr_name = this.usr_name;
	            other.seq_id = this.seq_id;
	            
	}

	public void copyKeysDataTo(outputLedgerStruct other) {

		other.ref_id = this.ref_id;
	            	other.fac_id = this.fac_id;
	            	other.mmat_id = this.mmat_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_StockData.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_StockData.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_StockData, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_StockData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_StockData) {

        	try {

        		int length = 0;
		
						this.ref_id = (Object) dis.readObject();
					
						this.fac_id = (Object) dis.readObject();
					
						this.mmat_id = (Object) dis.readObject();
					
						this.crt_etl_id = (Object) dis.readObject();
					
						this.upd_etl_id = (Object) dis.readObject();
					
					this.crt_utc = readDate(dis);
					
					this.upd_utc = readDate(dis);
					
					this.obslt_utc = readDate(dis);
					
			        this.bal_eol = dis.readLong();
					
			        this.qty = dis.readInt();
					
					this.tx_desc = readString(dis);
					
					this.tx_utc = readDate(dis);
					
					this.rsn_desc = readString(dis);
					
					this.usr_name = readString(dis);
					
						this.seq_id = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ref_id);
					
					// Object
				
       			    	dos.writeObject(this.fac_id);
					
					// Object
				
       			    	dos.writeObject(this.mmat_id);
					
					// Object
				
       			    	dos.writeObject(this.crt_etl_id);
					
					// Object
				
       			    	dos.writeObject(this.upd_etl_id);
					
					// java.util.Date
				
						writeDate(this.crt_utc,dos);
					
					// java.util.Date
				
						writeDate(this.upd_utc,dos);
					
					// java.util.Date
				
						writeDate(this.obslt_utc,dos);
					
					// long
				
		            	dos.writeLong(this.bal_eol);
					
					// int
				
		            	dos.writeInt(this.qty);
					
					// String
				
						writeString(this.tx_desc,dos);
					
					// java.util.Date
				
						writeDate(this.tx_utc,dos);
					
					// String
				
						writeString(this.rsn_desc,dos);
					
					// String
				
						writeString(this.usr_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.seq_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ref_id="+String.valueOf(ref_id));
		sb.append(",fac_id="+String.valueOf(fac_id));
		sb.append(",mmat_id="+String.valueOf(mmat_id));
		sb.append(",crt_etl_id="+String.valueOf(crt_etl_id));
		sb.append(",upd_etl_id="+String.valueOf(upd_etl_id));
		sb.append(",crt_utc="+String.valueOf(crt_utc));
		sb.append(",upd_utc="+String.valueOf(upd_utc));
		sb.append(",obslt_utc="+String.valueOf(obslt_utc));
		sb.append(",bal_eol="+String.valueOf(bal_eol));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",tx_desc="+tx_desc);
		sb.append(",tx_utc="+String.valueOf(tx_utc));
		sb.append(",rsn_desc="+rsn_desc);
		sb.append(",usr_name="+usr_name);
		sb.append(",seq_id="+String.valueOf(seq_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputLedgerStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ref_id, other.ref_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.fac_id, other.fac_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.mmat_id, other.mmat_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_StockData = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_StockData = new byte[0];

	
			    public Object ref_id;

				public Object getRef_id () {
					return this.ref_id;
				}
				
			    public java.util.Date sort_time;

				public java.util.Date getSort_time () {
					return this.sort_time;
				}
				
			    public java.util.Date act_date;

				public java.util.Date getAct_date () {
					return this.act_date;
				}
				
			    public Object mat_id;

				public Object getMat_id () {
					return this.mat_id;
				}
				
			    public String typ_cs;

				public String getTyp_cs () {
					return this.typ_cs;
				}
				
			    public String rsn;

				public String getRsn () {
					return this.rsn;
				}
				
			    public Object loc_id;

				public Object getLoc_id () {
					return this.loc_id;
				}
				
			    public Long sol_bal;

				public Long getSol_bal () {
					return this.sol_bal;
				}
				
			    public Integer qty;

				public Integer getQty () {
					return this.qty;
				}
				
			    public Long eol_bal;

				public Long getEol_bal () {
					return this.eol_bal;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public BigDecimal seq_id;

				public BigDecimal getSeq_id () {
					return this.seq_id;
				}
				
			    public String usr_name;

				public String getUsr_name () {
					return this.usr_name;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_StockData.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_StockData.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_StockData, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_StockData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_StockData) {

        	try {

        		int length = 0;
		
						this.ref_id = (Object) dis.readObject();
					
					this.sort_time = readDate(dis);
					
					this.act_date = readDate(dis);
					
						this.mat_id = (Object) dis.readObject();
					
					this.typ_cs = readString(dis);
					
					this.rsn = readString(dis);
					
						this.loc_id = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sol_bal = null;
           				} else {
           			    	this.sol_bal = dis.readLong();
           				}
					
						this.qty = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.eol_bal = null;
           				} else {
           			    	this.eol_bal = dis.readLong();
           				}
					
						this.usr_id = (Object) dis.readObject();
					
						this.seq_id = (BigDecimal) dis.readObject();
					
					this.usr_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ref_id);
					
					// java.util.Date
				
						writeDate(this.sort_time,dos);
					
					// java.util.Date
				
						writeDate(this.act_date,dos);
					
					// Object
				
       			    	dos.writeObject(this.mat_id);
					
					// String
				
						writeString(this.typ_cs,dos);
					
					// String
				
						writeString(this.rsn,dos);
					
					// Object
				
       			    	dos.writeObject(this.loc_id);
					
					// Long
				
						if(this.sol_bal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.sol_bal);
		            	}
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// Long
				
						if(this.eol_bal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.eol_bal);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.seq_id);
					
					// String
				
						writeString(this.usr_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ref_id="+String.valueOf(ref_id));
		sb.append(",sort_time="+String.valueOf(sort_time));
		sb.append(",act_date="+String.valueOf(act_date));
		sb.append(",mat_id="+String.valueOf(mat_id));
		sb.append(",typ_cs="+typ_cs);
		sb.append(",rsn="+rsn);
		sb.append(",loc_id="+String.valueOf(loc_id));
		sb.append(",sol_bal="+String.valueOf(sol_bal));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",eol_bal="+String.valueOf(eol_bal));
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",seq_id="+String.valueOf(seq_id));
		sb.append(",usr_name="+usr_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tPostgresqlInput_1Struct implements routines.system.IPersistableRow<after_tPostgresqlInput_1Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_StockData = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_StockData = new byte[0];

	
			    public Object ref_id;

				public Object getRef_id () {
					return this.ref_id;
				}
				
			    public java.util.Date sort_time;

				public java.util.Date getSort_time () {
					return this.sort_time;
				}
				
			    public java.util.Date act_date;

				public java.util.Date getAct_date () {
					return this.act_date;
				}
				
			    public Object mat_id;

				public Object getMat_id () {
					return this.mat_id;
				}
				
			    public String typ_cs;

				public String getTyp_cs () {
					return this.typ_cs;
				}
				
			    public String rsn;

				public String getRsn () {
					return this.rsn;
				}
				
			    public Object loc_id;

				public Object getLoc_id () {
					return this.loc_id;
				}
				
			    public Long sol_bal;

				public Long getSol_bal () {
					return this.sol_bal;
				}
				
			    public Integer qty;

				public Integer getQty () {
					return this.qty;
				}
				
			    public Long eol_bal;

				public Long getEol_bal () {
					return this.eol_bal;
				}
				
			    public Object usr_id;

				public Object getUsr_id () {
					return this.usr_id;
				}
				
			    public BigDecimal seq_id;

				public BigDecimal getSeq_id () {
					return this.seq_id;
				}
				
			    public String usr_name;

				public String getUsr_name () {
					return this.usr_name;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_StockData.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_StockData.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_StockData, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_StockData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_StockData) {

        	try {

        		int length = 0;
		
						this.ref_id = (Object) dis.readObject();
					
					this.sort_time = readDate(dis);
					
					this.act_date = readDate(dis);
					
						this.mat_id = (Object) dis.readObject();
					
					this.typ_cs = readString(dis);
					
					this.rsn = readString(dis);
					
						this.loc_id = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sol_bal = null;
           				} else {
           			    	this.sol_bal = dis.readLong();
           				}
					
						this.qty = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.eol_bal = null;
           				} else {
           			    	this.eol_bal = dis.readLong();
           				}
					
						this.usr_id = (Object) dis.readObject();
					
						this.seq_id = (BigDecimal) dis.readObject();
					
					this.usr_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ref_id);
					
					// java.util.Date
				
						writeDate(this.sort_time,dos);
					
					// java.util.Date
				
						writeDate(this.act_date,dos);
					
					// Object
				
       			    	dos.writeObject(this.mat_id);
					
					// String
				
						writeString(this.typ_cs,dos);
					
					// String
				
						writeString(this.rsn,dos);
					
					// Object
				
       			    	dos.writeObject(this.loc_id);
					
					// Long
				
						if(this.sol_bal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.sol_bal);
		            	}
					
					// Integer
				
						writeInteger(this.qty,dos);
					
					// Long
				
						if(this.eol_bal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.eol_bal);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.usr_id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.seq_id);
					
					// String
				
						writeString(this.usr_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ref_id="+String.valueOf(ref_id));
		sb.append(",sort_time="+String.valueOf(sort_time));
		sb.append(",act_date="+String.valueOf(act_date));
		sb.append(",mat_id="+String.valueOf(mat_id));
		sb.append(",typ_cs="+typ_cs);
		sb.append(",rsn="+rsn);
		sb.append(",loc_id="+String.valueOf(loc_id));
		sb.append(",sol_bal="+String.valueOf(sol_bal));
		sb.append(",qty="+String.valueOf(qty));
		sb.append(",eol_bal="+String.valueOf(eol_bal));
		sb.append(",usr_id="+String.valueOf(usr_id));
		sb.append(",seq_id="+String.valueOf(seq_id));
		sb.append(",usr_name="+usr_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tPostgresqlInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tPostgresqlInput_2Process(globalMap);

		row1Struct row1 = new row1Struct();
outputLedgerStruct outputLedger = new outputLedgerStruct();





	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("outputLedger" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = (String)globalMap.get("schema_" + "tPostgresqlConnection_2");
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "fac_mat_ldgr_tbl";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "fac_mat_ldgr_tbl";
}

int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	conn_tPostgresqlOutput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	
	


   int batchSize_tPostgresqlOutput_1 = 10000;
   int batchSizeCounter_tPostgresqlOutput_1=0;

int count_tPostgresqlOutput_1=0;
            int rsTruncCountNumber_tPostgresqlOutput_1 = 0;
            try(java.sql.Statement stmtTruncCount_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tPostgresqlOutput_1 = stmtTruncCount_tPostgresqlOutput_1.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tPostgresqlOutput_1 + "\"")) {
                    if(rsTruncCount_tPostgresqlOutput_1.next()) {
                        rsTruncCountNumber_tPostgresqlOutput_1 = rsTruncCount_tPostgresqlOutput_1.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.createStatement()) {
                stmtTrunc_tPostgresqlOutput_1.executeUpdate("TRUNCATE TABLE \"" + tableName_tPostgresqlOutput_1 + "\"");
                deletedCount_tPostgresqlOutput_1 += rsTruncCountNumber_tPostgresqlOutput_1;
            }
	    String insert_tPostgresqlOutput_1 = "INSERT INTO \"" + tableName_tPostgresqlOutput_1 + "\" (\"ref_id\",\"fac_id\",\"mmat_id\",\"crt_etl_id\",\"upd_etl_id\",\"crt_utc\",\"upd_utc\",\"obslt_utc\",\"bal_eol\",\"qty\",\"tx_desc\",\"tx_utc\",\"rsn_desc\",\"usr_name\",\"seq_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(insert_tPostgresqlOutput_1);
	    resourceMap.put("pstmt_tPostgresqlOutput_1", pstmt_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	
		tHash_Lookup_row2.initGet();
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputLedgerStruct outputLedger_tmp = new outputLedgerStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
		        conn_tPostgresqlInput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "\nwith balance as (\n                 select mat.ent_id as mat_id, ent_rel_tbl.src_ent_id as loc_id, sum(case when obsl"
+"t_vrsn_seq_id is null then ent_rel_tbl.qty else 0 end) as qty\n                from \n                                en"
+"t_rel_tbl \n                                inner join ent_tbl as mat on ( mat.ent_id = ent_rel_tbl.trg_ent_id and rel_t"
+"yp_cd_id = '117da15c-0864-4f00-a987-9b9854cba44e' and  mat.cls_cd_id = 'FAFEC286-89D5-420B-9085-054ACA9D1EEF')\n        "
+"                        inner join ent_tbl as loc on ( loc.ent_id = ent_rel_tbl.src_ent_id and loc.cls_cd_id = 'ff34dfa7"
+"-c6d3-4f8b-bc9f-14bcdc13ba6c')\n				group by  mat.ent_id, ent_rel_tbl.src_ent_id\n), ledger_deduction as\n(\n           "
+"     select distinct ledger.*, sum(qty) OVER prev AS tot_ded\n                 --coalesce((select sum(qty) from ledger l"
+" where l.seq_id > ledger.seq_id and l.mat_id = ledger.mat_id and l.loc_id = ledger.loc_id), 0) tot_ded \n               "
+" from ledger\n                window prev AS (partition by loc_id, mat_id order by seq_id desc)\n                order b"
+"y seq_id asc\n) , running_balance as \n(\n                                select '00000000-0000-0000-0000-000000000000' "
+"as ref_id, current_timestamp as sort_time, current_timestamp as act_date, mat_id, 'BALANCE_OH' as typ_cs, null as rsn, l"
+"oc_id, qty as sol_bal, 0 as qty, qty as eol_bal, 'fadca076-3690-4a6e-af9e-f1cd68e8c7e8' as usr_id, 99999999999 as seq_id"
+"\n                                from      \n                                                balance\n                 "
+"               union\n                                select ref_id, ledger.sort_time, ledger.act_date, ledger.mat_id, l"
+"edger.typ_cs, ledger.rsn, ledger.loc_id, balance.qty - ledger.tot_ded, ledger.qty, balance.qty - ledger.tot_ded + ledger"
+".qty as eol_bal, ledger.usr_id, seq_id\n                                from \n                                         "
+"       ledger_deduction as ledger inner join balance on (ledger.mat_id = balance.mat_id and ledger.loc_id = balance.loc_"
+"id)\n) select running_balance.* , usr_name\nfrom \n                running_balance inner join sec_usr_tbl using (usr_id)"
+"\nwhere eol_bal is not null\norder by seq_id desc;";
			

            	globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);
		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;

		    try {
		    	rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								row1.ref_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(1) != null) {
                row1.ref_id = rs_tPostgresqlInput_1.getObject(1);
            } else {
                    row1.ref_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								row1.sort_time = null;
							} else {
										
			row1.sort_time = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 3) {
								row1.act_date = null;
							} else {
										
			row1.act_date = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_1, 3);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 4) {
								row1.mat_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(4) != null) {
                row1.mat_id = rs_tPostgresqlInput_1.getObject(4);
            } else {
                    row1.mat_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 5) {
								row1.typ_cs = null;
							} else {
	                         		
        	row1.typ_cs = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 5, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 6) {
								row1.rsn = null;
							} else {
	                         		
        	row1.rsn = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 6, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 7) {
								row1.loc_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(7) != null) {
                row1.loc_id = rs_tPostgresqlInput_1.getObject(7);
            } else {
                    row1.loc_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 8) {
								row1.sol_bal = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(8) != null) {
                row1.sol_bal = rs_tPostgresqlInput_1.getLong(8);
            } else {
                    row1.sol_bal = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 9) {
								row1.qty = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(9) != null) {
                row1.qty = rs_tPostgresqlInput_1.getInt(9);
            } else {
                    row1.qty = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 10) {
								row1.eol_bal = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(10) != null) {
                row1.eol_bal = rs_tPostgresqlInput_1.getLong(10);
            } else {
                    row1.eol_bal = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 11) {
								row1.usr_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(11) != null) {
                row1.usr_id = rs_tPostgresqlInput_1.getObject(11);
            } else {
                    row1.usr_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 12) {
								row1.seq_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(12) != null) {
                row1.seq_id = rs_tPostgresqlInput_1.getBigDecimal(12);
            } else {
                    row1.seq_id = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 13) {
								row1.usr_name = null;
							} else {
	                         		
        	row1.usr_name = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 13, false);
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow2 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow2 = true;
			           		  	} // G 21
                    		  	
                    		

							row2Struct row2 = null;
                    		  	 
							

								while ((tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) || forceLooprow2) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row2'
									
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								
								if(!forceLooprow2) { // G 46
								
							
								 
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow2 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

outputLedger = null;


// # Output table : 'outputLedger'
outputLedger_tmp.ref_id = row1.ref_id;
outputLedger_tmp.fac_id = row1.loc_id ;
outputLedger_tmp.mmat_id = row1.mat_id ;
outputLedger_tmp.crt_etl_id = row2.etl_id ;
outputLedger_tmp.upd_etl_id = null;
outputLedger_tmp.crt_utc = row1.sort_time ;
outputLedger_tmp.upd_utc = null;
outputLedger_tmp.obslt_utc = null;
outputLedger_tmp.bal_eol = row1.eol_bal ;
outputLedger_tmp.qty = row1.qty;
outputLedger_tmp.tx_desc = row1.typ_cs ;
outputLedger_tmp.tx_utc = row1.act_date ;
outputLedger_tmp.rsn_desc = row1.rsn ;
outputLedger_tmp.usr_name = row1.usr_name;
outputLedger_tmp.seq_id = row1.seq_id ;
outputLedger = outputLedger_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "outputLedger"
if(outputLedger != null) { 



	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//outputLedger
			//outputLedger


			
				if(execStat){
					runStat.updateStatOnConnection("outputLedger"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_1 = false;
                    if(outputLedger.ref_id == null) {
pstmt_tPostgresqlOutput_1.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(1, outputLedger.ref_id, java.sql.Types.OTHER);
}

                    if(outputLedger.fac_id == null) {
pstmt_tPostgresqlOutput_1.setNull(2, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(2, outputLedger.fac_id, java.sql.Types.OTHER);
}

                    if(outputLedger.mmat_id == null) {
pstmt_tPostgresqlOutput_1.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(3, outputLedger.mmat_id, java.sql.Types.OTHER);
}

                    if(outputLedger.crt_etl_id == null) {
pstmt_tPostgresqlOutput_1.setNull(4, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(4, outputLedger.crt_etl_id, java.sql.Types.OTHER);
}

                    if(outputLedger.upd_etl_id == null) {
pstmt_tPostgresqlOutput_1.setNull(5, java.sql.Types.OTHER);
} else {pstmt_tPostgresqlOutput_1.setObject(5, outputLedger.upd_etl_id, java.sql.Types.OTHER);
}

                    if(outputLedger.crt_utc != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(6, new java.sql.Timestamp(outputLedger.crt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(outputLedger.upd_utc != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(7, new java.sql.Timestamp(outputLedger.upd_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(7, java.sql.Types.TIMESTAMP);
}

                    if(outputLedger.obslt_utc != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(8, new java.sql.Timestamp(outputLedger.obslt_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(8, java.sql.Types.TIMESTAMP);
}

                    pstmt_tPostgresqlOutput_1.setLong(9, outputLedger.bal_eol);

                    pstmt_tPostgresqlOutput_1.setInt(10, outputLedger.qty);

                    if(outputLedger.tx_desc == null) {
pstmt_tPostgresqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(11, outputLedger.tx_desc);
}

                    if(outputLedger.tx_utc != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(12, new java.sql.Timestamp(outputLedger.tx_utc.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(12, java.sql.Types.TIMESTAMP);
}

                    if(outputLedger.rsn_desc == null) {
pstmt_tPostgresqlOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(13, outputLedger.rsn_desc);
}

                    if(outputLedger.usr_name == null) {
pstmt_tPostgresqlOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(14, outputLedger.usr_name);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(15, outputLedger.seq_id);

			
    		pstmt_tPostgresqlOutput_1.addBatch();
    		nb_line_tPostgresqlOutput_1++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_1++;
    		  
            if(!whetherReject_tPostgresqlOutput_1) {
            }
    			if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
                try {
						int countSum_tPostgresqlOutput_1 = 0;
						    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
				    	
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
				    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
				    	String errormessage_tPostgresqlOutput_1;
						if (ne_tPostgresqlOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
							errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
						}else{
							errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_1 = 0;
						for(int countEach_tPostgresqlOutput_1: e_tPostgresqlOutput_1.getUpdateCounts()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
						
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_1);
				    	
					}
    			}
    		

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */
	
	/**
	 * [tPostgresqlOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

 



/**
 * [tPostgresqlOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

 



/**
 * [tPostgresqlOutput_1 process_data_end ] stop
 */

} // End of branch "outputLedger"



	
		} // close loop of lookup 'row2' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	if (rs_tPostgresqlInput_1 != null) {
		rs_tPostgresqlInput_1.close();
	}
	if (stmt_tPostgresqlInput_1 != null) {
		stmt_tPostgresqlInput_1.close();
	}
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	    try {
				int countSum_tPostgresqlOutput_1 = 0;
				if (pstmt_tPostgresqlOutput_1 != null && batchSizeCounter_tPostgresqlOutput_1 > 0) {
						
					for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
	    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
	    	String errormessage_tPostgresqlOutput_1;
			if (ne_tPostgresqlOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
				errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
			}else{
				errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_1 = 0;
			for(int countEach_tPostgresqlOutput_1: e_tPostgresqlOutput_1.getUpdateCounts()) {
				countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
			}
			
	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_1);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_1 != null) {
        		
            pstmt_tPostgresqlOutput_1.close();
            resourceMap.remove("pstmt_tPostgresqlOutput_1");
        }
    resourceMap.put("statementClosed_tPostgresqlOutput_1", true);

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("outputLedger"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tPostgresqlCommit_1Process(globalMap);



/**
 * [tPostgresqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



    if (resourceMap.get("statementClosed_tPostgresqlOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_1 = null;
                if ((pstmtToClose_tPostgresqlOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tPostgresqlOutput_1")) != null) {
                    pstmtToClose_tPostgresqlOutput_1.close();
                }
    }
 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostgresqlCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlCommit_1", false);
		start_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlCommit_1";

	
		int tos_count_tPostgresqlCommit_1 = 0;
		

 



/**
 * [tPostgresqlCommit_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

	java.sql.Connection conn_tPostgresqlCommit_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	if(conn_tPostgresqlCommit_1 != null && !conn_tPostgresqlCommit_1.isClosed())
	{
	
		try{
	
			
			conn_tPostgresqlCommit_1.commit();
			
	
		}finally{
			
			conn_tPostgresqlCommit_1.close();
			
	    }
	
	}

 


	tos_count_tPostgresqlCommit_1++;

/**
 * [tPostgresqlCommit_1 main ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlCommit_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 

ok_Hash.put("tPostgresqlCommit_1", true);
end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());




/**
 * [tPostgresqlCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlCommit_1";

	

 



/**
 * [tPostgresqlCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRollback_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRollback_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRollback_1", false);
		start_Hash.put("tPostgresqlRollback_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRollback_1";

	
		int tos_count_tPostgresqlRollback_1 = 0;
		

 



/**
 * [tPostgresqlRollback_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlRollback_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRollback_1";

	

	java.sql.Connection conn_tPostgresqlRollback_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
	if(conn_tPostgresqlRollback_1 != null && !conn_tPostgresqlRollback_1.isClosed()) {
		
			try{
				
			conn_tPostgresqlRollback_1.rollback();
			
			}finally{
		    	
			conn_tPostgresqlRollback_1.close();
			
		    }
		
	}

 


	tos_count_tPostgresqlRollback_1++;

/**
 * [tPostgresqlRollback_1 main ] stop
 */
	
	/**
	 * [tPostgresqlRollback_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlRollback_1";

	

 



/**
 * [tPostgresqlRollback_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostgresqlRollback_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRollback_1";

	

 



/**
 * [tPostgresqlRollback_1 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlRollback_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRollback_1";

	

 

ok_Hash.put("tPostgresqlRollback_1", true);
end_Hash.put("tPostgresqlRollback_1", System.currentTimeMillis());




/**
 * [tPostgresqlRollback_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tPostgresqlRollback_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDie_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRollback_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRollback_1";

	

 



/**
 * [tPostgresqlRollback_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRollback_1_SUBPROCESS_STATE", 1);
	}
	

public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "Error warehousing stock elements", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Error warehousing stock elements");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Error warehousing stock elements");
	globalMap.put("tDie_1_DIE_MESSAGES", "Error warehousing stock elements");
	
	} catch (Exception | Error e_tDie_1) {
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	
	System.exit(4);

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_StockData = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_StockData = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_StockData) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tPostgresqlInput_2 - inputs:(after_tPostgresqlInput_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(outputLedger)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
		        conn_tPostgresqlInput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);
		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;

		    try {
		    	rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								row2.etl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(1) != null) {
                row2.etl_id = rs_tPostgresqlInput_2.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 2) {
								row2.start_utc = null;
							} else {
										
			row2.start_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 3) {
								row2.stop_utc = null;
							} else {
										
			row2.stop_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_2, 3);
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.etl_id = row2.etl_id;
				
				row2_HashRow.start_utc = row2.start_utc;
				
				row2_HashRow.stop_utc = row2.stop_utc;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	if (rs_tPostgresqlInput_2 != null) {
		rs_tPostgresqlInput_2.close();
	}
	if (stmt_tPostgresqlInput_2 != null) {
		stmt_tPostgresqlInput_2.close();
	}
}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_StockData = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_StockData = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_StockData) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tAdvancedHash_row10 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row10", false);
		start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row10 = 0;
		

			   		// connection name:row10
			   		// source node:tPostgresqlInput_4 - inputs:(after_tPostgresqlInput_3) outputs:(row10,row10) | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
			   		// linked node: tMap_2 - inputs:(row9,row10) outputs:(outputMaterials)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row10Struct>getLookup(matchingModeEnum_row10);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row10 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_4", false);
		start_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_4";

	
		int tos_count_tPostgresqlInput_4 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_4 = 0;
		    java.sql.Connection conn_tPostgresqlInput_4 = null;
		        conn_tPostgresqlInput_4 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4.createStatement();

		    String dbquery_tPostgresqlInput_4 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tPostgresqlInput_4_QUERY",dbquery_tPostgresqlInput_4);
		    java.sql.ResultSet rs_tPostgresqlInput_4 = null;

		    try {
		    	rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4.executeQuery(dbquery_tPostgresqlInput_4);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4.getColumnCount();

		    String tmpContent_tPostgresqlInput_4 = null;
		    
		    
		    while (rs_tPostgresqlInput_4.next()) {
		        nb_line_tPostgresqlInput_4++;
		        
							if(colQtyInRs_tPostgresqlInput_4 < 1) {
								row10.etl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_4.getObject(1) != null) {
                row10.etl_id = rs_tPostgresqlInput_4.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 2) {
								row10.start_utc = null;
							} else {
										
			row10.start_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_4, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 3) {
								row10.stop_utc = null;
							} else {
										
			row10.stop_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_4, 3);
		                    }
					


 



/**
 * [tPostgresqlInput_4 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 


	tos_count_tPostgresqlInput_4++;

/**
 * [tPostgresqlInput_4 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		


			   
			   

					row10Struct row10_HashRow = new row10Struct();
		   	   	   
				
				row10_HashRow.etl_id = row10.etl_id;
				
				row10_HashRow.start_utc = row10.start_utc;
				
				row10_HashRow.stop_utc = row10.stop_utc;
				
			tHash_Lookup_row10.put(row10_HashRow);
			
            




 


	tos_count_tAdvancedHash_row10++;

/**
 * [tAdvancedHash_row10 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

	}
}finally{
	if (rs_tPostgresqlInput_4 != null) {
		rs_tPostgresqlInput_4.close();
	}
	if (stmt_tPostgresqlInput_4 != null) {
		stmt_tPostgresqlInput_4.close();
	}
}
globalMap.put("tPostgresqlInput_4_NB_LINE",nb_line_tPostgresqlInput_4);
 

ok_Hash.put("tPostgresqlInput_4", true);
end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());




/**
 * [tPostgresqlInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

tHash_Lookup_row10.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row10", true);
end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());




/**
 * [tAdvancedHash_row10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_StockData = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_StockData = new byte[0];

	
			    public Object etl_id;

				public Object getEtl_id () {
					return this.etl_id;
				}
				
			    public java.util.Date start_utc;

				public java.util.Date getStart_utc () {
					return this.start_utc;
				}
				
			    public java.util.Date stop_utc;

				public java.util.Date getStop_utc () {
					return this.stop_utc;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_StockData) {

        	try {

        		int length = 0;
		
						this.etl_id = (Object) dis.readObject();
					
					this.start_utc = readDate(dis);
					
					this.stop_utc = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.etl_id);
					
					// java.util.Date
				
						writeDate(this.start_utc,dos);
					
					// java.util.Date
				
						writeDate(this.stop_utc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("etl_id="+String.valueOf(etl_id));
		sb.append(",start_utc="+String.valueOf(start_utc));
		sb.append(",stop_utc="+String.valueOf(stop_utc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row12 = 0;
		

			   		// connection name:row12
			   		// source node:tPostgresqlInput_6 - inputs:(after_tPostgresqlInput_5) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_3 - inputs:(row11,row12) outputs:(outputManufacturedMaterials)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_6", false);
		start_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_6";

	
		int tos_count_tPostgresqlInput_6 = 0;
		
	
    
	
		    int nb_line_tPostgresqlInput_6 = 0;
		    java.sql.Connection conn_tPostgresqlInput_6 = null;
		        conn_tPostgresqlInput_6 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_2");
		    
			java.sql.Statement stmt_tPostgresqlInput_6 = conn_tPostgresqlInput_6.createStatement();

		    String dbquery_tPostgresqlInput_6 = "select * from whse_etl_tbl order by start_utc desc limit 1;";
			

            	globalMap.put("tPostgresqlInput_6_QUERY",dbquery_tPostgresqlInput_6);
		    java.sql.ResultSet rs_tPostgresqlInput_6 = null;

		    try {
		    	rs_tPostgresqlInput_6 = stmt_tPostgresqlInput_6.executeQuery(dbquery_tPostgresqlInput_6);
		    	java.sql.ResultSetMetaData rsmd_tPostgresqlInput_6 = rs_tPostgresqlInput_6.getMetaData();
		    	int colQtyInRs_tPostgresqlInput_6 = rsmd_tPostgresqlInput_6.getColumnCount();

		    String tmpContent_tPostgresqlInput_6 = null;
		    
		    
		    while (rs_tPostgresqlInput_6.next()) {
		        nb_line_tPostgresqlInput_6++;
		        
							if(colQtyInRs_tPostgresqlInput_6 < 1) {
								row12.etl_id = null;
							} else {
		                          
            if(rs_tPostgresqlInput_6.getObject(1) != null) {
                row12.etl_id = rs_tPostgresqlInput_6.getObject(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 2) {
								row12.start_utc = null;
							} else {
										
			row12.start_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_6, 2);
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 3) {
								row12.stop_utc = null;
							} else {
										
			row12.stop_utc = routines.system.JDBCUtil.getDate(rs_tPostgresqlInput_6, 3);
		                    }
					


 



/**
 * [tPostgresqlInput_6 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_6 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 


	tos_count_tPostgresqlInput_6++;

/**
 * [tPostgresqlInput_6 main ] stop
 */
	
	/**
	 * [tPostgresqlInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 



/**
 * [tPostgresqlInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.etl_id = row12.etl_id;
				
				row12_HashRow.start_utc = row12.start_utc;
				
				row12_HashRow.stop_utc = row12.stop_utc;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tPostgresqlInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 



/**
 * [tPostgresqlInput_6 process_data_end ] stop
 */
	
	/**
	 * [tPostgresqlInput_6 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

	}
}finally{
	if (rs_tPostgresqlInput_6 != null) {
		rs_tPostgresqlInput_6.close();
	}
	if (stmt_tPostgresqlInput_6 != null) {
		stmt_tPostgresqlInput_6.close();
	}
}
globalMap.put("tPostgresqlInput_6_NB_LINE",nb_line_tPostgresqlInput_6);
 

ok_Hash.put("tPostgresqlInput_6", true);
end_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());




/**
 * [tPostgresqlInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

tHash_Lookup_row12.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_6 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 



/**
 * [tPostgresqlInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_OPENIZ_Warehouse_StockData = new byte[0];
    static byte[] commonByteArray_OPENIZ_Warehouse_StockData = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OPENIZ_Warehouse_StockData.length) {
				if(length < 1024 && commonByteArray_OPENIZ_Warehouse_StockData.length == 0) {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[1024];
				} else {
   					commonByteArray_OPENIZ_Warehouse_StockData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OPENIZ_Warehouse_StockData, 0, length);
			strReturn = new String(commonByteArray_OPENIZ_Warehouse_StockData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OPENIZ_Warehouse_StockData) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;
                    
                    
                StringBuilder sbHeader_tLogRow_1 = new StringBuilder();
				
				sbHeader_tLogRow_1.append("moment");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("pid");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("root_pid");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("father_pid");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("project");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("job");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("context");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("priority");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("type");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("origin");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("message");
				
    			sbHeader_tLogRow_1.append("\t");
				
				sbHeader_tLogRow_1.append("code");
				
                   
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(sbHeader_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row8.type = lcm.getType();
		row8.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row8.priority = lcm.getPriority();
		row8.message = lcm.getMessage();
		row8.code = lcm.getCode();
		
		row8.moment = java.util.Calendar.getInstance().getTime();
	
    	row8.pid = pid;
		row8.root_pid = rootPid;
		row8.father_pid = fatherPid;
	
    	row8.project = projectName;
    	row8.job = jobName;
    	row8.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row8.moment != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(row8.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.pid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.root_pid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.root_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.father_pid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.father_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.project != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.project)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.job != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.context != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.context)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.priority != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.priority)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.type != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.origin != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.message != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.message)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row8.code != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row8.code)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Production";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Warehouse_StockData Warehouse_StockDataClass = new Warehouse_StockData();

        int exitCode = Warehouse_StockDataClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Warehouse_StockData.class.getClassLoader().getResourceAsStream("openiz/warehouse_stockdata_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Warehouse_StockData.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("dbName", "id_String");
				
                context.dbName=(String) context.getProperty("dbName");
				    context.setContextType("dbPassword", "id_String");
				
                context.dbPassword=(String) context.getProperty("dbPassword");
				    context.setContextType("dbPort", "id_String");
				
                context.dbPort=(String) context.getProperty("dbPort");
				    context.setContextType("dbServer", "id_String");
				
                context.dbServer=(String) context.getProperty("dbServer");
				    context.setContextType("dbUser", "id_String");
				
                context.dbUser=(String) context.getProperty("dbUser");
				    context.setContextType("dwName", "id_String");
				
                context.dwName=(String) context.getProperty("dwName");
				    context.setContextType("dwPassword", "id_String");
				
                context.dwPassword=(String) context.getProperty("dwPassword");
				    context.setContextType("dwPort", "id_String");
				
                context.dwPort=(String) context.getProperty("dwPort");
				    context.setContextType("dwServer", "id_String");
				
                context.dwServer=(String) context.getProperty("dwServer");
				    context.setContextType("dwUser", "id_String");
				
                context.dwUser=(String) context.getProperty("dwUser");
				    context.setContextType("dwTemplate", "id_String");
				
                context.dwTemplate=(String) context.getProperty("dwTemplate");
				    context.setContextType("dwWorking", "id_String");
				
                context.dwWorking=(String) context.getProperty("dwWorking");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("dbName")) {
                context.dbName = (String) parentContextMap.get("dbName");
            }if (parentContextMap.containsKey("dbPassword")) {
                context.dbPassword = (String) parentContextMap.get("dbPassword");
            }if (parentContextMap.containsKey("dbPort")) {
                context.dbPort = (String) parentContextMap.get("dbPort");
            }if (parentContextMap.containsKey("dbServer")) {
                context.dbServer = (String) parentContextMap.get("dbServer");
            }if (parentContextMap.containsKey("dbUser")) {
                context.dbUser = (String) parentContextMap.get("dbUser");
            }if (parentContextMap.containsKey("dwName")) {
                context.dwName = (String) parentContextMap.get("dwName");
            }if (parentContextMap.containsKey("dwPassword")) {
                context.dwPassword = (String) parentContextMap.get("dwPassword");
            }if (parentContextMap.containsKey("dwPort")) {
                context.dwPort = (String) parentContextMap.get("dwPort");
            }if (parentContextMap.containsKey("dwServer")) {
                context.dwServer = (String) parentContextMap.get("dwServer");
            }if (parentContextMap.containsKey("dwUser")) {
                context.dwUser = (String) parentContextMap.get("dwUser");
            }if (parentContextMap.containsKey("dwTemplate")) {
                context.dwTemplate = (String) parentContextMap.get("dwTemplate");
            }if (parentContextMap.containsKey("dwWorking")) {
                context.dwWorking = (String) parentContextMap.get("dwWorking");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tPostgresqlConnection_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostgresqlConnection_2) {
globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", -1);

e_tPostgresqlConnection_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Warehouse_StockData");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tPostgresqlConnection_2", globalMap.get("conn_tPostgresqlConnection_2"));
            connections.put("conn_tPostgresqlConnection_1", globalMap.get("conn_tPostgresqlConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     303525 characters generated by Talend Open Studio for Data Integration 
 *     on the September 25, 2020 9:15:02 EDT AM
 ************************************************************************************************/